{
	"name": "order_product",
	"properties": {
		"activities": [
			{
				"name": "Copy data1",
				"type": "Copy",
				"state": "Inactive",
				"onInactiveMarkAs": "Succeeded",
				"dependsOn": [],
				"policy": {
					"timeout": "0.15:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "PostgreSqlV2Source",
						"query": "WITH line_item_details AS (\n    SELECT\n        a.id, \n        a.variant_id AS product_variant_id,\n        COALESCE(SUM(siu.quantity_count), 0) AS quantity,\n        a.price,\n        a.created_at,\n        a.replaced, -- Use the alias 'a' here\n        COALESCE(a.updated_at, CURRENT_TIMESTAMP) AS updated_at,\n        CASE \n            WHEN a.on_sale = false THEN a.price\n            ELSE '0.0'\n        END AS action_price,\n        CASE \n            WHEN a.on_sale = true THEN a.price\n            ELSE '0'\n        END AS sale_price,\n        b.product_id,\n        CASE\n            WHEN d.replace_product::varchar = 'true' THEN 'replace-with-similar-product' \n            WHEN d.replace_product::varchar = 'false' THEN 'cancel'\n            ELSE NULL\n        END AS replacement_pref,\n        CASE \n            WHEN COALESCE(SUM(e.quantity), 0) < 5 THEN COALESCE(SUM(e.quantity), 0)\n            ELSE 0\n        END AS picked_quantity,\n        0 AS picker_id,\n        COALESCE(c.shipment_id, 0) AS order_shipment_id,\n        1 AS category_id, -- default value = 1 (grocery id from category table)\n        '' AS status,\n        CASE \n            WHEN COALESCE(SUM(e.quantity), 0) < 5 THEN 0 -- If picked_quantity < 5\n            ELSE COALESCE(SUM(e.quantity), 0) -- Assign picked_quantity as picked_weight\n        END AS picked_weight -- New column\n    FROM spree_line_items a \n    LEFT JOIN spree_variants b ON b.id = a.variant_id\n    LEFT JOIN (\n        SELECT DISTINCT ON (line_item_id) * \n        FROM spree_inventory_units\n    ) c ON c.line_item_id = a.id\n    LEFT JOIN (\n        SELECT \n            line_item_id, \n            state, \n            COUNT(id) AS quantity_count\n        FROM spree_inventory_units \n        WHERE state != 'canceled'\n        GROUP BY line_item_id, state\n    ) siu ON siu.line_item_id = a.id \n    LEFT JOIN spree_orders d ON d.id = c.order_id\n    LEFT JOIN spree_picked_items e ON e.pickable_id = a.id\n    GROUP BY\n        a.id, \n        a.variant_id,\n        a.price,\n        a.created_at,\n        a.updated_at,\n        a.on_sale,\n        b.product_id,\n        d.replace_product,\n        c.shipment_id,\n        a.replaced -- Include a.replaced in the GROUP BY clause\n)\nSELECT \n    id, \n    product_variant_id, \n    quantity, \n    price, \n    created_at, \n    updated_at, \n    action_price, \n    sale_price, \n    product_id,\n    replaced, -- Use 'replaced' from spree_line_items (alias a)\n    replacement_pref, \n    picked_quantity, \n    picked_weight, -- Include picked_weight in the SELECT\n    picker_id, \n    order_shipment_id, \n    category_id, \n    status\nFROM line_item_details;\n"
					},
					"sink": {
						"type": "ParquetSink",
						"storeSettings": {
							"type": "AzureBlobStorageWriteSettings",
							"copyBehavior": "PreserveHierarchy"
						},
						"formatSettings": {
							"type": "ParquetWriteSettings"
						}
					},
					"enableStaging": false,
					"parallelCopies": 8,
					"dataIntegrationUnits": 4,
					"translator": {
						"type": "TabularTranslator",
						"typeConversion": true,
						"typeConversionSettings": {
							"allowDataTruncation": true,
							"treatBooleanAsNumber": false
						}
					}
				},
				"inputs": [
					{
						"referenceName": "DS_V1_PRODUCTION",
						"type": "DatasetReference"
					}
				],
				"outputs": [
					{
						"referenceName": "DS_Intermiadate_Result",
						"type": "DatasetReference"
					}
				]
			},
			{
				"name": "Data flow1",
				"type": "ExecuteDataFlow",
				"dependsOn": [
					{
						"activity": "Copy data1",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"dataflow": {
						"referenceName": "order_product",
						"type": "DataFlowReference"
					},
					"compute": {
						"coreCount": 8,
						"computeType": "General"
					},
					"traceLevel": "Fine"
				}
			},
			{
				"name": "Delete1",
				"type": "Delete",
				"dependsOn": [
					{
						"activity": "Data flow1",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"dataset": {
						"referenceName": "DS_Intermiadate_Result",
						"type": "DatasetReference"
					},
					"enableLogging": false,
					"storeSettings": {
						"type": "AzureBlobStorageReadSettings",
						"recursive": true,
						"enablePartitionDiscovery": false
					}
				}
			}
		],
		"folder": {
			"name": "Order DB"
		},
		"annotations": []
	}
}