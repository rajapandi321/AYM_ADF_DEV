{
	"name": "order_shipment",
	"properties": {
		"activities": [
			{
				"name": "Copy data1",
				"type": "Copy",
				"dependsOn": [],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "PostgreSqlV2Source",
						"query": "WITH cte AS (\n    SELECT \n        ssh.id,\n        ssh.order_id,\n        CASE \n            WHEN ssh.state = 'shipped' THEN 'delivered'\n            WHEN ssh.state = 'pending' THEN 'pending'\n            WHEN ssh.state = 'ready' THEN 'picked'\n            WHEN ssh.state = 'canceled' THEN 'cancelled'\n        END AS status,\n        ssh.created_at,\n        ssh.updated_at,\n        CAST((ssh.additional_tax_total + ssh.included_tax_total) AS DOUBLE PRECISION) AS tax_total,\n        so.total,\n        so.order_type,\n        slto.time_slots_schedule_id,\n        so.supermarket_id,\n        sla.delivery_date,\n        sa.amount AS delivery_charges,\n        FALSE AS is_delivery_on_hold,\n        CURRENT_TIMESTAMP AS processing_start_at,\n        ROW_NUMBER() OVER (PARTITION BY ssh.id ORDER BY ssh.id) AS rn\n    FROM spree_shipments ssh\n    INNER JOIN spree_orders so ON so.id = ssh.order_id AND so.state != 'cart'\n    LEFT JOIN spree_lift_assignments sla ON sla.order_id = ssh.order_id\n    LEFT JOIN spree_adjustments sa ON sa.order_id = ssh.order_id AND sa.label = 'Express Fee'\n    LEFT JOIN danube_slot_to_orders slto ON slto.order_id = ssh.order_id\n    ORDER BY ssh.id ASC\n)\nSELECT \n    id,\n    order_id,\n    status,\n    created_at,\n    updated_at,\n    tax_total,\n    total,\n    order_type,\n    time_slots_schedule_id,\n    supermarket_id,\n    delivery_date,\n    delivery_charges,\n    is_delivery_on_hold,\n    processing_start_at\nFROM cte\nWHERE rn = 1;\n"
					},
					"sink": {
						"type": "ParquetSink",
						"storeSettings": {
							"type": "AzureBlobStorageWriteSettings",
							"copyBehavior": "FlattenHierarchy"
						},
						"formatSettings": {
							"type": "ParquetWriteSettings"
						}
					},
					"enableStaging": false,
					"translator": {
						"type": "TabularTranslator",
						"mappings": [
							{
								"source": {
									"name": "id",
									"type": "Int32",
									"physicalType": "integer"
								},
								"sink": {
									"name": "id",
									"type": "Int32",
									"physicalType": "INT_32"
								}
							},
							{
								"source": {
									"name": "order_id",
									"type": "Int32",
									"physicalType": "integer"
								},
								"sink": {
									"name": "order_id",
									"type": "Int32",
									"physicalType": "INT_32"
								}
							},
							{
								"source": {
									"name": "status",
									"type": "String",
									"physicalType": "text"
								},
								"sink": {
									"name": "status",
									"type": "String",
									"physicalType": "UTF8"
								}
							},
							{
								"source": {
									"name": "created_at",
									"type": "DateTime",
									"physicalType": "timestamp without time zone"
								},
								"sink": {
									"name": "created_at",
									"type": "DateTime",
									"physicalType": "INT_96"
								}
							},
							{
								"source": {
									"name": "updated_at",
									"type": "DateTime",
									"physicalType": "timestamp without time zone"
								},
								"sink": {
									"name": "updated_at",
									"type": "DateTime",
									"physicalType": "INT_96"
								}
							},
							{
								"source": {
									"name": "tax_total",
									"type": "Double",
									"physicalType": "double precision"
								},
								"sink": {
									"name": "tax_total",
									"type": "Double",
									"physicalType": "DOUBLE"
								}
							},
							{
								"source": {
									"name": "total",
									"type": "Decimal",
									"physicalType": "numeric"
								},
								"sink": {
									"name": "total",
									"type": "Decimal",
									"physicalType": "DECIMAL"
								}
							},
							{
								"source": {
									"name": "order_type",
									"type": "String",
									"physicalType": "character varying"
								},
								"sink": {
									"name": "order_type",
									"type": "String",
									"physicalType": "UTF8"
								}
							},
							{
								"source": {
									"name": "time_slots_schedule_id",
									"type": "Int32",
									"physicalType": "integer"
								},
								"sink": {
									"name": "time_slots_schedule_id",
									"type": "Int32",
									"physicalType": "INT_32"
								}
							},
							{
								"source": {
									"name": "supermarket_id",
									"type": "Int32",
									"physicalType": "integer"
								},
								"sink": {
									"name": "supermarket_id",
									"type": "Int32",
									"physicalType": "INT_32"
								}
							},
							{
								"source": {
									"name": "delivery_date",
									"type": "DateTime",
									"physicalType": "date"
								},
								"sink": {
									"name": "delivery_date",
									"type": "DateTime",
									"physicalType": "INT_96"
								}
							},
							{
								"source": {
									"name": "delivery_charges",
									"type": "Decimal",
									"physicalType": "numeric"
								},
								"sink": {
									"name": "delivery_charges",
									"type": "Decimal",
									"physicalType": "DECIMAL"
								}
							},
							{
								"source": {
									"name": "is_delivery_on_hold",
									"type": "Boolean",
									"physicalType": "boolean"
								},
								"sink": {
									"name": "is_delivery_on_hold",
									"type": "Boolean",
									"physicalType": "BOOLEAN"
								}
							},
							{
								"source": {
									"name": "processing_start_at",
									"type": "DateTime",
									"physicalType": "timestamp with time zone"
								},
								"sink": {
									"name": "processing_start_at",
									"type": "DateTime",
									"physicalType": "INT_96"
								}
							}
						],
						"typeConversion": true,
						"typeConversionSettings": {
							"allowDataTruncation": true,
							"treatBooleanAsNumber": false
						}
					}
				},
				"inputs": [
					{
						"referenceName": "DS_V1_PRODUCTION",
						"type": "DatasetReference"
					}
				],
				"outputs": [
					{
						"referenceName": "DS_Intermiadate_Result",
						"type": "DatasetReference"
					}
				]
			},
			{
				"name": "Data flow1",
				"type": "ExecuteDataFlow",
				"dependsOn": [
					{
						"activity": "Copy data1",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"dataflow": {
						"referenceName": "order_shipment",
						"type": "DataFlowReference"
					},
					"compute": {
						"coreCount": 8,
						"computeType": "General"
					},
					"traceLevel": "Fine"
				}
			}
		],
		"folder": {
			"name": "Order DB"
		},
		"annotations": []
	}
}