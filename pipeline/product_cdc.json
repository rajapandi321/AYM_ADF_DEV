{
	"name": "product_cdc",
	"properties": {
		"activities": [
			{
				"name": "Lookup1",
				"type": "Lookup",
				"dependsOn": [],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzurePostgreSqlSource",
						"query": "select max(updated_at) as max_updated_date\r\nfrom product;",
						"partitionOption": "None"
					},
					"dataset": {
						"referenceName": "DS_V2_STAGE",
						"type": "DatasetReference",
						"parameters": {
							"table_name": "product",
							"database_name": "product-db-stage"
						}
					}
				}
			},
			{
				"name": "Set variable1",
				"type": "SetVariable",
				"dependsOn": [
					{
						"activity": "Lookup1",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"variableName": "max_updated_date",
					"value": {
						"value": "@activity('Lookup1').output.firstRow.max_updated_date",
						"type": "Expression"
					}
				}
			},
			{
				"name": "Copy data1",
				"type": "Copy",
				"dependsOn": [
					{
						"activity": "Set variable1",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "PostgreSqlV2Source",
						"query": {
							"value": "WITH brand AS (\n  SELECT \n    rt.id,\n    COALESCE(rt.name_en,'') AS name_en,\n    COALESCE(\n      CASE\n        WHEN LENGTH(rt.name_en) < 5 THEN \n          UPPER(REGEXP_REPLACE(TRANSLATE(rt.name_en, ' ', '_'), '[^a-zA-Z0-9_]', '', 'g')) || '_' || rt.id\n        ELSE \n          UPPER(SUBSTRING(REGEXP_REPLACE(TRANSLATE(rt.name_en, ' ', ''), '[^a-zA-Z0-9]', '', 'g'), 1, 1)) ||\n          UPPER(SUBSTRING(REGEXP_REPLACE(SUBSTRING(REGEXP_REPLACE(TRANSLATE(rt.name_en, ' ', ''), '[^a-zA-Z0-9]', ' ', 'g'), 2), ' ', ''), 1, 1)) ||\n          '_' || rt.id\n      END, \n    '') AS code,\n    rt.created_at,\n    rt.updated_at,\n    rt.temp_taxon_id,\n    COALESCE(rt.name_ar, '') AS name_ar\n  FROM (\n    SELECT \n      ROW_NUMBER() OVER () AS id,\n      st.id AS temp_taxon_id,\n      MAX(CASE WHEN stt.locale = 'en' THEN stt.name END) AS name_en,\n      MAX(CASE WHEN stt.locale = 'ar' THEN stt.name END) AS name_ar,\n      st.created_at,\n      st.updated_at\n    FROM spree_taxons st\n    LEFT JOIN spree_taxon_translations stt ON stt.spree_taxon_id = st.id\n    WHERE st.parent_id IN (\n      SELECT st.id \n      FROM spree_taxons st \n      JOIN spree_taxon_translations stt ON stt.spree_taxon_id = st.id AND stt.locale = 'en'\n      WHERE stt.name = 'Brands'\n    )\n    GROUP BY st.id\n  ) AS rt\n  ORDER BY rt.temp_taxon_id ASC\n), \nsupplier AS (\n  SELECT \n    REGEXP_REPLACE(MAX(COALESCE(spt.supplier_name,'')), '-[0-9]+$', '') AS name,\n    LEFT(COALESCE(spt.code, ''), 10) AS code,\n    MAX(spt.created_at) AS created_at,\n    MAX(spt.updated_at) AS updated_at,\n    MAX(spt.deleted_at) AS deleted_at\n  FROM (\n    SELECT\n      spree_product_id,\n      MAX(CASE WHEN locale = 'en' THEN manufacturer END) AS supplier_name,\n      MAX(CASE WHEN locale = 'ar' THEN manufacturer END) AS code,\n      MAX(created_at) AS created_at,\n      MAX(updated_at) AS updated_at,\n      MAX(deleted_at) AS deleted_at\n    FROM spree_product_translations\n    WHERE manufacturer IS NOT NULL\n    GROUP BY spree_product_id\n  ) AS spt\n  GROUP BY spt.code\n), \ncte AS (\n  SELECT \n    sp.id,\n    sp.tax_category_id,\n    sp.refundable,\n    sp.moq_limit,\n    sp.meta_title,\n    sp.loyalty_point,\n    sp_table.validity_tag_ar,\n    sp_table.validity_tag,\n    sp_table.slug,\n    sp_table.size,\n\tREGEXP_REPLACE(MAX(COALESCE(sp_table.supplier_name,'')), '-[0-9]+$', '') AS supplier_code,\n    COALESCE(sp_table.name_ar, '') AS name_ar,\n    COALESCE(sp_table.name, '') AS name,\n    COALESCE(sp_table.meta_keywords_ar, '') AS meta_keywords_ar,\n    COALESCE(sp_table.meta_keywords, '') AS meta_keywords,\n    COALESCE(sp_table.meta_description_ar, '') AS meta_description_ar,\n    COALESCE(sp_table.meta_description, '') AS meta_description,\n    COALESCE(sp_table.short_description_ar, '') AS short_description_ar,\n    COALESCE(sp_table.long_description_ar, '') AS long_description_ar,\n    COALESCE(sp_table.short_description, '') AS short_description,\n    COALESCE(sp_table.long_description, '') AS long_description,\n    COALESCE(sp.is_loyalty_reward, 'false') AS issue_loyalty_points,\n    CASE\n      WHEN sp.electronic_product_code = '' THEN NULL \n      ELSE CAST(sp.electronic_product_code AS INT)\n    END AS electronic_product_code,\n    CASE\n      WHEN sp.deleted_at IS NOT NULL THEN TRUE\n      ELSE FALSE\n    END AS is_deleted,\n    COALESCE(sp.crushable, false) AS crushable,\n    sp.created_at,\n    sp.updated_at,\n    sp.cod_enabled,\n    COALESCE(CAST(sp.available_on AS DATE), CAST(CURRENT_TIMESTAMP AS DATE)) AS available_on,\n    sp.bundled,\n    sp.bin_category_id,\n    brand_taxon.temp_taxon_id AS default_taxon_id,\n    sv.width,\n    sv.weight_increment,\n    CASE \n        WHEN  sv.weight_increment > 0 AND sv.default_weight_count > 0 AND sv.max_weight_per_order > 0 -- weighted product \n        THEN sv.weight_increment\n        Else sv.weight\n    End as weight,\n    sv.sku,\n    case when\n    CAST(sv.perform_liquid_weight_check AS INT) = 0 Then 'False'\n    ELSE 'True'\n    END AS perform_liquid_weight_check,\n    sv.max_weight_per_order,\n    sv.height,\n    sv.depth,\n    sv.default_weight_count,\n    FALSE AS promotable,\n    TRUE AS is_wishlisted,\n    FALSE AS is_gluten_free,\n    '' AS discount,\n    FALSE AS deactivate,\n    ds_country.country_id,\n    1 AS category_id,\n    brand_taxon.brand_id AS brand_id\n  FROM spree_products sp\n  LEFT JOIN (\n    SELECT\n      sp.id,\n\t  MAX(CASE WHEN locale = 'en' THEN manufacturer END) as supplier_name,\n      MAX(CASE WHEN sptrans.locale = 'ar' THEN sptrans.validity_tag END) AS validity_tag_ar,\n      MAX(CASE WHEN sptrans.locale = 'en' THEN sptrans.validity_tag END) AS validity_tag,\n      MAX(sptrans.slug) AS slug,\n      MAX(sptrans.pack_size) AS size,\n      MAX(CASE WHEN sptrans.locale = 'ar' THEN sptrans.name END) AS name_ar,\n      MAX(CASE WHEN sptrans.locale = 'en' THEN sptrans.name END) AS name,\n      MAX(CASE WHEN sptrans.locale = 'ar' THEN sptrans.meta_keywords END) AS meta_keywords_ar,\n      MAX(CASE WHEN sptrans.locale = 'en' THEN sptrans.meta_keywords END) AS meta_keywords,\n      MAX(CASE WHEN sptrans.locale = 'ar' THEN sptrans.meta_description END) AS meta_description_ar,\n      MAX(CASE WHEN sptrans.locale = 'en' THEN sptrans.meta_description END) AS meta_description,\n      MAX(CASE WHEN sptrans.locale = 'ar' THEN sptrans.description END) AS short_description_ar,\n      MAX(CASE WHEN sptrans.locale = 'ar' THEN sptrans.description END) AS long_description_ar,\n      MAX(CASE WHEN sptrans.locale = 'en' THEN sptrans.description END) AS short_description,\n      MAX(CASE WHEN sptrans.locale = 'en' THEN sptrans.description END) AS long_description,\n      MAX(CASE WHEN sptrans.locale = 'ar' THEN sptrans.manufacturer END) AS supplier_code\n    FROM spree_products sp\n    LEFT JOIN spree_product_translations sptrans ON sptrans.spree_product_id = sp.id\n    GROUP BY sp.id\n  ) AS sp_table ON sp_table.id = sp.id\n  LEFT JOIN (\n    SELECT \n      sp.id, \n      db.country_id \n    FROM spree_products sp\n    LEFT JOIN spree_product_inventory_modifiers sim ON sp.id = sim.product_id\n    LEFT JOIN danube_supermarkets db ON sim.rule_supermarket_id = db.id\n    GROUP BY sp.id, db.country_id\n  ) AS ds_country ON sp.id = ds_country.id\n  LEFT JOIN (\n    SELECT \n      ROW_NUMBER() OVER (PARTITION BY prod_taxon.product_id ORDER BY b.created_at DESC) AS row_num,\n      b.temp_taxon_id,\n      b.id AS brand_id, \n      prod_taxon.product_id AS product_id\n    FROM brand b \n    LEFT JOIN spree_products_taxons prod_taxon ON b.temp_taxon_id = prod_taxon.taxon_id\n  ) AS brand_taxon ON brand_taxon.product_id = sp.id\n  LEFT JOIN (\n    SELECT \n      ROW_NUMBER() OVER (PARTITION BY product_id ORDER BY created_at DESC) AS row_num, \n      *\n    FROM spree_variants \n  ) sv ON sv.product_id = sp.id\n  LEFT JOIN supplier sup ON sup.code = sp_table.supplier_code AND sup.code != ''\n  WHERE (brand_taxon.row_num = 1 OR brand_taxon.row_num IS NULL) \n    AND (sv.row_num = 1 OR sv.row_num IS NULL)\nGROUP BY \n        sp.id, \n        sp.tax_category_id,\n        sp.refundable,\n        sp.moq_limit,\n        sp.meta_title,\n        sp.loyalty_point,\n        sp_table.validity_tag_ar,\n        sp_table.validity_tag,\n        sp_table.slug,\n\t\tbrand_taxon.temp_taxon_id,\n        sp_table.size,\n        sp_table.supplier_name,\n        sp_table.name_ar,\n        sp_table.name,\n        sp_table.meta_keywords_ar,\n        sp_table.meta_keywords,\n        sp_table.meta_description_ar,\n        sp_table.meta_description,\n        sp_table.short_description_ar,\n        sp_table.long_description_ar,\n        sp_table.short_description,\n        sp_table.long_description,\n        sp.is_loyalty_reward,\n\t\t    brand_taxon.brand_id,\n        sp.electronic_product_code,\n        sp.deleted_at,\n        sp.crushable,\n        sp.created_at,\n        sp.updated_at,\n        sp.cod_enabled,\n        sp.available_on,\n        sp.bundled,\n        sp.bin_category_id,\n        sv.width,\n        sv.weight_increment,\n        sv.weight,\n        sv.sku,\n        sv.perform_liquid_weight_check,\n        sv.max_weight_per_order,\n        sv.height,\n        sv.depth,\n        sv.default_weight_count,\n        ds_country.country_id\n)\nSELECT \n  filtered_cte.id,\n    filtered_cte.tax_category_id,\n    filtered_cte.refundable,\n    filtered_cte.moq_limit,\n    filtered_cte.meta_title,\n    filtered_cte.loyalty_point,\n    filtered_cte.validity_tag_ar,\n    filtered_cte.validity_tag,\n    filtered_cte.slug,\n    filtered_cte.size,\n\tfiltered_cte.supplier_code as temp_supplier_code,\n    filtered_cte.name_ar,\n    filtered_cte.name,\n    filtered_cte.meta_keywords_ar,\n    filtered_cte.meta_keywords,\n    filtered_cte.meta_description_ar,\n    filtered_cte.meta_description,\n    filtered_cte.short_description_ar,\n    filtered_cte.long_description_ar,\n    filtered_cte.short_description,\n    filtered_cte.long_description,\n    filtered_cte.issue_loyalty_points,\n    filtered_cte.electronic_product_code,\n    filtered_cte.is_deleted,\n    filtered_cte.crushable,\n    filtered_cte.created_at,\n    filtered_cte.updated_at,\n    filtered_cte.cod_enabled,\n    filtered_cte.available_on,\n    filtered_cte.bundled,\n    filtered_cte.bin_category_id,\n    filtered_cte.default_taxon_id,\n    filtered_cte.width,\n    filtered_cte.weight_increment,\n    filtered_cte.weight,\n    filtered_cte.sku,\n    filtered_cte.perform_liquid_weight_check,\n    filtered_cte.max_weight_per_order,\n    filtered_cte.height,\n    filtered_cte.depth,\n    filtered_cte.default_weight_count,\n    filtered_cte.promotable,\n    filtered_cte.is_wishlisted,\n    filtered_cte.is_gluten_free,\n    filtered_cte.discount,\n    filtered_cte.deactivate,\n    filtered_cte.country_id,\n    filtered_cte.category_id,\n    filtered_cte.brand_id\nFROM (\n  SELECT \n    cte.*,\n    ROW_NUMBER() OVER (PARTITION BY id ORDER BY country_id) AS rn \n  FROM cte\n) filtered_cte\nWHERE rn = 1\nand updated_at > '@{variables('max_updated_date')}';",
							"type": "Expression"
						}
					},
					"sink": {
						"type": "ParquetSink",
						"storeSettings": {
							"type": "AzureBlobStorageWriteSettings"
						},
						"formatSettings": {
							"type": "ParquetWriteSettings"
						}
					},
					"enableStaging": false,
					"translator": {
						"type": "TabularTranslator",
						"typeConversion": true,
						"typeConversionSettings": {
							"allowDataTruncation": true,
							"treatBooleanAsNumber": false
						}
					}
				},
				"inputs": [
					{
						"referenceName": "DS_V1_DEV",
						"type": "DatasetReference"
					}
				],
				"outputs": [
					{
						"referenceName": "DS_Intermiadate_Result",
						"type": "DatasetReference"
					}
				]
			},
			{
				"name": "Data flow1",
				"type": "ExecuteDataFlow",
				"state": "Inactive",
				"onInactiveMarkAs": "Succeeded",
				"dependsOn": [
					{
						"activity": "Copy data1",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"dataflow": {
						"referenceName": "df_offline_product_cdc",
						"type": "DataFlowReference"
					},
					"compute": {
						"coreCount": 8,
						"computeType": "General"
					},
					"traceLevel": "Fine"
				}
			},
			{
				"name": "Delete1",
				"type": "Delete",
				"state": "Inactive",
				"onInactiveMarkAs": "Succeeded",
				"dependsOn": [
					{
						"activity": "Data flow1",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"dataset": {
						"referenceName": "DS_Intermiadate_Result",
						"type": "DatasetReference"
					},
					"enableLogging": false,
					"storeSettings": {
						"type": "AzureBlobStorageReadSettings",
						"recursive": true,
						"enablePartitionDiscovery": false
					}
				}
			}
		],
		"variables": {
			"max_updated_date": {
				"type": "String"
			}
		},
		"folder": {
			"name": "Product DB CDC"
		},
		"annotations": []
	}
}