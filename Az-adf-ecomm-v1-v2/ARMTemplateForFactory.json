{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "Az-adf-ecomm-v1-v2"
		},
		"LS_CrossDB_Connection_Storage_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'LS_CrossDB_Connection_Storage'"
		},
		"LS_V1_PRODUCTION_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'LS_V1_PRODUCTION'"
		},
		"LS_V2_AUTH_DB_DEV_SERVER_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'LS_V2_AUTH_DB_DEV_SERVER'",
			"defaultValue": "Host=az-postgress-danube-dev.postgres.database.azure.com;Port=5432;Database=user-db-dev;UID=dnbpostgressdev@az-postgress-danube-dev;EncryptionMethod=0"
		},
		"LS_V2_AUTH_DB_PRODUCTION_SERVER_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'LS_V2_AUTH_DB_PRODUCTION_SERVER'",
			"defaultValue": "Host=ecommerce20.postgres.database.azure.com;Port=5432;Database=auth-db-prod;UID=eccommercepostgres;EncryptionMethod=0"
		},
		"LS_V2_PRODUCTION_SERVER_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'LS_V2_PRODUCTION_SERVER'",
			"defaultValue": "Host=ecommerce20.postgres.database.azure.com;Port=5432;Database=order-db-prod;UID=eccommercepostgres;EncryptionMethod=0"
		},
		"LS_V2_PRODUCT_DB_DEV_SERVER_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'LS_V2_PRODUCT_DB_DEV_SERVER'",
			"defaultValue": "Host=az-postgress-danube-dev.postgres.database.azure.com;Port=5432;Database=product-db-dev;UID=dnbpostgressdev@az-postgress-danube-dev;EncryptionMethod=0;Timeout=120;CommandTimeout=300"
		},
		"LS_V2_PRODUCT_DB_PRODUCTION_SERVER_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'LS_V2_PRODUCT_DB_PRODUCTION_SERVER'",
			"defaultValue": "Host=ecommerce20.postgres.database.azure.com;Port=5432;Database=product-db-prod;UID=eccommercepostgres;EncryptionMethod=0"
		},
		"LS_V2_USER_DB_PRODUCTION_SERVER_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'LS_V2_USER_DB_PRODUCTION_SERVER'",
			"defaultValue": "Host=ecommerce20.postgres.database.azure.com;Port=5432;Database=user-db-prod;UID=eccommercepostgres;EncryptionMethod=0"
		},
		"LS_Danube_Key_Vault_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "https://azecom2np-keyvault.vault.azure.net/"
		},
		"LS_V1_PRODUCTION_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "ec2-34-243-193-35.eu-west-1.compute.amazonaws.com"
		},
		"LS_V1_PRODUCTION_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "d60isnsp8nivcb"
		},
		"LS_V1_PRODUCTION_properties_typeProperties_username": {
			"type": "string",
			"defaultValue": "readonly_cred"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/address')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "address",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "PostgreSqlV2Source",
								"query": "SELECT DISTINCT\n    sua.id,\n    CASE\n        WHEN sa.address1 IS NOT NULL AND sa.address2 IS NOT NULL THEN\n            CONCAT(sa.address1, ' ', sa.address2, ', ')\n        WHEN sa.address1 IS NOT NULL THEN\n            CONCAT(sa.address1, ' ')\n        WHEN sa.address2 IS NOT NULL THEN\n            CONCAT(sa.address2, ', ')\n        ELSE ''\n    END AS formatted_address,\n    COALESCE(COALESCE(sst_en.name, sst_ar.name),'') AS city,\n    COALESCE(scon.name, 'Saudi Arabia') AS country,\n    COALESCE(NULLIF(regexp_replace(sa.zipcode, '[^0-9]', '', 'g'), '')::BIGINT, NULL) AS postal_code,\n    sua.created_at,\n    sua.updated_at,\n    COALESCE(sdt_en.name, sdt_ar.name) AS district,\n    COALESCE(sa.latitude, 0) AS latitude,\n    COALESCE(sa.longitude, 0) AS longitude,\n    COALESCE(sua.default, 'false') AS is_default,\n    sua.user_id AS user_id,\n    'other' AS type,\n    COALESCE(\n        CASE \n            WHEN sa.driver_meta_data IS NOT NULL THEN sa.driver_meta_data->>'verified'\n            ELSE 'false'\n        END, 'false') AS is_verified,  -- Ensure non-null value here\n    '' AS title,\n    sa.driver_meta_data->>'notes' AS comments\nFROM\n    spree_user_addresses sua\nLEFT JOIN spree_addresses sa ON sua.address_id = sa.id\nLEFT JOIN spree_countries scon ON sa.country_id = scon.id\nLEFT JOIN spree_districts sdist ON sdist.id = sa.district_id\nLEFT JOIN spree_district_translations sdt_en ON sdt_en.spree_district_id = sdist.id AND sdt_en.locale = 'en'\nLEFT JOIN spree_district_translations sdt_ar ON sdt_ar.spree_district_id = sdist.id AND sdt_ar.locale = 'ar'\nLEFT JOIN spree_state_translations sst_en ON sst_en.id = sa.state_id AND sst_en.locale = 'en'\nLEFT JOIN spree_state_translations sst_ar ON sst_ar.id = sa.state_id AND sst_ar.locale = 'ar'\nWHERE (sa.id IS NOT NULL AND city IS NOT NULL)\nORDER BY sua.id DESC;"
							},
							"sink": {
								"type": "AzurePostgreSQLSink",
								"writeBatchSize": 1000000,
								"writeBatchTimeout": "00:30:00",
								"writeMethod": "CopyCommand"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "id",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "id",
											"type": "Int32",
											"physicalType": "integer"
										}
									},
									{
										"source": {
											"name": "created_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										},
										"sink": {
											"name": "created_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										}
									},
									{
										"source": {
											"name": "updated_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										},
										"sink": {
											"name": "updated_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										}
									},
									{
										"source": {
											"name": "city",
											"type": "String",
											"physicalType": "character varying"
										},
										"sink": {
											"name": "city",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "is_default",
											"type": "Boolean",
											"physicalType": "boolean"
										},
										"sink": {
											"name": "is_default",
											"type": "Boolean",
											"physicalType": "boolean"
										}
									},
									{
										"source": {
											"name": "longitude",
											"type": "Double",
											"physicalType": "double precision"
										},
										"sink": {
											"name": "longitude",
											"type": "Double",
											"physicalType": "double precision"
										}
									},
									{
										"source": {
											"name": "latitude",
											"type": "Double",
											"physicalType": "double precision"
										},
										"sink": {
											"name": "latitude",
											"type": "Double",
											"physicalType": "double precision"
										}
									},
									{
										"source": {
											"name": "user_id",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "user_id",
											"type": "Int32",
											"physicalType": "integer"
										}
									},
									{
										"source": {
											"name": "country",
											"type": "String",
											"physicalType": "character varying"
										},
										"sink": {
											"name": "country",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "type",
											"type": "String",
											"physicalType": "text"
										},
										"sink": {
											"name": "type",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "formatted_address",
											"type": "String",
											"physicalType": "text"
										},
										"sink": {
											"name": "formatted_address",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "postal_code",
											"type": "Int64",
											"physicalType": "bigint"
										},
										"sink": {
											"name": "postal_code",
											"type": "Int64",
											"physicalType": "bigint"
										}
									},
									{
										"source": {
											"name": "district",
											"type": "String",
											"physicalType": "character varying"
										},
										"sink": {
											"name": "district",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "is_verified",
											"type": "String",
											"physicalType": "text"
										},
										"sink": {
											"name": "is_verified",
											"type": "Boolean",
											"physicalType": "boolean"
										}
									},
									{
										"source": {
											"name": "comments",
											"type": "String",
											"physicalType": "text"
										},
										"sink": {
											"name": "comments",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "title",
											"type": "String",
											"physicalType": "text"
										},
										"sink": {
											"name": "title",
											"type": "String",
											"physicalType": "character varying"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_V1_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_V2_USER_DB_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {
									"table_name": "address"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "User DB"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_V1_PRODUCTION')]",
				"[concat(variables('factoryId'), '/datasets/DS_V2_USER_DB_PRODUCTION')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/auth_employee')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "PostgreSqlV2Source",
								"query": "SELECT distinct\n\tu.id as id,\n    u.id AS user,\n    u.encrypted_password AS password,\n    u.password_salt,\n    u.email,\n    u.created_at,\n    u.updated_at,\n    CAST(CASE \n            WHEN u.deleted_at IS NOT NULL THEN TRUE\n            ELSE FALSE\n        END AS BOOLEAN) AS is_deleted,\n    CURRENT_TIMESTAMP as password_updated_at\n\t\nFROM spree_users u\ninner join spree_roles_users sru on sru.user_id = u.id\ninner join spree_roles sr on sr.id = sru.role_id and sr.id <> 2 and sr.name <> 'user'"
							},
							"sink": {
								"type": "AzurePostgreSQLSink",
								"writeBatchSize": 1000000,
								"writeBatchTimeout": "00:30:00",
								"writeMethod": "CopyCommand"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "id",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "id",
											"type": "Int32",
											"physicalType": "integer"
										}
									},
									{
										"source": {
											"name": "is_deleted",
											"type": "Boolean",
											"physicalType": "boolean"
										},
										"sink": {
											"name": "is_deleted",
											"type": "Boolean",
											"physicalType": "boolean"
										}
									},
									{
										"source": {
											"name": "created_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										},
										"sink": {
											"name": "created_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										}
									},
									{
										"source": {
											"name": "updated_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										},
										"sink": {
											"name": "updated_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										}
									},
									{
										"source": {
											"name": "user",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "user",
											"type": "Int32",
											"physicalType": "integer"
										}
									},
									{
										"source": {
											"name": "email",
											"type": "String",
											"physicalType": "character varying"
										},
										"sink": {
											"name": "email",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "password_updated_at",
											"type": "DateTime",
											"physicalType": "timestamp with time zone"
										},
										"sink": {
											"name": "password_updated_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										}
									},
									{
										"source": {
											"name": "password_salt",
											"type": "String",
											"physicalType": "character varying"
										},
										"sink": {
											"name": "password_salt",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "password",
											"type": "String",
											"physicalType": "character varying"
										},
										"sink": {
											"name": "password",
											"type": "String",
											"physicalType": "text"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_V1_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_V2_AUTH_DB_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {
									"table_name": "employee"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Auth DB"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_V1_PRODUCTION')]",
				"[concat(variables('factoryId'), '/datasets/DS_V2_AUTH_DB_PRODUCTION')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/auth_user')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Lookup1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "PostgreSqlV2Source",
								"query": "SELECT \n    u.id AS user_id,\n    u.encrypted_password AS password,\n    u.password_salt,\n    u.email,\n    u.created_at,\n    u.updated_at,\n    CAST(CASE \n            WHEN u.deleted_at IS NOT NULL THEN TRUE\n            ELSE FALSE\n        END AS BOOLEAN) AS is_deleted,\n    CURRENT_TIMESTAMP as password_updated_at,\n    false as is_email_verified,\n    u.is_phone_verified as mobile_verified,\n\tcase \n  \twhen sua.provider = 'google_oauth2' then 'google'\n\telse sua.provider end as login_type,\n\tsua.uid as social_id,\n\tcoalesce(u.spree_api_key,'') as spree_api_key,\n\tcase \n\twhen u.blacklisted_at is not null Then True\n\tELSE false\n\tend as blacklisted\n\t\nFROM spree_users u\nleft join spree_user_authentications sua on u.id = sua.user_id"
							},
							"sink": {
								"type": "AzurePostgreSQLSink",
								"writeBatchSize": 1000000,
								"writeBatchTimeout": "00:30:00",
								"writeMethod": "CopyCommand"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "is_deleted",
											"type": "Boolean",
											"physicalType": "boolean"
										},
										"sink": {
											"name": "is_deleted",
											"type": "Boolean",
											"physicalType": "boolean"
										}
									},
									{
										"source": {
											"name": "created_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										},
										"sink": {
											"name": "created_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										}
									},
									{
										"source": {
											"name": "updated_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										},
										"sink": {
											"name": "updated_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										}
									},
									{
										"source": {
											"name": "user_id",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "user",
											"type": "Int32",
											"physicalType": "integer"
										}
									},
									{
										"source": {
											"name": "email",
											"type": "String",
											"physicalType": "character varying"
										},
										"sink": {
											"name": "email",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "password_updated_at",
											"type": "DateTime",
											"physicalType": "timestamp with time zone"
										},
										"sink": {
											"name": "password_updated_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										}
									},
									{
										"source": {
											"name": "login_type",
											"type": "String",
											"physicalType": "character varying"
										},
										"sink": {
											"name": "login_type",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "social_id",
											"type": "String",
											"physicalType": "character varying"
										},
										"sink": {
											"name": "social_id",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "is_email_verified",
											"type": "Boolean",
											"physicalType": "boolean"
										},
										"sink": {
											"name": "is_email_verified",
											"type": "Boolean",
											"physicalType": "boolean"
										}
									},
									{
										"source": {
											"name": "mobile_verified",
											"type": "Boolean",
											"physicalType": "boolean"
										},
										"sink": {
											"name": "mobile_verified",
											"type": "Boolean",
											"physicalType": "boolean"
										}
									},
									{
										"source": {
											"name": "password_salt",
											"type": "String",
											"physicalType": "character varying"
										},
										"sink": {
											"name": "password_salt",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "password",
											"type": "String",
											"physicalType": "character varying"
										},
										"sink": {
											"name": "password",
											"type": "String",
											"physicalType": "text"
										}
									},
									{
										"source": {
											"name": "blacklisted",
											"type": "Boolean",
											"physicalType": "boolean"
										},
										"sink": {
											"name": "is_blacklisted",
											"type": "Boolean",
											"physicalType": "boolean"
										}
									},
									{
										"source": {
											"name": "spree_api_key",
											"type": "String",
											"physicalType": "character varying"
										},
										"sink": {
											"name": "spree_api_key",
											"type": "String",
											"physicalType": "character varying"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_V1_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_V2_AUTH_DB_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {
									"table_name": "user"
								}
							}
						]
					},
					{
						"name": "Lookup1",
						"description": "Alter sequence user_id_seq restart with 1;\nSelect 'Altering Sequence' As Update;",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzurePostgreSqlSource",
								"query": "Alter sequence user_id_seq restart with 1;\nSelect 'Altering Sequence' as update;",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_V2_AUTH_DB_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {
									"table_name": "user"
								}
							},
							"firstRowOnly": false
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"max_updated_date": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Auth DB"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_V1_PRODUCTION')]",
				"[concat(variables('factoryId'), '/datasets/DS_V2_AUTH_DB_PRODUCTION')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/bin_category')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "PostgreSqlV2Source",
								"query": "SELECT \n  id, \n  tag AS category, \n  created_at, \n  updated_at,\n  Upper(tag) as code\nFROM \n  spree_bin_categories;"
							},
							"sink": {
								"type": "AzurePostgreSQLSink",
								"writeBatchSize": 1000000,
								"writeBatchTimeout": "00:30:00",
								"writeMethod": "CopyCommand"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_V1_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_V2_PRODUCT_DB_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {
									"table_name": "bin_category"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Product DB"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_V1_PRODUCTION')]",
				"[concat(variables('factoryId'), '/datasets/DS_V2_PRODUCT_DB_PRODUCTION')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/brand')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Lookup1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "PostgreSqlV2Source",
								"query": "SELECT \r\n  rt.id,\r\n  COALESCE(rt.name_en,'') as name_en,\r\n  COALESCE(CASE\r\n  \tWHEN LENGTH(rt.name_en) < 5 THEN UPPER(REGEXP_REPLACE(TRANSLATE(rt.name_en, ' ', '_'), '[^a-zA-Z0-9_]', '', 'g'))||'_' || rt.id\r\n\tELSE UPPER(SUBSTRING(REGEXP_REPLACE(TRANSLATE(rt.name_en, ' ', ''), '[^a-zA-Z0-9]', '', 'g'), 1, 1)) ||\r\n           UPPER(SUBSTRING(REGEXP_REPLACE(SUBSTRING(REGEXP_REPLACE(TRANSLATE(rt.name_en, ' ', ''), '[^a-zA-Z0-9]', ' ', 'g'), 2), ' ', ''), 1, 1)) ||\r\n           '_' || rt.id\r\n  END,'') AS code,\r\n  rt.created_at,\r\n  rt.updated_at,\r\n  rt.temp_taxon_id,\r\n  COALESCE(rt.name_ar,'') as name_ar\r\nFROM (SELECT \r\n    ROW_NUMBER() OVER () AS id,\r\n    st.id AS temp_taxon_id,\r\n    MAX(CASE WHEN stt.locale = 'en' THEN stt.name END) AS name_en,\r\n    MAX(CASE WHEN stt.locale = 'ar' THEN stt.name END) AS name_ar,\r\n    st.created_at,\r\n    st.updated_at\r\nFROM spree_taxons st\r\nLEFT JOIN spree_taxon_translations stt ON stt.spree_taxon_id = st.id\r\nWHERE st.parent_id in (\r\n  select st.id as brand_taxon_id from spree_taxons st \r\n  join spree_taxon_translations stt on stt.spree_taxon_id = st.id and locale = 'en'\r\n  where stt.\"name\"  = 'Brands'\r\n)\r\nGROUP BY st.id) as rt\r\norder by rt.temp_taxon_id asc"
							},
							"sink": {
								"type": "AzurePostgreSQLSink",
								"writeBatchSize": 1000000,
								"writeBatchTimeout": "00:30:00",
								"writeMethod": "CopyCommand"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "id",
											"type": "Int64",
											"physicalType": "bigint"
										},
										"sink": {
											"name": "id",
											"type": "Int32",
											"physicalType": "integer"
										}
									},
									{
										"source": {
											"name": "name_en",
											"type": "String",
											"physicalType": "text"
										},
										"sink": {
											"name": "name_en",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "code",
											"type": "String",
											"physicalType": "text"
										},
										"sink": {
											"name": "code",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "created_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										},
										"sink": {
											"name": "created_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										}
									},
									{
										"source": {
											"name": "updated_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										},
										"sink": {
											"name": "updated_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										}
									},
									{
										"source": {
											"name": "name_ar",
											"type": "String",
											"physicalType": "text"
										},
										"sink": {
											"name": "name_ar",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "temp_taxon_id",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "temp_taxon_id",
											"type": "Int32",
											"physicalType": "integer"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_V1_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_V2_PRODUCT_DB_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {
									"table_name": "brand"
								}
							}
						]
					},
					{
						"name": "Lookup1",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzurePostgreSqlSource",
								"query": "alter table brand add column temp_taxon_id int;\nSELECT 'Adding Temp Texon' as UpdateTaxon;",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_V2_PRODUCT_DB_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {
									"table_name": "brand"
								}
							},
							"firstRowOnly": false
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Product DB/brand and product pipelines"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_V1_PRODUCTION')]",
				"[concat(variables('factoryId'), '/datasets/DS_V2_PRODUCT_DB_PRODUCTION')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/brand_and_product_table')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "brand_table",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "brand",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "product_table",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "brand_table",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "product",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Product DB"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/brand')]",
				"[concat(variables('factoryId'), '/pipelines/product')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/bundle_product')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "PostgreSqlV2Source",
								"query": "SELECT \n  master_product_id, \n  child_product_id, \n  quantity \nFROM \n  spree_bundle_products;"
							},
							"sink": {
								"type": "AzurePostgreSQLSink",
								"writeBatchSize": 1000000,
								"writeBatchTimeout": "00:30:00",
								"writeMethod": "CopyCommand"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "master_product_id",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "master_product_id",
											"type": "Int32",
											"physicalType": "integer"
										}
									},
									{
										"source": {
											"name": "child_product_id",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "child_product_id",
											"type": "Int32",
											"physicalType": "integer"
										}
									},
									{
										"source": {
											"name": "quantity",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "quantity",
											"type": "Int32",
											"physicalType": "integer"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_V1_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_V2_PRODUCT_DB_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {
									"table_name": "bundle_products"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Product DB"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_V1_PRODUCTION')]",
				"[concat(variables('factoryId'), '/datasets/DS_V2_PRODUCT_DB_PRODUCTION')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/cashback')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "cashback",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "PostgreSqlV2Source",
								"query": "select * from spree_cashbacks;"
							},
							"sink": {
								"type": "AzurePostgreSQLSink",
								"writeBatchSize": 1000000,
								"writeBatchTimeout": "00:30:00",
								"writeMethod": "CopyCommand"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_V1_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_V2_ORDER_DB_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {
									"table_name": "cashback"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Order DB"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_V1_PRODUCTION')]",
				"[concat(variables('factoryId'), '/datasets/DS_V2_ORDER_DB_PRODUCTION')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/category')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzurePostgreSqlSource",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzurePostgreSQLSink",
								"writeBatchSize": 1000000,
								"writeBatchTimeout": "00:30:00",
								"writeMethod": "CopyCommand"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "id",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "id",
											"type": "Int32",
											"physicalType": "integer"
										}
									},
									{
										"source": {
											"name": "name",
											"type": "String",
											"physicalType": "character varying"
										},
										"sink": {
											"name": "name",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "name_ar",
											"type": "String",
											"physicalType": "character varying"
										},
										"sink": {
											"name": "name_ar",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "image_path",
											"type": "String",
											"physicalType": "character varying"
										},
										"sink": {
											"name": "image_path",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "created_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										},
										"sink": {
											"name": "created_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										}
									},
									{
										"source": {
											"name": "updated_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										},
										"sink": {
											"name": "updated_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										}
									},
									{
										"source": {
											"name": "deleted_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										},
										"sink": {
											"name": "deleted_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										}
									},
									{
										"source": {
											"name": "is_new",
											"type": "Boolean",
											"physicalType": "boolean"
										},
										"sink": {
											"name": "is_new",
											"type": "Boolean",
											"physicalType": "boolean"
										}
									},
									{
										"source": {
											"name": "has_departments",
											"type": "Boolean",
											"physicalType": "boolean"
										},
										"sink": {
											"name": "has_departments",
											"type": "Boolean",
											"physicalType": "boolean"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_V2_PRODUCT_DB_DEV",
								"type": "DatasetReference",
								"parameters": {
									"table_name": "category"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_V2_PRODUCT_DB_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {
									"table_name": "category"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Product DB"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_V2_PRODUCT_DB_DEV')]",
				"[concat(variables('factoryId'), '/datasets/DS_V2_PRODUCT_DB_PRODUCTION')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/checkout_cards')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "checkout_cards",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "PostgreSqlV2Source",
								"query": "SELECT \n    a.id,\n    a.user_id,\n\tCOALESCE(a.name, '') AS name_on_card,\n    COALESCE(a.cc_type, '') AS scheme,\n    CASE \n        WHEN a.cc_type = 'MADA' THEN 'mada'\n        ELSE ''\n    END AS scheme_local,\n\tCOALESCE(a.gateway_payment_profile_id, '') AS instrument_id,\n\ta.last_digits,\n\ta.month,\n\ta.year,\n    a.updated_at,\n    a.created_at,\n\t'CREDIT' as card_type\nFROM   \n    spree_credit_cards a\nwhere user_id is not null\nand gateway_customer_profile_id is not null\nORDER BY \n    id ASC;"
							},
							"sink": {
								"type": "AzurePostgreSQLSink",
								"writeBatchSize": 1000000,
								"writeBatchTimeout": "00:30:00",
								"writeMethod": "CopyCommand"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_V1_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_V2_USER_DB_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {
									"table_name": "checkout_cards"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "User DB"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_V1_PRODUCTION')]",
				"[concat(variables('factoryId'), '/datasets/DS_V2_USER_DB_PRODUCTION')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/city')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "city",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Lookup1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "PostgreSqlV2Source",
								"query": "select distinct lower(sst.name) as name,\n\t\t ss.country_id,\n\t\t ss.created_at,\n\t\tss.updated_at,\n    \ttrue AS is_visible,\n    \tds.state_id\nfrom danube_supermarkets ds \njoin spree_states ss on ss.id = ds.state_id \njoin spree_state_translations sst on sst.spree_state_id = ss.id and sst.locale = 'en';"
							},
							"sink": {
								"type": "AzurePostgreSQLSink",
								"writeBatchSize": 1000000,
								"writeBatchTimeout": "00:30:00",
								"writeMethod": "CopyCommand"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "created_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										},
										"sink": {
											"name": "created_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										}
									},
									{
										"source": {
											"name": "updated_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										},
										"sink": {
											"name": "updated_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										}
									},
									{
										"source": {
											"name": "name",
											"type": "String",
											"physicalType": "text"
										},
										"sink": {
											"name": "name",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "country_id",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "country_id",
											"type": "Int32",
											"physicalType": "integer"
										}
									},
									{
										"source": {
											"name": "is_visible",
											"type": "Boolean",
											"physicalType": "boolean"
										},
										"sink": {
											"name": "is_visible",
											"type": "Boolean",
											"physicalType": "boolean"
										}
									},
									{
										"source": {
											"name": "state_id",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "state_id",
											"type": "String",
											"physicalType": "character varying"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_V1_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_V2_USER_DB_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {
									"table_name": "city"
								}
							}
						]
					},
					{
						"name": "Lookup1",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzurePostgreSqlSource",
								"query": "Alter sequence city_id_seq restart with 1;\nSelect 'Altering Sequence ID' as Update;",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_V2_USER_DB_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {
									"table_name": "city"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "User DB"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_V1_PRODUCTION')]",
				"[concat(variables('factoryId'), '/datasets/DS_V2_USER_DB_PRODUCTION')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/country')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "PostgreSqlV2Source",
								"query": "SELECT a.id,\n       a.iso3 AS iso_country_code,\n       a.name,\n       a.currency,\n       a.updated_at,\n       COALESCE(a.created_at, CURRENT_TIMESTAMP) AS created_at,\n       a.default_supermarket_id AS default_super_market_id,\n       a.currency_precision\nFROM   spree_countries a;\n"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings",
									"copyBehavior": "FlattenHierarchy"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "id",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "id",
											"type": "Int32",
											"physicalType": "INT_32"
										}
									},
									{
										"source": {
											"name": "iso_country_code",
											"type": "String",
											"physicalType": "character varying"
										},
										"sink": {
											"name": "iso_country_code",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "name",
											"type": "String",
											"physicalType": "character varying"
										},
										"sink": {
											"name": "name",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "currency",
											"type": "String",
											"physicalType": "character varying"
										},
										"sink": {
											"name": "currency",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "updated_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										},
										"sink": {
											"name": "updated_at",
											"type": "DateTime",
											"physicalType": "INT_96"
										}
									},
									{
										"source": {
											"name": "created_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										},
										"sink": {
											"name": "created_at",
											"type": "DateTime",
											"physicalType": "INT_96"
										}
									},
									{
										"source": {
											"name": "default_super_market_id",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "default_super_market_id",
											"type": "Int32",
											"physicalType": "INT_32"
										}
									},
									{
										"source": {
											"name": "currency_precision",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "currency_precision",
											"type": "Int32",
											"physicalType": "INT_32"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_V1_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_Intermiadate_Result",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Copy data1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "country",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"currency": {},
									"storeindb": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Delete1",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "Data flow1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DS_Intermiadate_Result",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": false,
								"enablePartitionDiscovery": false
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "User DB"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_V1_PRODUCTION')]",
				"[concat(variables('factoryId'), '/datasets/DS_Intermiadate_Result')]",
				"[concat(variables('factoryId'), '/dataflows/country')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/cuisine')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "PostgreSqlV2Source",
								"query": "SELECT \n  id, \n  name_en, \n  name_ar, \n  created_at, \n  updated_at, \n  sort_order as position \nFROM \n  spree_kitchen_cuisines\nOrder by id ASC;"
							},
							"sink": {
								"type": "AzurePostgreSQLSink",
								"writeBatchSize": 1000000,
								"writeBatchTimeout": "00:30:00",
								"writeMethod": "CopyCommand"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "id",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "id",
											"type": "Int32",
											"physicalType": "integer"
										}
									},
									{
										"source": {
											"name": "name_en",
											"type": "String",
											"physicalType": "character varying"
										},
										"sink": {
											"name": "name_en",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "name_ar",
											"type": "String",
											"physicalType": "character varying"
										},
										"sink": {
											"name": "name_ar",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "position",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "position",
											"type": "Int32",
											"physicalType": "integer"
										}
									},
									{
										"source": {
											"name": "created_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										},
										"sink": {
											"name": "created_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										}
									},
									{
										"source": {
											"name": "updated_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										},
										"sink": {
											"name": "updated_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_V1_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_V2_PRODUCT_DB_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {
									"table_name": "cuisine"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Product DB"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_V1_PRODUCTION')]",
				"[concat(variables('factoryId'), '/datasets/DS_V2_PRODUCT_DB_PRODUCTION')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/currency')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzurePostgreSqlSource",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzurePostgreSQLSink",
								"writeBatchSize": 1000000,
								"writeBatchTimeout": "00:30:00",
								"writeMethod": "CopyCommand"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_V2_USER_DB_DEV",
								"type": "DatasetReference",
								"parameters": {
									"table_name": "currency"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_V2_USER_DB_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {
									"table_name": "currency"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "User DB"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_V2_USER_DB_DEV')]",
				"[concat(variables('factoryId'), '/datasets/DS_V2_USER_DB_PRODUCTION')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/delivery_capacity')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "copydataintodb",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "PostgreSqlV2Source",
								"query": "select \n\tdtss.id, \n\tcast(dts.start_time as text) as start_time, \n\tcast(dts.end_time as text) as end_time,\n\tCASE\n\t\tWHEN dtss.day_of_week = 0 THEN 'sunday'\n\t\tWHEN dtss.day_of_week = 1 THEN 'monday'\n\t\tWHEN dtss.day_of_week = 2 THEN 'tuesday'\n\t\tWHEN dtss.day_of_week = 3 THEN 'wednesday'\n\t\tWHEN dtss.day_of_week = 4 THEN 'thursday'\n\t\tWHEN dtss.day_of_week = 5 THEN 'friday'\n\t\tWHEN dtss.day_of_week = 6 THEN 'saturday'\n\tElse 'sunday'\n\tEND AS day_of_week,\n\tdtss.spree_shipping_method_id as delivery_option_id,\n\tcoalesce(ds.id,0) as supermarket_id, \n\tcoalesce(dtss.delivery_capacity,0) as capacity, \n\tnull as time_slot_id, \n\tdtss.enabled as is_enabled,\n\tdtss.created_at,\n\tdtss.updated_at\nfrom danube_time_slots_schedules dtss\nleft join danube_time_slots dts on dts.id  = dtss.time_slot_id \nleft join danube_supermarkets ds on ds.zone_id = dtss.zone_id\norder by dts.id;"
							},
							"sink": {
								"type": "AzurePostgreSQLSink",
								"writeBatchSize": 1000000,
								"writeBatchTimeout": "00:30:00",
								"preCopyScript": {
									"value": "alter table delivery_capacity add column start_time varchar(100);\nalter table delivery_capacity add column end_time varchar(100);\nalter table delivery_capacity add column delivery_option_id int;\nalter table delivery_capacity add column day_of_week varchar(100);\nALTER TABLE delivery_capacity  ALTER COLUMN time_slot_id DROP NOT NULL;\n\n",
									"type": "Expression"
								},
								"writeMethod": "CopyCommand"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "id",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "id",
											"type": "Int32",
											"physicalType": "integer"
										}
									},
									{
										"source": {
											"name": "supermarket_id",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "supermarket_id",
											"type": "Int32",
											"physicalType": "integer"
										}
									},
									{
										"source": {
											"name": "time_slot_id",
											"type": "String",
											"physicalType": "text"
										},
										"sink": {
											"name": "time_slot_id",
											"type": "Int32",
											"physicalType": "integer"
										}
									},
									{
										"source": {
											"name": "capacity",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "capacity",
											"type": "Int32",
											"physicalType": "integer"
										}
									},
									{
										"source": {
											"name": "is_enabled",
											"type": "Boolean",
											"physicalType": "boolean"
										},
										"sink": {
											"name": "is_enabled",
											"type": "Boolean",
											"physicalType": "boolean"
										}
									},
									{
										"source": {
											"name": "created_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										},
										"sink": {
											"name": "created_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										}
									},
									{
										"source": {
											"name": "updated_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										},
										"sink": {
											"name": "updated_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										}
									},
									{
										"source": {
											"name": "start_time",
											"type": "String",
											"physicalType": "text"
										},
										"sink": {
											"name": "start_time",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "end_time",
											"type": "String",
											"physicalType": "text"
										},
										"sink": {
											"name": "end_time",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "delivery_option_id",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "delivery_option_id",
											"type": "Int32",
											"physicalType": "integer"
										}
									},
									{
										"source": {
											"name": "day_of_week",
											"type": "String",
											"physicalType": "text"
										},
										"sink": {
											"name": "day_of_week",
											"type": "String",
											"physicalType": "character varying"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_V1_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_V2_USER_DB_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {
									"table_name": "delivery_capacity"
								}
							}
						]
					},
					{
						"name": "updatetimeslotid",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "copydataintodb",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzurePostgreSqlSource",
								"query": {
									"value": "UPDATE delivery_capacity dc\nSET time_slot_id = ts.id\nFROM time_slot ts\nWHERE dc.start_time = ts.start_time\n  AND dc.end_time = ts.end_time\n  AND dc.day_of_week = ts.day_of_week\n  AND dc.delivery_option_id = ts.delivery_option_id;\nSELECT 'Time Slots are Updated' as Time_Slot_status",
									"type": "Expression"
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_V2_USER_DB_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {
									"table_name": "delivery_capacity"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Wait1",
						"type": "Wait",
						"dependsOn": [
							{
								"activity": "updatetimeslotid",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 11
						}
					},
					{
						"name": "removeadditionalcolumnsadded",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Wait1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzurePostgreSqlSource",
								"query": "alter table delivery_capacity drop column start_time;\r\nalter table delivery_capacity drop column end_time;\r\nalter table delivery_capacity drop column delivery_option_id;\r\nalter table delivery_capacity drop column day_of_week;\r\nALTER TABLE delivery_capacity ALTER COLUMN time_slot_id SET NOT NULL;\r\nSELECT 'Dropped Additional Columns' as Columns;\r\n",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_V2_USER_DB_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {
									"table_name": "delivery_capacity"
								}
							},
							"firstRowOnly": false
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "User DB"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_V1_PRODUCTION')]",
				"[concat(variables('factoryId'), '/datasets/DS_V2_USER_DB_PRODUCTION')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/delivery_option')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "delivery_option",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "PostgreSqlV2Source",
								"query": "SELECT ssm.id,\n       ssmt.name,\n       ssm.created_at,\n       ssm.updated_at,\n       ssm.deleted_at\nFROM   spree_shipping_methods ssm\nleft join spree_shipping_method_translations ssmt\non ssm.id = ssmt.spree_shipping_method_id\nand locale = 'en';"
							},
							"sink": {
								"type": "AzurePostgreSQLSink",
								"writeBatchSize": 1000000,
								"writeBatchTimeout": "00:30:00",
								"writeMethod": "CopyCommand"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_V1_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_V2_USER_DB_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {
									"table_name": "delivery_option"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "User DB"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_V1_PRODUCTION')]",
				"[concat(variables('factoryId'), '/datasets/DS_V2_USER_DB_PRODUCTION')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/delivery_type')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "delivery_type",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzurePostgreSqlSource",
								"query": "INSERT INTO PUBLIC.delivery_type\r\n            (id,\r\n             NAME,\r\n             created_at)\r\nVALUES      ( 1,\r\n              'Regular',\r\n              '2023-02-24 07:20:04.500904' ),\r\n            ( 2,\r\n              'Express',\r\n              '2023-02-24 07:20:04.500904' ); \r\nSELECT 'AYM' as AYMInsertActivity",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_V2_USER_DB_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {
									"table_name": "delivery_type"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "User DB"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_V2_USER_DB_PRODUCTION')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/device_token')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "PostgreSqlV2Source",
								"query": "with cte as(\nselect \n  distinct user_id,\n  uuid as device_id,\n  platform as device_type,\n  created_at,\n  updated_at,\n  push_notification_token as token,\n  'customer' as user_type,\n  row_number() over (partition by user_id order by user_id) as rn\nfrom spree_user_clients\norder by user_id, uuid)\n\nselect user_id, device_id, device_type, created_at, updated_at, token, user_type\nfrom cte \nwhere rn = 1;"
							},
							"sink": {
								"type": "AzurePostgreSQLSink",
								"writeBatchSize": 1000000,
								"writeBatchTimeout": "00:30:00",
								"writeMethod": "CopyCommand"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_V1_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_V2_AUTH_DB_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {
									"table_name": "device_token"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Auth DB"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_V1_PRODUCTION')]",
				"[concat(variables('factoryId'), '/datasets/DS_V2_AUTH_DB_PRODUCTION')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/employee')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "PostgreSqlV2Source",
								"query": "SELECT u.id,\nsru.role_id,\nu.email,\nu.created_at,\nu.updated_at,\nCASE\n    WHEN u.deleted_at IS NOT NULL THEN TRUE\n    ELSE FALSE\n  END AS is_deleted,\n  LEFT(COALESCE(u.first_name, ''), 40) AS first_name,\n  LEFT(COALESCE(u.last_name, ''), 40) AS last_name,\n  LEFT(COALESCE(CASE\n    WHEN u.mobile_phone_number LIKE CONCAT(\n      '+', u.mobile_number_country_code,\n      '%'\n      ) THEN SUBSTRING(\n      u.mobile_phone_number,\n      CHAR_LENGTH(u.mobile_number_country_code) + 2\n      )\n    WHEN u.mobile_phone_number LIKE CONCAT(u.mobile_number_country_code, '%') THEN SUBSTRING(\n      u.mobile_phone_number,\n      CHAR_LENGTH(u.mobile_number_country_code) + 1\n      )\n    ELSE COALESCE(u.mobile_phone_number, '')\n  END, ''), 16) AS mobile_number,\n  u.dob,\n  COALESCE(\n  CONCAT('+', u.mobile_number_country_code),\n  ''\n  ) AS country_code,\n  CASE WHEN sa.country_id='0' THEN '1'\n    ELSE sa.country_id\n  END AS country_id,\n\t'others' as gender,\n\t'admin' as user_type,\n\t'available' as availability,\n  sr.name as role_name,\n\tCASE\n    WHEN u.deleted_at IS NOT NULL THEN FALSE\n    ELSE TRUE\n  END AS active,\n\tCASE\n    WHEN u.deleted_at IS NOT NULL THEN FALSE\n    ELSE TRUE\n  END AS status,\n  sa.city\nfrom spree_users u\ninner join spree_roles_users sru on sru.user_id = u.id\ninner join spree_roles sr on sr.id = sru.role_id and sr.name <> 'user'\nleft join spree_user_addresses sua on sua.user_id = u.id and sua.default=TRUE\nleft join spree_addresses sa on sua.address_id = sa.id\norder by u.id asc;"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings",
									"copyBehavior": "FlattenHierarchy"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_V1_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_Intermiadate_Result",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Copy data1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "employee",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"employee": {},
									"city": {},
									"StoreInDB": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Delete1",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "Data flow1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DS_Intermiadate_Result",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": false,
								"enablePartitionDiscovery": false
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "User DB"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_V1_PRODUCTION')]",
				"[concat(variables('factoryId'), '/datasets/DS_Intermiadate_Result')]",
				"[concat(variables('factoryId'), '/dataflows/employee')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/feedback')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "PostgreSqlV2Source",
								"query": "select \nsfdrw.id,\nsur.first_name,\nsur.last_name,\nsur.email,\nsur.mobile_number_country_code as country_code,\nsur.mobile_phone_number as mobile_number,\nsfdrw.comment as message,\nsfdrw.created_at,\nsfdrw.updated_at,\nsfdrw.user_id\nfrom spree_feedback_reviews sfdrw\nLeft join spree_users sur on sur.id = sfdrw.user_id;"
							},
							"sink": {
								"type": "AzurePostgreSQLSink",
								"writeBatchSize": 1000000,
								"writeBatchTimeout": "00:30:00",
								"writeMethod": "CopyCommand"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_V1_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_V2_USER_DB_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {
									"table_name": "feedback"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "User DB"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_V1_PRODUCTION')]",
				"[concat(variables('factoryId'), '/datasets/DS_V2_USER_DB_PRODUCTION')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ingredient')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "PostgreSqlV2Source",
								"query": "select \n  id, \n  name_en, \n  name_ar, \n  taxon_id, \n  kitchen_recipe_id as recipe_id, \n  quantity, \n  COALESCE(Cast(measurement AS CHARACTER varying),'') AS measurement,\n  created_at, \n  updated_at \nfrom \n  spree_kitchen_ingredients\norder by id ASC;"
							},
							"sink": {
								"type": "AzurePostgreSQLSink",
								"writeBatchSize": 1000000,
								"writeBatchTimeout": "00:30:00",
								"writeMethod": "CopyCommand"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "id",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "id",
											"type": "Int32",
											"physicalType": "integer"
										}
									},
									{
										"source": {
											"name": "name_en",
											"type": "String",
											"physicalType": "character varying"
										},
										"sink": {
											"name": "name_en",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "name_ar",
											"type": "String",
											"physicalType": "character varying"
										},
										"sink": {
											"name": "name_ar",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "recipe_id",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "recipe_id",
											"type": "Int32",
											"physicalType": "integer"
										}
									},
									{
										"source": {
											"name": "taxon_id",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "taxon_id",
											"type": "Int32",
											"physicalType": "integer"
										}
									},
									{
										"source": {
											"name": "quantity",
											"type": "String",
											"physicalType": "character varying"
										},
										"sink": {
											"name": "quantity",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "measurement",
											"type": "String",
											"physicalType": "character varying"
										},
										"sink": {
											"name": "measurement",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "created_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										},
										"sink": {
											"name": "created_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										}
									},
									{
										"source": {
											"name": "updated_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										},
										"sink": {
											"name": "updated_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_V1_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_V2_PRODUCT_DB_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {
									"table_name": "ingredient"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Product DB"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_V1_PRODUCTION')]",
				"[concat(variables('factoryId'), '/datasets/DS_V2_PRODUCT_DB_PRODUCTION')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ingredient_product')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "PostgreSqlV2Source",
								"query": "select \n  -- id,\n  Cast(kitchen_ingredient_id AS integer) AS ingredient_id,\n  Cast(recommended_product_id AS integer) AS product_id\nfrom spree_ingredient_products\n-- order by id asc;"
							},
							"sink": {
								"type": "AzurePostgreSQLSink",
								"writeBatchSize": 1000000,
								"writeBatchTimeout": "00:30:00",
								"writeMethod": "CopyCommand"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "ingredient_id",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "ingredient_id",
											"type": "Int32",
											"physicalType": "integer"
										}
									},
									{
										"source": {
											"name": "product_id",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "product_id",
											"type": "Int32",
											"physicalType": "integer"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_V1_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_V2_PRODUCT_DB_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {
									"table_name": "ingredient_product"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Product DB"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_V1_PRODUCTION')]",
				"[concat(variables('factoryId'), '/datasets/DS_V2_PRODUCT_DB_PRODUCTION')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/inventory_modifiers')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "PostgreSqlV2Source",
								"query": "SELECT id,\n       product_id,\n       Cast(action_price as double precision),\n       action_in_stock AS track_stock,\n       COALESCE(rule_supermarket_id, -1) AS supermarket_id,\n       created_at,\n       updated_at,\n\t   Cast(action_sale_price as double precision) AS sale_price,\n       Date(action_sale_start) AS sale_start_date,\n       Substring(To_char(action_sale_start, 'HH24:MI:SS'), 1, 8) AS sale_start_time,\n       Date(action_sale_end) AS sale_end_date,\n       Substring(To_char(action_sale_end, 'HH24:MI:SS'), 1, 8)   AS sale_end_time,\n       Date(availability_start_time) AS availability_start_date,\n       -- availability_start_time (timestamp without time zone so we need to extract using string manipulation) \n       Date(availability_end_time) AS availability_end_date,\n       stock_quantity,\n       action_sale_price AS cost_price\nFROM   spree_product_inventory_modifiers\norder by id ASC;"
							},
							"sink": {
								"type": "AzurePostgreSQLSink",
								"writeBatchSize": 1000000,
								"writeBatchTimeout": "00:30:00",
								"writeMethod": "CopyCommand"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "id",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "id",
											"type": "Int32",
											"physicalType": "integer"
										}
									},
									{
										"source": {
											"name": "product_id",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "product_id",
											"type": "Int32",
											"physicalType": "integer"
										}
									},
									{
										"source": {
											"name": "supermarket_id",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "supermarket_id",
											"type": "Int32",
											"physicalType": "integer"
										}
									},
									{
										"source": {
											"name": "action_price",
											"type": "Double",
											"physicalType": "double precision"
										},
										"sink": {
											"name": "action_price",
											"type": "Double",
											"physicalType": "double precision"
										}
									},
									{
										"source": {
											"name": "sale_price",
											"type": "Double",
											"physicalType": "double precision"
										},
										"sink": {
											"name": "sale_price",
											"type": "Double",
											"physicalType": "double precision"
										}
									},
									{
										"source": {
											"name": "sale_start_date",
											"type": "DateTime",
											"physicalType": "date"
										},
										"sink": {
											"name": "sale_start_date",
											"type": "DateTime",
											"physicalType": "date"
										}
									},
									{
										"source": {
											"name": "sale_end_date",
											"type": "DateTime",
											"physicalType": "date"
										},
										"sink": {
											"name": "sale_end_date",
											"type": "DateTime",
											"physicalType": "date"
										}
									},
									{
										"source": {
											"name": "sale_start_time",
											"type": "String",
											"physicalType": "text"
										},
										"sink": {
											"name": "sale_start_time",
											"type": "TimeSpan",
											"physicalType": "time without time zone"
										}
									},
									{
										"source": {
											"name": "sale_end_time",
											"type": "String",
											"physicalType": "text"
										},
										"sink": {
											"name": "sale_end_time",
											"type": "TimeSpan",
											"physicalType": "time without time zone"
										}
									},
									{
										"source": {
											"name": "availability_start_date",
											"type": "DateTime",
											"physicalType": "date"
										},
										"sink": {
											"name": "availability_start_date",
											"type": "DateTime",
											"physicalType": "date"
										}
									},
									{
										"source": {
											"name": "availability_end_date",
											"type": "DateTime",
											"physicalType": "date"
										},
										"sink": {
											"name": "availability_end_date",
											"type": "DateTime",
											"physicalType": "date"
										}
									},
									{
										"source": {
											"name": "track_stock",
											"type": "Boolean",
											"physicalType": "boolean"
										},
										"sink": {
											"name": "track_stock",
											"type": "Boolean",
											"physicalType": "boolean"
										}
									},
									{
										"source": {
											"name": "stock_quantity",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "stock_quantity",
											"type": "Int32",
											"physicalType": "integer"
										}
									},
									{
										"source": {
											"name": "created_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										},
										"sink": {
											"name": "created_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										}
									},
									{
										"source": {
											"name": "updated_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										},
										"sink": {
											"name": "updated_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_V1_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_V2_PRODUCT_DB_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {
									"table_name": "inventory_modifiers"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Product DB"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_V1_PRODUCTION')]",
				"[concat(variables('factoryId'), '/datasets/DS_V2_PRODUCT_DB_PRODUCTION')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/language')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "language",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzurePostgreSqlSource",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzurePostgreSQLSink",
								"writeBatchSize": 1000000,
								"writeBatchTimeout": "00:30:00",
								"writeMethod": "CopyCommand"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_V2_USER_DB_DEV",
								"type": "DatasetReference",
								"parameters": {
									"table_name": "language"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_V2_USER_DB_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {
									"table_name": "language"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "User DB"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_V2_USER_DB_DEV')]",
				"[concat(variables('factoryId'), '/datasets/DS_V2_USER_DB_PRODUCTION')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/loyalty_member')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "PostgreSqlV2Source",
								"query": "Select\n  id,\n  user_id,\n  tenant_id,\n  loyalty_member_id,\n  loyalty_id,\n  created_at,\n  updated_at\nfrom spree_loyalty_members;"
							},
							"sink": {
								"type": "AzurePostgreSQLSink",
								"writeBatchSize": 1000000,
								"writeBatchTimeout": "00:30:00",
								"writeMethod": "CopyCommand"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_V1_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_V2_USER_DB_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {
									"table_name": "loyalty_member"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "User DB"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_V1_PRODUCTION')]",
				"[concat(variables('factoryId'), '/datasets/DS_V2_USER_DB_PRODUCTION')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/nutritional_facts')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "PostgreSqlV2Source",
								"query": "WITH json_to_extract AS\n(\n       SELECT id,\n              quantity_en AS quantity,\n              product_id,\n              created_at,\n              updated_at,\n              quantity_ar,\n              nutrients :: jsonb AS json_data\n       FROM   spree_nutritional_facts )\nSELECT    id,\n          quantity,\n          quantity_ar,\n          product_id,\n          calories,\n          total_fat,\n          saturated_fat,\n          trans_fat,\n          cholesterol,\n          total_carbohydrates,\n          sugar,\n          dietary_fiber,\n          protein,\n          salt,\n          sodium,\n          iron,\n          calcium,\n          vitamin_a,\n          vitamin_c,\n          vitamin_d,\n          ph,\n          created_at,\n          updated_at\nFROM      json_to_extract\nLEFT JOIN lateral\n          (\n                 Select ( Regexp_matches( json_data :: text, 'calories:\\s*([\\d.]+)(?:\\s*(kcal|g|mg))?' ) ) [1]            AS calories,\n                        ( regexp_matches( json_data :: text, 'total_fat:\\s*([\\d.]+)(?:\\s*(kcal|g|mg))?' ) ) [1]           AS total_fat,\n                        ( regexp_matches( json_data :: text, 'saturated_fat:\\s*([\\d.]+)(?:\\s*(kcal|g|mg))?' ) ) [1]       AS saturated_fat,\n                        ( regexp_matches( json_data :: text, 'trans_fat:\\s*([\\d.]+)(?:\\s*(kcal|g|mg))?' ) ) [1]           AS trans_fat,\n                        ( regexp_matches( json_data :: text, 'cholesterol:\\s*([\\d.]+)(?:\\s*(kcal|g|mg))?' ) ) [1]         AS cholesterol,\n                        ( regexp_matches( json_data :: text, 'total_carbohydrates:\\s*([\\d.]+)(?:\\s*(kcal|g|mg))?' ) ) [1] AS total_carbohydrates,\n                        ( regexp_matches( json_data :: text, 'sugar:\\s*([\\d.]+)(?:\\s*(kcal|g|mg))?' ) ) [1]               AS sugar,\n                        ( regexp_matches( json_data :: text, 'fiber:\\s*([\\d.]+)(?:\\s*(kcal|g|mg))?' ) ) [1]               AS dietary_fiber,\n                        ( regexp_matches( json_data :: text, 'protein:\\s*([\\d.]+)(?:\\s*(kcal|g|mg))?' ) ) [1]             AS protein,\n                        ( regexp_matches( json_data :: text, 'salt:\\s*([\\d.]+)(?:\\s*(kcal|g|mg))?' ) ) [1]                AS salt,\n                        ( regexp_matches( json_data :: text, 'sodium:\\s*([\\d.]+)(?:\\s*(kcal|g|mg))?' ) ) [1]              AS sodium,\n                        ( regexp_matches( json_data :: text, 'iron:\\s*([\\d.]+)(?:\\s*(kcal|g|mg))?' ) ) [1]                AS iron,\n                        ( regexp_matches( json_data :: text, 'calcium:\\s*([\\d.]+)(?:\\s*(kcal|g|mg))?' ) ) [1]             AS calcium,\n                        ( regexp_matches( json_data :: text, 'vitamin_a:\\s*([\\d.]+)(?:\\s*(kcal|g|mg))?' ) ) [1]           AS vitamin_a,\n                        ( regexp_matches( json_data :: text, 'vitamin_c:\\s*([\\d.]+)(?:\\s*(kcal|g|mg))?' ) ) [1]           AS vitamin_c,\n                        ( regexp_matches( json_data :: text, 'vitamin_d:\\s*([\\d.]+)(?:\\s*(kcal|g|mg))?' ) ) [1]           AS vitamin_d,\n                        ( regexp_matches( json_data :: text, 'ph:\\s*([\\d.]+)(?:\\s*(kcal|g|mg))?' ) ) [1]                  AS ph ) AS nutrient_values\nON        true\nORDER BY  id ASC;"
							},
							"sink": {
								"type": "AzurePostgreSQLSink",
								"writeBatchSize": 1000000,
								"writeBatchTimeout": "00:30:00",
								"writeMethod": "CopyCommand"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "id",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "id",
											"type": "Int32",
											"physicalType": "integer"
										}
									},
									{
										"source": {
											"name": "product_id",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "product_id",
											"type": "Int32",
											"physicalType": "integer"
										}
									},
									{
										"source": {
											"name": "quantity",
											"type": "String",
											"physicalType": "character varying"
										},
										"sink": {
											"name": "quantity",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "quantity_ar",
											"type": "String",
											"physicalType": "character varying"
										},
										"sink": {
											"name": "quantity_ar",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "created_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										},
										"sink": {
											"name": "created_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										}
									},
									{
										"source": {
											"name": "updated_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										},
										"sink": {
											"name": "updated_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										}
									},
									{
										"source": {
											"name": "calories",
											"type": "String",
											"physicalType": "text"
										},
										"sink": {
											"name": "calories",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "total_fat",
											"type": "String",
											"physicalType": "text"
										},
										"sink": {
											"name": "total_fat",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "saturated_fat",
											"type": "String",
											"physicalType": "text"
										},
										"sink": {
											"name": "saturated_fat",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "trans_fat",
											"type": "String",
											"physicalType": "text"
										},
										"sink": {
											"name": "trans_fat",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "cholesterol",
											"type": "String",
											"physicalType": "text"
										},
										"sink": {
											"name": "cholesterol",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "total_carbohydrates",
											"type": "String",
											"physicalType": "text"
										},
										"sink": {
											"name": "total_carbohydrates",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "sugar",
											"type": "String",
											"physicalType": "text"
										},
										"sink": {
											"name": "sugar",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "dietary_fiber",
											"type": "String",
											"physicalType": "text"
										},
										"sink": {
											"name": "dietary_fiber",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "protein",
											"type": "String",
											"physicalType": "text"
										},
										"sink": {
											"name": "protein",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "salt",
											"type": "String",
											"physicalType": "text"
										},
										"sink": {
											"name": "salt",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "sodium",
											"type": "String",
											"physicalType": "text"
										},
										"sink": {
											"name": "sodium",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "iron",
											"type": "String",
											"physicalType": "text"
										},
										"sink": {
											"name": "iron",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "calcium",
											"type": "String",
											"physicalType": "text"
										},
										"sink": {
											"name": "calcium",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "vitamin_a",
											"type": "String",
											"physicalType": "text"
										},
										"sink": {
											"name": "vitamin_a",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "vitamin_c",
											"type": "String",
											"physicalType": "text"
										},
										"sink": {
											"name": "vitamin_c",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "vitamin_d",
											"type": "String",
											"physicalType": "text"
										},
										"sink": {
											"name": "vitamin_d",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "ph",
											"type": "String",
											"physicalType": "text"
										},
										"sink": {
											"name": "ph",
											"type": "String",
											"physicalType": "character varying"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_V1_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_V2_PRODUCT_DB_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {
									"table_name": "nutritional_facts"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Product DB"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_V1_PRODUCTION')]",
				"[concat(variables('factoryId'), '/datasets/DS_V2_PRODUCT_DB_PRODUCTION')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/offline_product')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "PostgreSqlV2Source",
								"query": "SELECT id,\n\tCOALESCE(sku, '') AS sku,\n       COALESCE(Cast(price AS DOUBLE PRECISION),0) as price,\n       created_at,\n       updated_at,\n\tCOALESCE(name_en, '') AS name,\n       1 AS country_id,\n       1 AS order\nFROM   spree_custom_products;"
							},
							"sink": {
								"type": "AzurePostgreSQLSink",
								"writeBatchSize": 1000000,
								"writeBatchTimeout": "00:30:00",
								"writeMethod": "CopyCommand"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "id",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "id",
											"type": "Int32",
											"physicalType": "integer"
										}
									},
									{
										"source": {
											"name": "name",
											"type": "String",
											"physicalType": "character varying"
										},
										"sink": {
											"name": "name",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "sku",
											"type": "String",
											"physicalType": "character varying"
										},
										"sink": {
											"name": "sku",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "price",
											"type": "Double",
											"physicalType": "double precision"
										},
										"sink": {
											"name": "price",
											"type": "Double",
											"physicalType": "double precision"
										}
									},
									{
										"source": {
											"name": "country_id",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "country_id",
											"type": "Int32",
											"physicalType": "integer"
										}
									},
									{
										"source": {
											"name": "created_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										},
										"sink": {
											"name": "created_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										}
									},
									{
										"source": {
											"name": "updated_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										},
										"sink": {
											"name": "updated_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_V1_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_V2_PRODUCT_DB_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {
									"table_name": "offline_product"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Product DB"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_V1_PRODUCTION')]",
				"[concat(variables('factoryId'), '/datasets/DS_V2_PRODUCT_DB_PRODUCTION')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/offline_product_barcode')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "PostgreSqlV2Source",
								"query": "SELECT \r\n    id AS offline_product_id,\r\n    CASE \r\n        WHEN (barcode_element ~ E'^\\\\d+$') THEN CAST(barcode_element AS BIGINT)\r\n        ELSE -1\r\n    END AS barcode,\r\n    1 AS \"order\"\r\nFROM   \r\n    spree_custom_products\r\nCROSS JOIN LATERAL unnest(barcodes) AS barcode_element\r\nORDER BY \r\n    id DESC;"
							},
							"sink": {
								"type": "AzurePostgreSQLSink",
								"writeBatchSize": 1000000,
								"writeBatchTimeout": "00:30:00",
								"writeMethod": "CopyCommand"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "barcode",
											"type": "Int64",
											"physicalType": "bigint"
										},
										"sink": {
											"name": "barcode",
											"type": "Int64",
											"physicalType": "bigint"
										}
									},
									{
										"source": {
											"name": "offline_product_id",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "offline_product_id",
											"type": "Int32",
											"physicalType": "integer"
										}
									},
									{
										"source": {
											"name": "order",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "order",
											"type": "Int32",
											"physicalType": "integer"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_V1_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_V2_PRODUCT_DB_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {
									"table_name": "offline_product_barcode"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Product DB"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_V1_PRODUCTION')]",
				"[concat(variables('factoryId'), '/datasets/DS_V2_PRODUCT_DB_PRODUCTION')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/option_type')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "PostgreSqlV2Source",
								"query": "select sot.id, \n\tsott1.name as name_en,\n\tcoalesce(sott2.name,'') as name_ar,\n\tcoalesce(sott1.presentation,'') as presentation_en,\n\tcoalesce(sott2.presentation,'') as presentation_ar,\n    sot.created_at,\n    sot.updated_at\n\t\nfrom spree_option_types sot\nleft join spree_option_type_translations sott1 on sot.id = sott1.spree_option_type_id\nand sott1.locale='en'\nleft join spree_option_type_translations sott2 on sot.id = sott2.spree_option_type_id\nand sott2.locale='ar';"
							},
							"sink": {
								"type": "AzurePostgreSQLSink",
								"writeBatchSize": 1000000,
								"writeBatchTimeout": "00:30:00",
								"writeMethod": "CopyCommand"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "id",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "id",
											"type": "Int32",
											"physicalType": "integer"
										}
									},
									{
										"source": {
											"name": "name_en",
											"type": "String",
											"physicalType": "character varying"
										},
										"sink": {
											"name": "name_en",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "name_ar",
											"type": "String",
											"physicalType": "character varying"
										},
										"sink": {
											"name": "name_ar",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "presentation_en",
											"type": "String",
											"physicalType": "character varying"
										},
										"sink": {
											"name": "presentation_en",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "presentation_ar",
											"type": "String",
											"physicalType": "character varying"
										},
										"sink": {
											"name": "presentation_ar",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "created_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										},
										"sink": {
											"name": "created_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										}
									},
									{
										"source": {
											"name": "updated_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										},
										"sink": {
											"name": "updated_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_V1_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_V2_PRODUCT_DB_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {
									"table_name": "option_type"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Product DB"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_V1_PRODUCTION')]",
				"[concat(variables('factoryId'), '/datasets/DS_V2_PRODUCT_DB_PRODUCTION')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/option_value')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "PostgreSqlV2Source",
								"query": "SELECT sov.id,\n       coalesce(sovt1.name,'') as name,\n       position,\n\t   coalesce(sovt1.presentation,'') as presentation_en,\n       coalesce(sovt2.presentation,'') AS presentation_ar,\n       sov.option_type_id,\n       sov.created_at,\n       sov.updated_at\nFROM   spree_option_values sov\nleft join spree_option_value_translations sovt1\non sov.id = sovt1.spree_option_value_id and sovt1.locale='en'\nleft join spree_option_value_translations sovt2\non sov.id = sovt2.spree_option_value_id and sovt2.locale='ar';"
							},
							"sink": {
								"type": "AzurePostgreSQLSink",
								"writeBatchSize": 1000000,
								"writeBatchTimeout": "00:30:00",
								"writeMethod": "CopyCommand"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "id",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "id",
											"type": "Int32",
											"physicalType": "integer"
										}
									},
									{
										"source": {
											"name": "option_type_id",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "option_type_id",
											"type": "Int32",
											"physicalType": "integer"
										}
									},
									{
										"source": {
											"name": "name",
											"type": "String",
											"physicalType": "character varying"
										},
										"sink": {
											"name": "name",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "presentation_en",
											"type": "String",
											"physicalType": "character varying"
										},
										"sink": {
											"name": "presentation_en",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "presentation_ar",
											"type": "String",
											"physicalType": "character varying"
										},
										"sink": {
											"name": "presentation_ar",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "position",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "position",
											"type": "Int32",
											"physicalType": "integer"
										}
									},
									{
										"source": {
											"name": "created_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										},
										"sink": {
											"name": "created_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										}
									},
									{
										"source": {
											"name": "updated_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										},
										"sink": {
											"name": "updated_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_V1_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_V2_PRODUCT_DB_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {
									"table_name": "option_value"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Product DB"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_V1_PRODUCTION')]",
				"[concat(variables('factoryId'), '/datasets/DS_V2_PRODUCT_DB_PRODUCTION')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/order')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "order db",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "1.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "PostgreSqlV2Source",
								"query": "SELECT distinct\n    so.id,\n    so.item_total,\n    so.total,\n    CASE\n        WHEN so.state='delivery' THEN 'delivered'\n        WHEN so.state='picking_and_staging_in_progress' THEN 'pending'\n        WHEN so.state='payment' THEN 'pending'\n        WHEN so.state='complete' THEN 'completed'\n        WHEN so.state='confirm' THEN 'pending'\n--         WHEN so.state='cart' THEN 'pending'\n        WHEN so.state='canceled' THEN 'customer_cancelled'\n    END AS status,\n    so.user_id,\n    so.completed_at,\n    so.bill_address_id,\n    so.ship_address_id,\n    so.payment_total,\n    so.created_at,\n    so.updated_at,\n    so.currency,\n    so.item_count,\n\tso.canceled_at as cancelled_at,\n    so.canceler_id as cancelled_by,\n\tCASE WHEN so.delivery_method='home_delivery' THEN 1\n\tWHEN so.delivery_method='store_pick_up' THEN 2\n\tELSE NULL END as delivery_option_id,\n\tc.cancel_reason,\n\te.city,\n    1 as language_id,\n\tCOALESCE(e.country_id,'1') as country_id,\n\tsp_max.payment_method_id as payment_option_id\n\t\nfrom spree_orders so\nLEFT JOIN spree_fulfilments c ON c.order_id = so.id\nLEFT JOIN spree_user_addresses d ON d.user_id = so.user_id AND d.default = 'true'\nLEFT JOIN spree_addresses e ON e.id = d.address_id\nLEFT JOIN LATERAL (\n    SELECT *\n    FROM spree_payments sp\n    LEFT JOIN spree_payment_methods spm ON spm.id = sp.payment_method_id\n    WHERE sp.order_id = so.id\n\t AND (\n\t\t (SELECT COUNT(*) FROM spree_payments WHERE order_id = so.id) <= 1 OR\n\t\tspm.type NOT IN ('Spree::Gateway::LoyaltyPoint', 'Spree::PaymentMethod::StoreCredit')\n\t )\n    ORDER BY sp.created_at DESC \n    LIMIT 1\n) sp_max ON true\nwhere so.state != 'cart'"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings",
									"copyBehavior": "FlattenHierarchy"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_V1_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_Intermiadate_Result",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "order db",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "order",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"city": {},
									"ordercancellationreason": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Delete1",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "Data flow1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DS_Intermiadate_Result",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Order DB"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_V1_PRODUCTION')]",
				"[concat(variables('factoryId'), '/datasets/DS_Intermiadate_Result')]",
				"[concat(variables('factoryId'), '/dataflows/order')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/order_address')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Lookup1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "PostgreSqlV2Source",
								"query": "select \n\tso.id as order_id,\n\tso.bill_address_id as address_id,\n\t'true' as is_bill_address,\n \tCOALESCE(sa.city,'') as city,\n \tCOALESCE(con.name,'') as country,\n    sdtrans.name as district, \n\t'other' as type,\n\tCONCAT(sa.address1, ' ', sa.address2) AS formatted_address,\n \tCOALESCE(sa.latitude,'0.0') as latitude,\n \tCOALESCE(sa.longitude,'0.0') as longitude,\n\tCASE \n        WHEN sa.zipcode ~ '^[0-9]+$' THEN CAST(sa.zipcode AS INT)\n        ELSE NULL\n    END as postal_code,\n\tso.special_instructions as delivery_instruction,\n\tso.created_at,\n\tso.updated_at\nfrom spree_orders so\nleft join spree_addresses sa on sa.id = so.bill_address_id\nleft join spree_countries con on con.id=sa.country_id\nleft join spree_districts dist on dist.id=sa.district_id \nleft join spree_district_translations sdtrans on sdtrans.spree_district_id = dist.id and sdtrans.locale='en'\nwhere so.state != 'cart'\n\nUNION ALL\n\nselect \n\tROW_NUMBER() over () as id,\n\tso.id as order_id,\n\tso.ship_address_id as address_id,\n\t'false' as is_bill_address,\n \tCOALESCE(sa.city,'') as city,\n \tCOALESCE(con.name,'') as country,\n    sdtrans.name as district, \n\t'other' as type,\n\tCONCAT(sa.address1, ' ', sa.address2) AS formatted_address,\n \tCOALESCE(sa.latitude,'0.0') as latitude,\n \tCOALESCE(sa.longitude,'0.0') as longitude,\n\tCASE \n        WHEN sa.zipcode ~ '^[0-9]+$' THEN CAST(sa.zipcode AS INT)\n        ELSE NULL\n    END as postal_code,\n\tso.special_instructions as delivery_instruction,\n\tso.created_at,\n\tso.updated_at\nfrom spree_orders so\nleft join spree_addresses sa on sa.id = so.ship_address_id\nleft join spree_countries con on con.id=sa.country_id\nleft join spree_districts dist on dist.id=sa.district_id\nleft join spree_district_translations sdtrans on sdtrans.spree_district_id = dist.id and sdtrans.locale='en'\nwhere so.state != 'cart'"
							},
							"sink": {
								"type": "AzurePostgreSQLSink",
								"writeBatchSize": 1000000,
								"writeBatchTimeout": "00:30:00",
								"writeMethod": "CopyCommand"
							},
							"enableStaging": false,
							"parallelCopies": 5,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "order_id",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "order_id",
											"type": "Int32",
											"physicalType": "integer"
										}
									},
									{
										"source": {
											"name": "address_id",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "address_id",
											"type": "Int32",
											"physicalType": "integer"
										}
									},
									{
										"source": {
											"name": "is_bill_address",
											"type": "String",
											"physicalType": "text"
										},
										"sink": {
											"name": "is_bill_address",
											"type": "Boolean",
											"physicalType": "boolean"
										}
									},
									{
										"source": {
											"name": "city",
											"type": "String",
											"physicalType": "character varying"
										},
										"sink": {
											"name": "city",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "country",
											"type": "String",
											"physicalType": "character varying"
										},
										"sink": {
											"name": "country",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "district",
											"type": "String",
											"physicalType": "character varying"
										},
										"sink": {
											"name": "district",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "type",
											"type": "String",
											"physicalType": "text"
										},
										"sink": {
											"name": "type",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "formatted_address",
											"type": "String",
											"physicalType": "text"
										},
										"sink": {
											"name": "formatted_address",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "latitude",
											"type": "Double",
											"physicalType": "double precision"
										},
										"sink": {
											"name": "latitude",
											"type": "Double",
											"physicalType": "double precision"
										}
									},
									{
										"source": {
											"name": "longitude",
											"type": "Double",
											"physicalType": "double precision"
										},
										"sink": {
											"name": "longitude",
											"type": "Double",
											"physicalType": "double precision"
										}
									},
									{
										"source": {
											"name": "postal_code",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "postal_code",
											"type": "Int32",
											"physicalType": "integer"
										}
									},
									{
										"source": {
											"name": "delivery_instruction",
											"type": "String",
											"physicalType": "text"
										},
										"sink": {
											"name": "delivery_instruction",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "created_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										},
										"sink": {
											"name": "created_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										}
									},
									{
										"source": {
											"name": "updated_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										},
										"sink": {
											"name": "updated_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": false,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_V1_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_V2_ORDER_DB_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {
									"table_name": "order_address"
								}
							}
						]
					},
					{
						"name": "Lookup1",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzurePostgreSqlSource",
								"query": "Alter sequence order_address_id_seq restart with 1;\nSelect 'Altering Sequence' as update;",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_V2_ORDER_DB_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {
									"table_name": "order_address"
								}
							},
							"firstRowOnly": false
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Order DB"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_V1_PRODUCTION')]",
				"[concat(variables('factoryId'), '/datasets/DS_V2_ORDER_DB_PRODUCTION')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/order_adjustment')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "PostgreSqlV2Source",
								"query": "select sa.id,\n\tsa.order_id,\n    sa.created_at,\n    sa.updated_at,\n    sa.source_id,\n    sa.adjustable_id,\n    sa.adjustment_reason_id as adjustable_reason_id,\n    sa.amount,\n    sa.promotion_code_id,\n    sa.eligible,\n    sa.included,\n    sa.finalized,\n    sa.free_sample,\n    substring(sa.source_type,8) as source_type,\n    sa.label,\n    substring(sa.adjustable_type,8) as adjustable_type\nfrom spree_adjustments sa\nleft join spree_orders so on sa.order_id = so.id and so.state !='cart'"
							},
							"sink": {
								"type": "AzurePostgreSQLSink",
								"writeBatchSize": 1000000,
								"writeBatchTimeout": "00:30:00",
								"writeMethod": "CopyCommand"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_V1_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_V2_ORDER_DB_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {
									"table_name": "order_adjustment"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Order DB"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_V1_PRODUCTION')]",
				"[concat(variables('factoryId'), '/datasets/DS_V2_ORDER_DB_PRODUCTION')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/order_cancellation_reason')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "order_cancellation_reason table",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "PostgreSqlV2Source",
								"query": "WITH RankedResults AS (\n    SELECT\n        cancel_reason,\n        created_at,\n        updated_at,\n        ROW_NUMBER() OVER (PARTITION BY cancel_reason ORDER BY created_at DESC) AS rn\n    FROM spree_fulfilments\n    WHERE cancel_reason IS NOT NULL\n)\nSELECT\n    ROW_NUMBER() OVER () AS id,\n    cancel_reason AS reason_en,\n    '' AS reason_ar,\n    true AS visible,\n    created_at,\n    updated_at\nFROM RankedResults\nWHERE rn = 1\nORDER BY id ASC;"
							},
							"sink": {
								"type": "AzurePostgreSQLSink",
								"writeBatchSize": 1000000,
								"writeBatchTimeout": "00:30:00",
								"writeMethod": "CopyCommand"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_V1_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_V2_ORDER_DB_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {
									"table_name": "order_cancellation_reason"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Order DB"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_V1_PRODUCTION')]",
				"[concat(variables('factoryId'), '/datasets/DS_V2_ORDER_DB_PRODUCTION')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/order_invoice_logs')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "order_invoice_logs",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "PostgreSqlV2Source",
								"query": "SELECT\n    id,\n    zatca_status,\n    zatca_issued_date,\n    zatca_signed_xml_url,\n    zatca_uuid,\n    zatca_invoice_hash,\n    zatca_response,\n    spree_invoice_id,  -- Assuming spree_invoice_id is a reference to the id column\n    created_at,\n    updated_at\nFROM\n    public.spree_invoice_logs;"
							},
							"sink": {
								"type": "AzurePostgreSQLSink",
								"writeBatchSize": 1000000,
								"writeBatchTimeout": "00:30:00",
								"writeMethod": "CopyCommand"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_V1_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_V2_ORDER_DB_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {
									"table_name": "order_invoice_logs"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Order DB"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_V1_PRODUCTION')]",
				"[concat(variables('factoryId'), '/datasets/DS_V2_ORDER_DB_PRODUCTION')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/order_invoices')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "PostgreSqlV2Source",
								"query": "SELECT\n    id,\n    order_id,\n    type,\n    public_id,\n    is_qr_generated,\n    is_pdf_generated,\n    meta,\n    created_at,\n    updated_at,\n    qr_file_name,\n    qr_content_type,\n    qr_file_size,\n    qr_updated_at,\n    pdf_file_name,\n    pdf_content_type,\n    pdf_file_size,\n    pdf_updated_at,\n    qr_data,\n    job_id,\n    zatca_status,\n    zatca_issued_date,\n    zatca_signed_xml_url,\n    zatca_uuid,\n    zatca_invoice_hash,\n    zatca_response\nFROM\n    public.spree_invoices;"
							},
							"sink": {
								"type": "AzurePostgreSQLSink",
								"writeBatchSize": 1000000,
								"writeBatchTimeout": "00:30:00",
								"writeMethod": "CopyCommand"
							},
							"enableStaging": false,
							"parallelCopies": 8,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_V1_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_V2_ORDER_DB_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {
									"table_name": "order_invoices"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Order DB"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_V1_PRODUCTION')]",
				"[concat(variables('factoryId'), '/datasets/DS_V2_ORDER_DB_PRODUCTION')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/order_payment')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "PostgreSqlV2Source",
								"query": "SELECT\n    ROW_NUMBER() over () as id,\n    sp.order_id,\n    sp.response_code AS transaction_id,\n    sp.amount,\n    coalesce(so.currency,'') as currency,\n    sp.state AS status,\n    sp.payment_method_id AS payment_option_id,\n    sp.source_id,\n\t  ss.id as shipment_id,\n    substring(sp.source_type,8) AS source_type\nFROM \n    spree_payments sp\nleft JOIN spree_orders so ON so.id = sp.order_id\nLEFT JOIN spree_shipments ss on ss.order_id = so.id;"
							},
							"sink": {
								"type": "AzurePostgreSQLSink",
								"writeBatchSize": 1000000,
								"writeBatchTimeout": "00:30:00",
								"writeMethod": "CopyCommand"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "order_id",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "order_id",
											"type": "Int32",
											"physicalType": "integer"
										}
									},
									{
										"source": {
											"name": "transaction_id",
											"type": "String",
											"physicalType": "character varying"
										},
										"sink": {
											"name": "transaction_id",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "amount",
											"type": "Decimal",
											"physicalType": "numeric"
										},
										"sink": {
											"name": "amount",
											"type": "Double",
											"physicalType": "double precision"
										}
									},
									{
										"source": {
											"name": "currency",
											"type": "String",
											"physicalType": "character varying"
										},
										"sink": {
											"name": "currency",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "status",
											"type": "String",
											"physicalType": "character varying"
										},
										"sink": {
											"name": "status",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "shipment_id",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "shipment_id",
											"type": "Int32",
											"physicalType": "integer"
										}
									},
									{
										"source": {
											"name": "payment_option_id",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "payment_option_id",
											"type": "Int32",
											"physicalType": "integer"
										}
									},
									{
										"source": {
											"name": "source_id",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "source_id",
											"type": "Int32",
											"physicalType": "integer"
										}
									},
									{
										"source": {
											"name": "source_type",
											"type": "String",
											"physicalType": "text"
										},
										"sink": {
											"name": "source_type",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "id",
											"type": "Int64",
											"physicalType": "bigint"
										},
										"sink": {
											"name": "id",
											"type": "Int32",
											"physicalType": "integer"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_V1_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_V2_ORDER_DB_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {
									"table_name": "order_payment"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Order DB"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_V1_PRODUCTION')]",
				"[concat(variables('factoryId'), '/datasets/DS_V2_ORDER_DB_PRODUCTION')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/order_payment_refund')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "PostgreSqlV2Source",
								"query": "select \nsr.id,\nsp.order_id,\ncase \nwhen sr.transaction_id is not null then sr.transaction_id \nelse sp.response_code \nend as transaction_id,\nsr.created_at,\nsr.updated_at,\nsr.amount,\ncase \n\twhen sr.status='uncertain' then 'pending'\n\twhen sr.status='failed' then 'failed'\n\twhen sr.status='success' then 'approved'\n\telse ''\nEnd as status,\n'SAR' as currency,\n'' as type\nFrom spree_refunds sr\ninner join spree_payments sp on sp.id=sr.payment_id \nwhere sr.payment_id is not null;"
							},
							"sink": {
								"type": "AzurePostgreSQLSink",
								"writeBatchSize": 1000000,
								"writeBatchTimeout": "00:30:00",
								"writeMethod": "CopyCommand"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_V1_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_V2_ORDER_DB_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {
									"table_name": "order_payment_refund"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Order DB"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_V1_PRODUCTION')]",
				"[concat(variables('factoryId'), '/datasets/DS_V2_ORDER_DB_PRODUCTION')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/order_product')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [],
						"policy": {
							"timeout": "0.15:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "PostgreSqlV2Source",
								"query": "WITH delivery_instructions AS (\n    SELECT \n        sli.line_item_id,\n        CONCAT(\n            'Preferred Cut - ', COALESCE(spc.name, ''), '::', \n            STRING_AGG(CONCAT(' ', COALESCE(scp.name_en, ''), ' ', ROUND(sli.quantity / 1000.0, 2), ' ', 'kg'), ', '), \n            STRING_AGG(CONCAT(' ', COALESCE(scp.name_ar, ''), ' ', ROUND(sli.quantity / 1000.0, 2), ' ', 'kg'), ', ')\n        ) AS delivery_instruction\n    FROM spree_line_item_cut_patterns sli\n    LEFT JOIN spree_cut_patterns scp ON scp.id = sli.cut_pattern_id \n    LEFT JOIN spree_preferred_cuts spc ON spc.id = scp.preferred_cut_id\n    WHERE sli.quantity > 0\n    GROUP BY sli.line_item_id, spc.name\n    ORDER BY sli.line_item_id\n)\nSELECT \n    sli.id,\n    sli.variant_id AS product_variant_id,\n    coalesce(CASE \n        WHEN  sv.weight_increment > 0 AND sv.default_weight_count > 0 AND sv.max_weight_per_order > 0 -- weighted product \n        then\n          case\n           when sli.requested_quantity < sv.weight_increment and sli.requested_quantity >0\n           \tthen sv.weight_increment  / sli.requested_quantity\n            else sli.requested_quantity /sv.weight_increment \n            end\n        ELSE sli.requested_quantity \n    END,0) AS quantity,\n    -- Determine picked_weight based on conditions\n    CASE \n        WHEN  sv.weight_increment > 0 AND sv.default_weight_count > 0 AND sv.max_weight_per_order > 0 -- weighted product \n        THEN sli.quantity \n        ELSE NULL\n    END AS picked_weight,\n    -- Determine picked_quantity based on conditions\n    COALESCE(\n        CASE \n            WHEN sv.weight_increment > 0 AND sv.default_weight_count > 0 AND sv.max_weight_per_order > 0\n                THEN 1\n                ELSE sli.quantity\n        END, 0\n    ) AS picked_quantity,\n    sli.price,\n    sli.created_at,\n    sli.replaced,\n    so.state,\n    COALESCE(sli.updated_at, CURRENT_TIMESTAMP) AS updated_at,\n    CASE \n        WHEN sli.on_sale = false THEN sli.price\n        ELSE '0.0'\n    END AS action_price,\n    CASE \n        WHEN sli.on_sale = true THEN sli.price\n        ELSE '0'\n    END AS sale_price,\n    0 AS picker_id,\n    sv.product_id,\n    di.delivery_instruction,\n    sli.order_id AS order_shipment_id,\n    CASE\n        WHEN so.replace_product::varchar = 'true' THEN 'replace-with-similar-product' \n        WHEN so.replace_product::varchar = 'false' THEN 'cancel'\n        ELSE NULL\n    END AS replacement_pref,\n    1 AS category_id,\n    '' AS status\nFROM spree_line_items sli\nLEFT JOIN spree_variants sv ON sv.id = sli.variant_id\nLEFT JOIN spree_orders so ON so.id = sli.order_id\nLEFT JOIN delivery_instructions di ON sli.id = di.line_item_id\n-- left join spree_product_translations spt on spt.spree_product_id = sv.product_id and spt.locale = 'en'\nWHERE so.state != 'cart'\norder by sli.id desc;"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings",
									"copyBehavior": "PreserveHierarchy"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"parallelCopies": 8,
							"dataIntegrationUnits": 4,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "id",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "id",
											"type": "Int32",
											"physicalType": "INT_32"
										}
									},
									{
										"source": {
											"name": "product_variant_id",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "product_variant_id",
											"type": "Int32",
											"physicalType": "INT_32"
										}
									},
									{
										"source": {
											"name": "quantity",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "quantity",
											"type": "Int32",
											"physicalType": "INT_32"
										}
									},
									{
										"source": {
											"name": "picked_weight",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "picked_weight",
											"type": "Int32",
											"physicalType": "INT_32"
										}
									},
									{
										"source": {
											"name": "picked_quantity",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "picked_quantity",
											"type": "Int32",
											"physicalType": "INT_32"
										}
									},
									{
										"source": {
											"name": "price",
											"type": "Decimal",
											"physicalType": "numeric"
										},
										"sink": {
											"name": "price",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										}
									},
									{
										"source": {
											"name": "created_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										},
										"sink": {
											"name": "created_at",
											"type": "DateTime",
											"physicalType": "INT_96"
										}
									},
									{
										"source": {
											"name": "replaced",
											"type": "Boolean",
											"physicalType": "boolean"
										},
										"sink": {
											"name": "replaced",
											"type": "Boolean",
											"physicalType": "BOOLEAN"
										}
									},
									{
										"source": {
											"name": "state",
											"type": "String",
											"physicalType": "character varying"
										},
										"sink": {
											"name": "state",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "updated_at",
											"type": "DateTime",
											"physicalType": "timestamp with time zone"
										},
										"sink": {
											"name": "updated_at",
											"type": "DateTime",
											"physicalType": "INT_96"
										}
									},
									{
										"source": {
											"name": "action_price",
											"type": "Decimal",
											"physicalType": "numeric"
										},
										"sink": {
											"name": "action_price",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										}
									},
									{
										"source": {
											"name": "sale_price",
											"type": "Decimal",
											"physicalType": "numeric"
										},
										"sink": {
											"name": "sale_price",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										}
									},
									{
										"source": {
											"name": "picker_id",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "picker_id",
											"type": "Int32",
											"physicalType": "INT_32"
										}
									},
									{
										"source": {
											"name": "product_id",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "product_id",
											"type": "Int32",
											"physicalType": "INT_32"
										}
									},
									{
										"source": {
											"name": "delivery_instruction",
											"type": "String",
											"physicalType": "text"
										},
										"sink": {
											"name": "delivery_instruction",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "order_shipment_id",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "order_shipment_id",
											"type": "Int32",
											"physicalType": "INT_32"
										}
									},
									{
										"source": {
											"name": "replacement_pref",
											"type": "String",
											"physicalType": "text"
										},
										"sink": {
											"name": "replacement_pref",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "category_id",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "category_id",
											"type": "Int32",
											"physicalType": "INT_32"
										}
									},
									{
										"source": {
											"name": "status",
											"type": "String",
											"physicalType": "text"
										},
										"sink": {
											"name": "status",
											"type": "String",
											"physicalType": "UTF8"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_V1_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_Intermiadate_Result",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Lookup1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "order_product",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"extractorderproduct": {},
									"ordershipment": {},
									"writestatusbacktodb": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Delete1",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "Data flow1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DS_Intermiadate_Result",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "Lookup1",
						"type": "Lookup",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [
							{
								"activity": "Copy data1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzurePostgreSqlSource",
								"query": "Alter sequence order_product_id_seq restart with 1;\nSelect 'Reset Sequence ID' As Update;",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_V2_ORDER_DB_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {
									"table_name": "order_product"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Order DB"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_V1_PRODUCTION')]",
				"[concat(variables('factoryId'), '/datasets/DS_Intermiadate_Result')]",
				"[concat(variables('factoryId'), '/dataflows/order_product')]",
				"[concat(variables('factoryId'), '/datasets/DS_V2_ORDER_DB_PRODUCTION')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/order_promotions')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "PostgreSqlV2Source",
								"query": "select * from spree_orders_promotions;"
							},
							"sink": {
								"type": "AzurePostgreSQLSink",
								"writeBatchSize": 1000000,
								"writeBatchTimeout": "00:30:00",
								"writeMethod": "CopyCommand"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "id",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "id",
											"type": "Int32",
											"physicalType": "integer"
										}
									},
									{
										"source": {
											"name": "order_id",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "order_id",
											"type": "Int32",
											"physicalType": "integer"
										}
									},
									{
										"source": {
											"name": "promotion_id",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "promotion_id",
											"type": "Int32",
											"physicalType": "integer"
										}
									},
									{
										"source": {
											"name": "promotion_code_id",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "promotion_code_id",
											"type": "Int32",
											"physicalType": "integer"
										}
									},
									{
										"source": {
											"name": "created_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										},
										"sink": {
											"name": "created_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										}
									},
									{
										"source": {
											"name": "updated_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										},
										"sink": {
											"name": "updated_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_V1_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_V2_ORDER_DB_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {
									"table_name": "order_promotions"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Order DB"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_V1_PRODUCTION')]",
				"[concat(variables('factoryId'), '/datasets/DS_V2_ORDER_DB_PRODUCTION')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/order_shipment')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "PostgreSqlV2Source",
								"query": "WITH cte AS (\n    SELECT  \n        so.id AS id,                        -- shipment_id \n        so.id AS order_id,\n        CASE\n            WHEN so.state = 'delivery' THEN 'delivered'\n            WHEN so.state = 'picking_and_staging_in_progress' THEN 'pending'\n            WHEN so.state = 'payment' THEN 'pending'\n            WHEN so.state = 'complete' THEN 'completed'\n            WHEN so.state = 'confirm' THEN 'pending'\n            WHEN so.state = 'canceled' THEN 'customer_cancelled'\n        END AS order_status,\n        so.created_at,\n        so.updated_at,\n        CAST((so.total * (so.vat_percentage / 100)) AS DOUBLE PRECISION) AS tax_total,\n        so.total,\n\t\tcast(dsto.start_time as text) as start_time, \n        cast(dsto.end_time as text) as end_time, \n\t\tCASE\n\t\t\tWHEN dtss.day_of_week = 0 THEN 'sunday'\n\t\t\tWHEN dtss.day_of_week = 1 THEN 'monday'\n\t\t\tWHEN dtss.day_of_week = 2 THEN 'tuesday'\n\t\t\tWHEN dtss.day_of_week = 3 THEN 'wednesday'\n\t\t\tWHEN dtss.day_of_week = 4 THEN 'thursday'\n\t\t\tWHEN dtss.day_of_week = 5 THEN 'friday'\n\t\t\tWHEN dtss.day_of_week = 6 THEN 'saturday'\n\t\t\tElse 'sunday'\n\t\tEND AS day_of_week,\n\t\tdtss.spree_shipping_method_id as delivery_option_id,\n        so.order_type,\n        so.supermarket_id,\n        sla.delivery_date,\n        sa.amount AS delivery_charges,\n        FALSE AS is_delivery_on_hold,\n        so.created_at AS processing_start_at,\n        ROW_NUMBER() OVER (PARTITION BY so.id ORDER BY so.id) AS row_num\n    FROM spree_orders so\n    LEFT JOIN danube_slot_to_orders dsto ON dsto.order_id = so.id\n\tleft join danube_time_slots_schedules dtss on dtss.id = dsto.time_slots_schedule_id\n    LEFT JOIN spree_lift_assignments sla ON sla.order_id = so.id\n    LEFT JOIN spree_adjustments sa ON sa.order_id = so.id AND sa.label = 'Express Fee'\n    WHERE so.state != 'cart'\n)\nSELECT *\nFROM cte\nWHERE row_num = 1;"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings",
									"copyBehavior": "FlattenHierarchy"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "id",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "id",
											"type": "Int32",
											"physicalType": "INT_32"
										}
									},
									{
										"source": {
											"name": "order_id",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "order_id",
											"type": "Int32",
											"physicalType": "INT_32"
										}
									},
									{
										"source": {
											"name": "order_status",
											"type": "String",
											"physicalType": "text"
										},
										"sink": {
											"name": "order_status",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "created_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										},
										"sink": {
											"name": "created_at",
											"type": "DateTime",
											"physicalType": "INT_96"
										}
									},
									{
										"source": {
											"name": "updated_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										},
										"sink": {
											"name": "updated_at",
											"type": "DateTime",
											"physicalType": "INT_96"
										}
									},
									{
										"source": {
											"name": "tax_total",
											"type": "Double",
											"physicalType": "double precision"
										},
										"sink": {
											"name": "tax_total",
											"type": "Double",
											"physicalType": "DOUBLE"
										}
									},
									{
										"source": {
											"name": "total",
											"type": "Decimal",
											"physicalType": "numeric"
										},
										"sink": {
											"name": "total",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										}
									},
									{
										"source": {
											"name": "start_time",
											"type": "TimeSpan",
											"physicalType": "time without time zone"
										},
										"sink": {
											"name": "start_time",
											"type": "TimeSpan",
											"physicalType": "INT_96"
										}
									},
									{
										"source": {
											"name": "end_time",
											"type": "TimeSpan",
											"physicalType": "time without time zone"
										},
										"sink": {
											"name": "end_time",
											"type": "TimeSpan",
											"physicalType": "INT_96"
										}
									},
									{
										"source": {
											"name": "day_of_week",
											"type": "String",
											"physicalType": "text"
										},
										"sink": {
											"name": "day_of_week",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "delivery_option_id",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "delivery_option_id",
											"type": "Int32",
											"physicalType": "INT_32"
										}
									},
									{
										"source": {
											"name": "order_type",
											"type": "String",
											"physicalType": "character varying"
										},
										"sink": {
											"name": "order_type",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "supermarket_id",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "supermarket_id",
											"type": "Int32",
											"physicalType": "INT_32"
										}
									},
									{
										"source": {
											"name": "delivery_date",
											"type": "DateTime",
											"physicalType": "date"
										},
										"sink": {
											"name": "delivery_date",
											"type": "DateTime",
											"physicalType": "INT_96"
										}
									},
									{
										"source": {
											"name": "delivery_charges",
											"type": "Decimal",
											"physicalType": "numeric"
										},
										"sink": {
											"name": "delivery_charges",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										}
									},
									{
										"source": {
											"name": "is_delivery_on_hold",
											"type": "Boolean",
											"physicalType": "boolean"
										},
										"sink": {
											"name": "is_delivery_on_hold",
											"type": "Boolean",
											"physicalType": "BOOLEAN"
										}
									},
									{
										"source": {
											"name": "processing_start_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										},
										"sink": {
											"name": "processing_start_at",
											"type": "DateTime",
											"physicalType": "INT_96"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_V1_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_Intermiadate_Result",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Copy data1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "order_shipment",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"ordershipment": {},
									"deliverytype": {},
									"timeslottable": {},
									"writeintodb": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Delete1",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "Data flow1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DS_Intermiadate_Result",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Order DB"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_V1_PRODUCTION')]",
				"[concat(variables('factoryId'), '/datasets/DS_Intermiadate_Result')]",
				"[concat(variables('factoryId'), '/dataflows/order_shipment')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/payment_option')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "payment_option",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "PostgreSqlV2Source",
								"query": "SELECT id,\n       name,\n       created_at,\n       updated_at,\n       deleted_at,\n       CASE\n            WHEN type = 'Spree::PaymentMethod::StoreCredit' THEN 'e-wlt'\n            WHEN type = 'Spree::Gateway::PayFort' THEN 'credit'\n            WHEN type = 'Spree::Gateway::CheckoutCom' THEN 'credit'\n            WHEN type = 'Spree::Gateway::Tamara' THEN 'tamara'\n            WHEN type = 'Spree::Gateway::BogusSimple' THEN 'bogus-simple'\n            WHEN type = 'Spree::PaymentMethod::Check' THEN 'cod'\n            WHEN type = 'Spree::Gateway::CheckoutCom::ApplePay' THEN 'a-pay'\n            WHEN type = 'Spree::Gateway::LoyaltyPoint' THEN 'loy-pts'\n            WHEN type = 'Spree::Gateway::PayFort::ApplePay' THEN 'a-pay'\n        Else '' \n\t\tEnd as code\nFROM   spree_payment_methods\nwhere name is not null\nORDER  BY id ASC;"
							},
							"sink": {
								"type": "AzurePostgreSQLSink",
								"writeBatchSize": 1000000,
								"writeBatchTimeout": "00:30:00",
								"writeMethod": "CopyCommand"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_V1_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_V2_USER_DB_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {
									"table_name": "payment_option"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "User DB"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_V1_PRODUCTION')]",
				"[concat(variables('factoryId'), '/datasets/DS_V2_USER_DB_PRODUCTION')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/product')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "addsuppliercodecolumn",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "PostgreSqlV2Source",
								"query": "WITH brand AS (\r\n  SELECT \r\n    rt.id,\r\n    COALESCE(rt.name_en,'') AS name_en,\r\n    COALESCE(\r\n      CASE\r\n        WHEN LENGTH(rt.name_en) < 5 THEN \r\n          UPPER(REGEXP_REPLACE(TRANSLATE(rt.name_en, ' ', '_'), '[^a-zA-Z0-9_]', '', 'g')) || '_' || rt.id\r\n        ELSE \r\n          UPPER(SUBSTRING(REGEXP_REPLACE(TRANSLATE(rt.name_en, ' ', ''), '[^a-zA-Z0-9]', '', 'g'), 1, 1)) ||\r\n          UPPER(SUBSTRING(REGEXP_REPLACE(SUBSTRING(REGEXP_REPLACE(TRANSLATE(rt.name_en, ' ', ''), '[^a-zA-Z0-9]', ' ', 'g'), 2), ' ', ''), 1, 1)) ||\r\n          '_' || rt.id\r\n      END, \r\n    '') AS code,\r\n    rt.created_at,\r\n    rt.updated_at,\r\n    rt.temp_taxon_id,\r\n    COALESCE(rt.name_ar, '') AS name_ar\r\n  FROM (\r\n    SELECT \r\n      ROW_NUMBER() OVER () AS id,\r\n      st.id AS temp_taxon_id,\r\n      MAX(CASE WHEN stt.locale = 'en' THEN stt.name END) AS name_en,\r\n      MAX(CASE WHEN stt.locale = 'ar' THEN stt.name END) AS name_ar,\r\n      st.created_at,\r\n      st.updated_at\r\n    FROM spree_taxons st\r\n    LEFT JOIN spree_taxon_translations stt ON stt.spree_taxon_id = st.id\r\n    WHERE st.parent_id IN (\r\n      SELECT st.id \r\n      FROM spree_taxons st \r\n      JOIN spree_taxon_translations stt ON stt.spree_taxon_id = st.id AND stt.locale = 'en'\r\n      WHERE stt.name = 'Brands'\r\n    )\r\n    GROUP BY st.id\r\n  ) AS rt\r\n  ORDER BY rt.temp_taxon_id ASC\r\n), \r\nsupplier AS (\r\n  SELECT \r\n    REGEXP_REPLACE(MAX(COALESCE(spt.supplier_name,'')), '-[0-9]+$', '') AS name,\r\n    LEFT(COALESCE(spt.code, ''), 10) AS code,\r\n    MAX(spt.created_at) AS created_at,\r\n    MAX(spt.updated_at) AS updated_at,\r\n    MAX(spt.deleted_at) AS deleted_at\r\n  FROM (\r\n    SELECT\r\n      spree_product_id,\r\n      MAX(CASE WHEN locale = 'en' THEN manufacturer END) AS supplier_name,\r\n      MAX(CASE WHEN locale = 'ar' THEN manufacturer END) AS code,\r\n      MAX(created_at) AS created_at,\r\n      MAX(updated_at) AS updated_at,\r\n      MAX(deleted_at) AS deleted_at\r\n    FROM spree_product_translations\r\n    WHERE manufacturer IS NOT NULL\r\n    GROUP BY spree_product_id\r\n  ) AS spt\r\n  GROUP BY spt.code\r\n), \r\ncte AS (\r\n  SELECT \r\n    sp.id,\r\n    sp.tax_category_id,\r\n    sp.refundable,\r\n    sp.moq_limit,\r\n    sp.meta_title,\r\n    sp.loyalty_point,\r\n    sp_table.validity_tag_ar,\r\n    sp_table.validity_tag,\r\n    sp_table.slug,\r\n    sp_table.size,\r\n\tREGEXP_REPLACE(MAX(COALESCE(sp_table.supplier_name,'')), '-[0-9]+$', '') AS supplier_code,\r\n    COALESCE(sp_table.name_ar, '') AS name_ar,\r\n    COALESCE(sp_table.name, '') AS name,\r\n    COALESCE(sp_table.meta_keywords_ar, '') AS meta_keywords_ar,\r\n    COALESCE(sp_table.meta_keywords, '') AS meta_keywords,\r\n    COALESCE(sp_table.meta_description_ar, '') AS meta_description_ar,\r\n    COALESCE(sp_table.meta_description, '') AS meta_description,\r\n    COALESCE(sp_table.short_description_ar, '') AS short_description_ar,\r\n    COALESCE(sp_table.long_description_ar, '') AS long_description_ar,\r\n    COALESCE(sp_table.short_description, '') AS short_description,\r\n    COALESCE(sp_table.long_description, '') AS long_description,\r\n    COALESCE(sp.is_loyalty_reward, 'false') AS issue_loyalty_points,\r\n    CASE\r\n      WHEN sp.electronic_product_code = '' THEN NULL \r\n      ELSE CAST(sp.electronic_product_code AS INT)\r\n    END AS electronic_product_code,\r\n    CASE\r\n      WHEN sp.deleted_at IS NOT NULL THEN TRUE\r\n      ELSE FALSE\r\n    END AS is_deleted,\r\n    COALESCE(sp.crushable, false) AS crushable,\r\n    sp.created_at,\r\n    sp.updated_at,\r\n    sp.cod_enabled,\r\n    COALESCE(CAST(sp.available_on AS DATE), CAST(CURRENT_TIMESTAMP AS DATE)) AS available_on,\r\n    sp.bundled,\r\n    sp.bin_category_id,\r\n    brand_taxon.temp_taxon_id AS default_taxon_id,\r\n    sv.width,\r\n    sv.weight_increment,\r\n    CASE \r\n        WHEN  sv.weight_increment > 0 AND sv.default_weight_count > 0 AND sv.max_weight_per_order > 0 -- weighted product \r\n        THEN sv.weight_increment\r\n        Else sv.weight\r\n    End as weight,\r\n    sv.sku,\r\n    case when\r\n    CAST(sv.perform_liquid_weight_check AS INT) = 0 Then 'False'\r\n    ELSE 'True'\r\n    END AS perform_liquid_weight_check,\r\n    sv.max_weight_per_order,\r\n    sv.height,\r\n    sv.depth,\r\n    sv.default_weight_count,\r\n    FALSE AS promotable,\r\n    TRUE AS is_wishlisted,\r\n    FALSE AS is_gluten_free,\r\n    '' AS discount,\r\n    FALSE AS deactivate,\r\n    ds_country.country_id,\r\n    1 AS category_id,\r\n    brand_taxon.brand_id AS brand_id\r\n  FROM spree_products sp\r\n  LEFT JOIN (\r\n    SELECT\r\n      sp.id,\r\n\t  MAX(CASE WHEN locale = 'en' THEN manufacturer END) as supplier_name,\r\n      MAX(CASE WHEN sptrans.locale = 'ar' THEN sptrans.validity_tag END) AS validity_tag_ar,\r\n      MAX(CASE WHEN sptrans.locale = 'en' THEN sptrans.validity_tag END) AS validity_tag,\r\n      MAX(sptrans.slug) AS slug,\r\n      MAX(sptrans.pack_size) AS size,\r\n      MAX(CASE WHEN sptrans.locale = 'ar' THEN sptrans.name END) AS name_ar,\r\n      MAX(CASE WHEN sptrans.locale = 'en' THEN sptrans.name END) AS name,\r\n      MAX(CASE WHEN sptrans.locale = 'ar' THEN sptrans.meta_keywords END) AS meta_keywords_ar,\r\n      MAX(CASE WHEN sptrans.locale = 'en' THEN sptrans.meta_keywords END) AS meta_keywords,\r\n      MAX(CASE WHEN sptrans.locale = 'ar' THEN sptrans.meta_description END) AS meta_description_ar,\r\n      MAX(CASE WHEN sptrans.locale = 'en' THEN sptrans.meta_description END) AS meta_description,\r\n      MAX(CASE WHEN sptrans.locale = 'ar' THEN sptrans.description END) AS short_description_ar,\r\n      MAX(CASE WHEN sptrans.locale = 'ar' THEN sptrans.description END) AS long_description_ar,\r\n      MAX(CASE WHEN sptrans.locale = 'en' THEN sptrans.description END) AS short_description,\r\n      MAX(CASE WHEN sptrans.locale = 'en' THEN sptrans.description END) AS long_description,\r\n      MAX(CASE WHEN sptrans.locale = 'ar' THEN sptrans.manufacturer END) AS supplier_code\r\n    FROM spree_products sp\r\n    LEFT JOIN spree_product_translations sptrans ON sptrans.spree_product_id = sp.id\r\n    GROUP BY sp.id\r\n  ) AS sp_table ON sp_table.id = sp.id\r\n  LEFT JOIN (\r\n    SELECT \r\n      sp.id, \r\n      db.country_id \r\n    FROM spree_products sp\r\n    LEFT JOIN spree_product_inventory_modifiers sim ON sp.id = sim.product_id\r\n    LEFT JOIN danube_supermarkets db ON sim.rule_supermarket_id = db.id\r\n    GROUP BY sp.id, db.country_id\r\n  ) AS ds_country ON sp.id = ds_country.id\r\n  LEFT JOIN (\r\n    SELECT \r\n      ROW_NUMBER() OVER (PARTITION BY prod_taxon.product_id ORDER BY b.created_at DESC) AS row_num,\r\n      b.temp_taxon_id,\r\n      b.id AS brand_id, \r\n      prod_taxon.product_id AS product_id\r\n    FROM brand b \r\n    LEFT JOIN spree_products_taxons prod_taxon ON b.temp_taxon_id = prod_taxon.taxon_id\r\n  ) AS brand_taxon ON brand_taxon.product_id = sp.id\r\n  LEFT JOIN (\r\n    SELECT \r\n      ROW_NUMBER() OVER (PARTITION BY product_id ORDER BY created_at DESC) AS row_num, \r\n      *\r\n    FROM spree_variants \r\n  ) sv ON sv.product_id = sp.id\r\n  LEFT JOIN supplier sup ON sup.code = sp_table.supplier_code AND sup.code != ''\r\n  WHERE (brand_taxon.row_num = 1 OR brand_taxon.row_num IS NULL) \r\n    AND (sv.row_num = 1 OR sv.row_num IS NULL)\r\nGROUP BY \r\n        sp.id, \r\n        sp.tax_category_id,\r\n        sp.refundable,\r\n        sp.moq_limit,\r\n        sp.meta_title,\r\n        sp.loyalty_point,\r\n        sp_table.validity_tag_ar,\r\n        sp_table.validity_tag,\r\n        sp_table.slug,\r\n\t\tbrand_taxon.temp_taxon_id,\r\n        sp_table.size,\r\n        sp_table.supplier_name,\r\n        sp_table.name_ar,\r\n        sp_table.name,\r\n        sp_table.meta_keywords_ar,\r\n        sp_table.meta_keywords,\r\n        sp_table.meta_description_ar,\r\n        sp_table.meta_description,\r\n        sp_table.short_description_ar,\r\n        sp_table.long_description_ar,\r\n        sp_table.short_description,\r\n        sp_table.long_description,\r\n        sp.is_loyalty_reward,\r\n\t\t    brand_taxon.brand_id,\r\n        sp.electronic_product_code,\r\n        sp.deleted_at,\r\n        sp.crushable,\r\n        sp.created_at,\r\n        sp.updated_at,\r\n        sp.cod_enabled,\r\n        sp.available_on,\r\n        sp.bundled,\r\n        sp.bin_category_id,\r\n        sv.width,\r\n        sv.weight_increment,\r\n        sv.weight,\r\n        sv.sku,\r\n        sv.perform_liquid_weight_check,\r\n        sv.max_weight_per_order,\r\n        sv.height,\r\n        sv.depth,\r\n        sv.default_weight_count,\r\n        ds_country.country_id\r\n)\r\nSELECT \r\n  filtered_cte.id,\r\n    filtered_cte.tax_category_id,\r\n    filtered_cte.refundable,\r\n    filtered_cte.moq_limit,\r\n    filtered_cte.meta_title,\r\n    filtered_cte.loyalty_point,\r\n    filtered_cte.validity_tag_ar,\r\n    filtered_cte.validity_tag,\r\n    filtered_cte.slug,\r\n    filtered_cte.size,\r\n\tfiltered_cte.supplier_code as temp_supplier_code,\r\n    filtered_cte.name_ar,\r\n    filtered_cte.name,\r\n    filtered_cte.meta_keywords_ar,\r\n    filtered_cte.meta_keywords,\r\n    filtered_cte.meta_description_ar,\r\n    filtered_cte.meta_description,\r\n    filtered_cte.short_description_ar,\r\n    filtered_cte.long_description_ar,\r\n    filtered_cte.short_description,\r\n    filtered_cte.long_description,\r\n    filtered_cte.issue_loyalty_points,\r\n    filtered_cte.electronic_product_code,\r\n    filtered_cte.is_deleted,\r\n    filtered_cte.crushable,\r\n    filtered_cte.created_at,\r\n    filtered_cte.updated_at,\r\n    filtered_cte.cod_enabled,\r\n    filtered_cte.available_on,\r\n    filtered_cte.bundled,\r\n    filtered_cte.bin_category_id,\r\n    filtered_cte.default_taxon_id,\r\n    filtered_cte.width,\r\n    filtered_cte.weight_increment,\r\n    filtered_cte.weight,\r\n    filtered_cte.sku,\r\n    filtered_cte.perform_liquid_weight_check,\r\n    filtered_cte.max_weight_per_order,\r\n    filtered_cte.height,\r\n    filtered_cte.depth,\r\n    filtered_cte.default_weight_count,\r\n    filtered_cte.promotable,\r\n    filtered_cte.is_wishlisted,\r\n    filtered_cte.is_gluten_free,\r\n    filtered_cte.discount,\r\n    filtered_cte.deactivate,\r\n    filtered_cte.country_id,\r\n    filtered_cte.category_id,\r\n    filtered_cte.brand_id\r\nFROM (\r\n  SELECT \r\n    cte.*,\r\n    ROW_NUMBER() OVER (PARTITION BY id ORDER BY country_id) AS rn \r\n  FROM cte\r\n) filtered_cte\r\nWHERE rn = 1;"
							},
							"sink": {
								"type": "AzurePostgreSQLSink",
								"writeBatchSize": 1000000,
								"writeBatchTimeout": "00:30:00",
								"preCopyScript": "ALTER TABLE product ADD COLUMN temp_taxon_id INT;",
								"writeMethod": "CopyCommand"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "id",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "id",
											"type": "Int32",
											"physicalType": "integer"
										}
									},
									{
										"source": {
											"name": "is_deleted",
											"type": "Boolean",
											"physicalType": "boolean"
										},
										"sink": {
											"name": "is_deleted",
											"type": "Boolean",
											"physicalType": "boolean"
										}
									},
									{
										"source": {
											"name": "created_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										},
										"sink": {
											"name": "created_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										}
									},
									{
										"source": {
											"name": "updated_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										},
										"sink": {
											"name": "updated_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										}
									},
									{
										"source": {
											"name": "name",
											"type": "String",
											"physicalType": "text"
										},
										"sink": {
											"name": "name",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "discount",
											"type": "String",
											"physicalType": "text"
										},
										"sink": {
											"name": "discount",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "is_wishlisted",
											"type": "Boolean",
											"physicalType": "boolean"
										},
										"sink": {
											"name": "is_wishlisted",
											"type": "Boolean",
											"physicalType": "boolean"
										}
									},
									{
										"source": {
											"name": "sku",
											"type": "String",
											"physicalType": "character varying"
										},
										"sink": {
											"name": "sku",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "country_id",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "country_id",
											"type": "Int32",
											"physicalType": "integer"
										}
									},
									{
										"source": {
											"name": "category_id",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "category_id",
											"type": "Int32",
											"physicalType": "integer"
										}
									},
									{
										"source": {
											"name": "name_ar",
											"type": "String",
											"physicalType": "text"
										},
										"sink": {
											"name": "name_ar",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "available_on",
											"type": "DateTime",
											"physicalType": "date"
										},
										"sink": {
											"name": "available_on",
											"type": "DateTime",
											"physicalType": "date"
										}
									},
									{
										"source": {
											"name": "electronic_product_code",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "electronic_product_code",
											"type": "Int32",
											"physicalType": "integer"
										}
									},
									{
										"source": {
											"name": "height",
											"type": "Decimal",
											"physicalType": "numeric"
										},
										"sink": {
											"name": "height",
											"type": "Double",
											"physicalType": "double precision"
										}
									},
									{
										"source": {
											"name": "width",
											"type": "Decimal",
											"physicalType": "numeric"
										},
										"sink": {
											"name": "width",
											"type": "Double",
											"physicalType": "double precision"
										}
									},
									{
										"source": {
											"name": "depth",
											"type": "Decimal",
											"physicalType": "numeric"
										},
										"sink": {
											"name": "depth",
											"type": "Double",
											"physicalType": "double precision"
										}
									},
									{
										"source": {
											"name": "weight",
											"type": "Decimal",
											"physicalType": "numeric"
										},
										"sink": {
											"name": "weight",
											"type": "Double",
											"physicalType": "double precision"
										}
									},
									{
										"source": {
											"name": "issue_loyalty_points",
											"type": "Boolean",
											"physicalType": "boolean"
										},
										"sink": {
											"name": "issue_loyalty_points",
											"type": "Boolean",
											"physicalType": "boolean"
										}
									},
									{
										"source": {
											"name": "bin_category_id",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "bin_category_id",
											"type": "Int32",
											"physicalType": "integer"
										}
									},
									{
										"source": {
											"name": "tax_category_id",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "tax_category_id",
											"type": "Int32",
											"physicalType": "integer"
										}
									},
									{
										"source": {
											"name": "cod_enabled",
											"type": "Boolean",
											"physicalType": "boolean"
										},
										"sink": {
											"name": "cod_enabled",
											"type": "Boolean",
											"physicalType": "boolean"
										}
									},
									{
										"source": {
											"name": "promotable",
											"type": "Boolean",
											"physicalType": "boolean"
										},
										"sink": {
											"name": "promotable",
											"type": "Boolean",
											"physicalType": "boolean"
										}
									},
									{
										"source": {
											"name": "refundable",
											"type": "Boolean",
											"physicalType": "boolean"
										},
										"sink": {
											"name": "refundable",
											"type": "Boolean",
											"physicalType": "boolean"
										}
									},
									{
										"source": {
											"name": "deactivate",
											"type": "Boolean",
											"physicalType": "boolean"
										},
										"sink": {
											"name": "deactivate",
											"type": "Boolean",
											"physicalType": "boolean"
										}
									},
									{
										"source": {
											"name": "validity_tag",
											"type": "String",
											"physicalType": "text"
										},
										"sink": {
											"name": "validity_tag",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "validity_tag_ar",
											"type": "String",
											"physicalType": "text"
										},
										"sink": {
											"name": "validity_tag_ar",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "meta_title",
											"type": "String",
											"physicalType": "character varying"
										},
										"sink": {
											"name": "meta_title",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "meta_keywords",
											"type": "String",
											"physicalType": "text"
										},
										"sink": {
											"name": "meta_keywords",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "meta_keywords_ar",
											"type": "String",
											"physicalType": "text"
										},
										"sink": {
											"name": "meta_keywords_ar",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "slug",
											"type": "String",
											"physicalType": "text"
										},
										"sink": {
											"name": "slug",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "brand_id",
											"type": "Int64",
											"physicalType": "bigint"
										},
										"sink": {
											"name": "brand_id",
											"type": "Int32",
											"physicalType": "integer"
										}
									},
									{
										"source": {
											"name": "bundled",
											"type": "Boolean",
											"physicalType": "boolean"
										},
										"sink": {
											"name": "bundled",
											"type": "Boolean",
											"physicalType": "boolean"
										}
									},
									{
										"source": {
											"name": "size",
											"type": "String",
											"physicalType": "text"
										},
										"sink": {
											"name": "size",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "perform_liquid_weight_check",
											"type": "String",
											"physicalType": "text"
										},
										"sink": {
											"name": "perform_liquid_weight_check",
											"type": "Boolean",
											"physicalType": "boolean"
										}
									},
									{
										"source": {
											"name": "weight_increment",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "weight_increment",
											"type": "Int32",
											"physicalType": "integer"
										}
									},
									{
										"source": {
											"name": "max_weight_per_order",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "max_weight_per_order",
											"type": "Int32",
											"physicalType": "integer"
										}
									},
									{
										"source": {
											"name": "crushable",
											"type": "Boolean",
											"physicalType": "boolean"
										},
										"sink": {
											"name": "crushable",
											"type": "Boolean",
											"physicalType": "boolean"
										}
									},
									{
										"source": {
											"name": "moq_limit",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "moq_limit",
											"type": "Int32",
											"physicalType": "integer"
										}
									},
									{
										"source": {
											"name": "default_weight_count",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "default_weight_count",
											"type": "Int32",
											"physicalType": "integer"
										}
									},
									{
										"source": {
											"name": "meta_description_ar",
											"type": "String",
											"physicalType": "text"
										},
										"sink": {
											"name": "meta_description_ar",
											"type": "String",
											"physicalType": "text"
										}
									},
									{
										"source": {
											"name": "meta_description",
											"type": "String",
											"physicalType": "text"
										},
										"sink": {
											"name": "meta_description",
											"type": "String",
											"physicalType": "text"
										}
									},
									{
										"source": {
											"name": "default_taxon_id",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "default_taxon_id",
											"type": "Int32",
											"physicalType": "integer"
										}
									},
									{
										"source": {
											"name": "short_description",
											"type": "String",
											"physicalType": "text"
										},
										"sink": {
											"name": "short_description",
											"type": "String",
											"physicalType": "text"
										}
									},
									{
										"source": {
											"name": "long_description",
											"type": "String",
											"physicalType": "text"
										},
										"sink": {
											"name": "long_description",
											"type": "String",
											"physicalType": "text"
										}
									},
									{
										"source": {
											"name": "short_description_ar",
											"type": "String",
											"physicalType": "text"
										},
										"sink": {
											"name": "short_description_ar",
											"type": "String",
											"physicalType": "text"
										}
									},
									{
										"source": {
											"name": "long_description_ar",
											"type": "String",
											"physicalType": "text"
										},
										"sink": {
											"name": "long_description_ar",
											"type": "String",
											"physicalType": "text"
										}
									},
									{
										"source": {
											"name": "is_gluten_free",
											"type": "Boolean",
											"physicalType": "boolean"
										},
										"sink": {
											"name": "is_gluten_free",
											"type": "Boolean",
											"physicalType": "boolean"
										}
									},
									{
										"source": {
											"name": "loyalty_point",
											"type": "Decimal",
											"physicalType": "numeric"
										},
										"sink": {
											"name": "loyalty_point",
											"type": "Double",
											"physicalType": "double precision"
										}
									},
									{
										"source": {
											"name": "temp_supplier_code",
											"type": "String",
											"physicalType": "text"
										},
										"sink": {
											"name": "temp_supplier_code",
											"type": "String",
											"physicalType": "character varying"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_V1_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_V2_PRODUCT_DB_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {
									"table_name": "product"
								}
							}
						]
					},
					{
						"name": "updatetemptaxonid",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Copy data1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzurePostgreSqlSource",
								"query": "WITH cte AS (\r\n    SELECT st.product_id, st.taxon_id AS temp_taxon_id\r\n    FROM product_taxon st\r\n)\r\nUPDATE product p\r\nSET temp_taxon_id = cte.temp_taxon_id\r\nFROM cte\r\nWHERE p.id = cte.product_id;\r\nSELECT 'Updating Temp Taxon ID' AS Message;",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_V2_PRODUCT_DB_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {
									"table_name": "product"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "updatesupplierIDandbrandID",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "updatetemptaxonid",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzurePostgreSqlSource",
								"query": "With cte AS\n  (select id, name as supplier_code \n  from supplier\n)\nUPDATE product p\nSET supplier_id = cte.id\nFROM cte\nWHERE p.temp_supplier_code = cte.supplier_code;\nWITH cte1 AS (\n    SELECT id, temp_taxon_id\n    FROM brand\n)\nUPDATE product p\nSET brand_id = cte1.id\nFROM cte1\nWHERE p.temp_taxon_id = cte1.temp_taxon_id;\nSELECT 'Update Supplier ID and Brand ID' as ID;",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_V2_PRODUCT_DB_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {
									"table_name": "product"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "addsuppliercodecolumn",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzurePostgreSqlSource",
								"query": "Alter table product add column temp_supplier_code varchar(200);\nSELECT 'Adding Supplier_Code' As Update",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_V2_PRODUCT_DB_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {
									"table_name": "product"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "RemovingUnwantedcolumnsfromproduct",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "updatesupplierIDandbrandID",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzurePostgreSqlSource",
								"query": "alter table product drop column temp_taxon_id;\r\nalter table product drop column temp_supplier_code;\r\nalter table brand drop column temp_taxon_id;\r\nSELECT 'Remove unwanted Columns' as Removed;",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_V2_PRODUCT_DB_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {
									"table_name": "product"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Product DB/brand and product pipelines"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_V1_PRODUCTION')]",
				"[concat(variables('factoryId'), '/datasets/DS_V2_PRODUCT_DB_PRODUCTION')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/product_barcode')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "PostgreSqlV2Source",
								"query": "select \n    id,\n    product_id,\n    barcode,\n    created_at,\n    updated_at\nfrom spree_product_barcodes \nOrder by id ASC;"
							},
							"sink": {
								"type": "AzurePostgreSQLSink",
								"writeBatchSize": 1000000,
								"writeBatchTimeout": "00:30:00",
								"writeMethod": "CopyCommand"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "id",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "id",
											"type": "Int32",
											"physicalType": "integer"
										}
									},
									{
										"source": {
											"name": "barcode",
											"type": "String",
											"physicalType": "character varying"
										},
										"sink": {
											"name": "barcode",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "product_id",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "product_id",
											"type": "Int32",
											"physicalType": "integer"
										}
									},
									{
										"source": {
											"name": "created_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										},
										"sink": {
											"name": "created_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										}
									},
									{
										"source": {
											"name": "updated_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										},
										"sink": {
											"name": "updated_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_V1_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_V2_PRODUCT_DB_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {
									"table_name": "product_barcode"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Product DB"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_V1_PRODUCTION')]",
				"[concat(variables('factoryId'), '/datasets/DS_V2_PRODUCT_DB_PRODUCTION')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/product_image')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "PostgreSqlV2Source",
								"query": "SELECT id,\n       viewable_id          AS product_id,\n       attachment_file_name AS file_name,\n       created_at,\n       updated_at,\n       1 as order\nFROM   spree_assets\nWHERE  viewable_type = 'Spree::Variant' \nOrder by id ASC;"
							},
							"sink": {
								"type": "AzurePostgreSQLSink",
								"writeBatchSize": 1000000,
								"writeBatchTimeout": "00:30:00",
								"writeMethod": "CopyCommand"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "id",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "id",
											"type": "Int32",
											"physicalType": "integer"
										}
									},
									{
										"source": {
											"name": "created_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										},
										"sink": {
											"name": "created_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										}
									},
									{
										"source": {
											"name": "updated_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										},
										"sink": {
											"name": "updated_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										}
									},
									{
										"source": {
											"name": "product_id",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "product_id",
											"type": "Int32",
											"physicalType": "integer"
										}
									},
									{
										"source": {
											"name": "file_name",
											"type": "String",
											"physicalType": "character varying"
										},
										"sink": {
											"name": "file_name",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "order",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "order",
											"type": "Int32",
											"physicalType": "integer"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_V1_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_V2_PRODUCT_DB_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {
									"table_name": "product_image"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Product DB"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_V1_PRODUCTION')]",
				"[concat(variables('factoryId'), '/datasets/DS_V2_PRODUCT_DB_PRODUCTION')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/product_price_versions')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "PostgreSqlV2Source",
								"query": "SELECT ppv.id,\n       ppv.created_at,\n       ppv.item_id AS inventory_modifier_id,\n       ppv.whodunnit AS user_id,\n\t   pim.product_id,\n\t   pim.rule_supermarket_id as supermarket_id,\n       ppv.object_changes,\n       (ppv.object_changes->'action_price'->>0)::numeric AS action_price,\n       (ppv.object_changes->'action_price'->>1)::numeric AS updated_action_price,\n       (ppv.object_changes->'action_sale_price'->>0)::numeric AS sale_price,\n       (ppv.object_changes->'action_sale_price'->>1)::numeric AS updated_sale_price,\n       ppv.event\nFROM spree_product_price_versions ppv\nleft join spree_product_inventory_modifiers pim\non pim.id = ppv.item_id\norder by ppv.id;"
							},
							"sink": {
								"type": "AzurePostgreSQLSink",
								"writeBatchSize": 1000000,
								"writeBatchTimeout": "00:30:00",
								"writeMethod": "CopyCommand"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_V1_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_V2_PRODUCT_DB_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {
									"table_name": {
										"value": "product_price_versions",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Product DB"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_V1_PRODUCTION')]",
				"[concat(variables('factoryId'), '/datasets/DS_V2_PRODUCT_DB_PRODUCTION')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/product_taxon')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "PostgreSqlV2Source",
								"query": "SELECT DISTINCT product_id,\n       taxon_id\nFROM   spree_products_taxons;"
							},
							"sink": {
								"type": "AzurePostgreSQLSink",
								"writeBatchSize": 1000000,
								"writeBatchTimeout": "00:30:00",
								"writeMethod": "CopyCommand"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_V1_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_V2_PRODUCT_DB_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {
									"table_name": "product_taxon"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Product DB"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_V1_PRODUCTION')]",
				"[concat(variables('factoryId'), '/datasets/DS_V2_PRODUCT_DB_PRODUCTION')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/promotion')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "PostgreSqlV2Source",
								"query": "WITH Cte AS (\n  SELECT DISTINCT\n    sp.id,\n    COALESCE(MAX(CASE WHEN spt.locale = 'en' THEN spt.name END), '') AS name_en,\n    MAX(CASE WHEN spt.locale = 'en' THEN spt.description END) AS description_en,\n    COALESCE(MAX(CASE WHEN spt.locale = 'ar' THEN spt.name END), '') AS name_ar,\n    MAX(CASE WHEN spt.locale = 'ar' THEN spt.description END) AS description_ar,\n    UPPER(REGEXP_REPLACE(TRANSLATE(MAX(CASE WHEN spt.locale = 'en' THEN spt.name END), ' ', '_'), '[^a-zA-Z0-9_]', '', 'g')) AS code,\n    sp.expires_at,\n    sp.starts_at,\n    COALESCE(sp.usage_limit, 0) AS usage_limit,\n    sp.match_policy,\n    sp.created_at,\n    sp.updated_at,\n    sp.per_code_usage_limit,\n    sp.apply_automatically,\n    sp.deleted_at,\n    TRUE AS is_visible\n  FROM spree_promotions AS sp\n  LEFT JOIN spree_promotion_translations AS spt ON spt.spree_promotion_id = sp.id\n  WHERE spt.name IS NOT NULL\n  GROUP BY sp.id\n  ORDER BY sp.id ASC\n)\nSELECT\n  id,\n  name_en,\n  description_en,\n  name_ar,\n  description_ar,\n  code,\n  expires_at,\n  starts_at,\n  usage_limit,\n  match_policy,\n  created_at,\n  updated_at,\n  per_code_usage_limit,\n  apply_automatically,\n  deleted_at,\n  is_visible\nFROM (\n  SELECT\n    id,\n    name_en,\n    description_en,\n    name_ar,\n    description_ar,\n    code,\n    expires_at,\n    starts_at,\n    usage_limit,\n    match_policy,\n    created_at,\n    updated_at,\n    per_code_usage_limit,\n    apply_automatically,\n    deleted_at,\n    is_visible,\n    ROW_NUMBER() OVER (PARTITION BY name_en ORDER BY id) AS rn\n  FROM Cte\n) AS temp\nWHERE rn = 1\nORDER BY name_en;"
							},
							"sink": {
								"type": "AzurePostgreSQLSink",
								"writeBatchSize": 1000000,
								"writeBatchTimeout": "00:30:00",
								"writeMethod": "CopyCommand"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "id",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "id",
											"type": "Int32",
											"physicalType": "integer"
										}
									},
									{
										"source": {
											"name": "name_en",
											"type": "String",
											"physicalType": "text"
										},
										"sink": {
											"name": "name_en",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "name_ar",
											"type": "String",
											"physicalType": "text"
										},
										"sink": {
											"name": "name_ar",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "description_en",
											"type": "String",
											"physicalType": "text"
										},
										"sink": {
											"name": "description_en",
											"type": "String",
											"physicalType": "text"
										}
									},
									{
										"source": {
											"name": "description_ar",
											"type": "String",
											"physicalType": "text"
										},
										"sink": {
											"name": "description_ar",
											"type": "String",
											"physicalType": "text"
										}
									},
									{
										"source": {
											"name": "per_code_usage_limit",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "per_code_usage_limit",
											"type": "Int32",
											"physicalType": "integer"
										}
									},
									{
										"source": {
											"name": "usage_limit",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "usage_limit",
											"type": "Int32",
											"physicalType": "integer"
										}
									},
									{
										"source": {
											"name": "starts_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										},
										"sink": {
											"name": "starts_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										}
									},
									{
										"source": {
											"name": "expires_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										},
										"sink": {
											"name": "expires_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										}
									},
									{
										"source": {
											"name": "apply_automatically",
											"type": "Boolean",
											"physicalType": "boolean"
										},
										"sink": {
											"name": "apply_automatically",
											"type": "Boolean",
											"physicalType": "boolean"
										}
									},
									{
										"source": {
											"name": "is_visible",
											"type": "Boolean",
											"physicalType": "boolean"
										},
										"sink": {
											"name": "is_visible",
											"type": "Boolean",
											"physicalType": "boolean"
										}
									},
									{
										"source": {
											"name": "created_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										},
										"sink": {
											"name": "created_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										}
									},
									{
										"source": {
											"name": "updated_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										},
										"sink": {
											"name": "updated_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										}
									},
									{
										"source": {
											"name": "deleted_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										},
										"sink": {
											"name": "deleted_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										}
									},
									{
										"source": {
											"name": "match_policy",
											"type": "String",
											"physicalType": "character varying"
										},
										"sink": {
											"name": "match_policy",
											"type": "String",
											"physicalType": "character varying"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_V1_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_V2_PRODUCT_DB_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {
									"table_name": "promotion"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Product DB"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_V1_PRODUCTION')]",
				"[concat(variables('factoryId'), '/datasets/DS_V2_PRODUCT_DB_PRODUCTION')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/recipe')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "PostgreSqlV2Source",
								"query": "SELECT \n    au.id,\n    COALESCE(sket_en.name, '') AS name_en,\n    COALESCE(sket_en.recipe, '') AS recipe_en,\n    au.calories,\n    au.cuisine_id,\n    CASE WHEN regexp_replace(au.servings, '\\D*(\\d+).*', '\\1') <> '' \n         THEN CAST(regexp_replace(au.servings, '\\D*(\\d+).*', '\\1') AS INTEGER)\n         ELSE 0 \n    END AS servings,\n    au.updated_at,\n    au.visible AS is_visible,\n    au.created_at,\n    COALESCE(sket_en.description, '') AS description_en,\n    COALESCE(sket_ar.name, '') AS name_ar,\n    COALESCE(sket_ar.recipe, '') AS recipe_ar,\n    COALESCE(sket_ar.description, '') AS description_ar,\n    1 AS country_id,\n    '' AS cuisines_banner_image_url,\n    '' AS recipe_banner_image_url,\n    '' AS app_home_image_url,\n    0 AS position\nFROM \n    spree_kitchen_recipes au\nLEFT JOIN \n    spree_kitchen_recipe_translations sket_en ON (sket_en.spree_kitchen_recipe_id = au.id AND sket_en.locale = 'en')\nLEFT JOIN \n    spree_kitchen_recipe_translations sket_ar ON (sket_ar.spree_kitchen_recipe_id = au.id AND sket_ar.locale = 'ar');"
							},
							"sink": {
								"type": "AzurePostgreSQLSink",
								"writeBatchSize": 1000000,
								"writeBatchTimeout": "00:30:00",
								"writeMethod": "CopyCommand"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "id",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "id",
											"type": "Int32",
											"physicalType": "integer"
										}
									},
									{
										"source": {
											"name": "name_en",
											"type": "String",
											"physicalType": "character varying"
										},
										"sink": {
											"name": "name_en",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "name_ar",
											"type": "String",
											"physicalType": "character varying"
										},
										"sink": {
											"name": "name_ar",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "country_id",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "country_id",
											"type": "Int32",
											"physicalType": "integer"
										}
									},
									{
										"source": {
											"name": "cuisine_id",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "cuisine_id",
											"type": "Int32",
											"physicalType": "integer"
										}
									},
									{
										"source": {
											"name": "servings",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "servings",
											"type": "Int32",
											"physicalType": "integer"
										}
									},
									{
										"source": {
											"name": "description_en",
											"type": "String",
											"physicalType": "character varying"
										},
										"sink": {
											"name": "description_en",
											"type": "String",
											"physicalType": "text"
										}
									},
									{
										"source": {
											"name": "description_ar",
											"type": "String",
											"physicalType": "character varying"
										},
										"sink": {
											"name": "description_ar",
											"type": "String",
											"physicalType": "text"
										}
									},
									{
										"source": {
											"name": "recipe_en",
											"type": "String",
											"physicalType": "text"
										},
										"sink": {
											"name": "recipe_en",
											"type": "String",
											"physicalType": "text"
										}
									},
									{
										"source": {
											"name": "recipe_ar",
											"type": "String",
											"physicalType": "text"
										},
										"sink": {
											"name": "recipe_ar",
											"type": "String",
											"physicalType": "text"
										}
									},
									{
										"source": {
											"name": "is_visible",
											"type": "Boolean",
											"physicalType": "boolean"
										},
										"sink": {
											"name": "is_visible",
											"type": "Boolean",
											"physicalType": "boolean"
										}
									},
									{
										"source": {
											"name": "calories",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "calories",
											"type": "Double",
											"physicalType": "double precision"
										}
									},
									{
										"source": {
											"name": "position",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "position",
											"type": "Int32",
											"physicalType": "integer"
										}
									},
									{
										"source": {
											"name": "app_home_image_url",
											"type": "String",
											"physicalType": "text"
										},
										"sink": {
											"name": "app_home_image_url",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "recipe_banner_image_url",
											"type": "String",
											"physicalType": "text"
										},
										"sink": {
											"name": "recipe_banner_image_url",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "cuisines_banner_image_url",
											"type": "String",
											"physicalType": "text"
										},
										"sink": {
											"name": "cuisines_banner_image_url",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "created_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										},
										"sink": {
											"name": "created_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										}
									},
									{
										"source": {
											"name": "updated_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										},
										"sink": {
											"name": "updated_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_V1_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_V2_PRODUCT_DB_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {
									"table_name": "recipe"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Product DB"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_V1_PRODUCTION')]",
				"[concat(variables('factoryId'), '/datasets/DS_V2_PRODUCT_DB_PRODUCTION')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/shopping_list_products')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "PostgreSqlV2Source",
								"query": "select \nswp.wishlist_id as shopping_list_id,\nsv.product_id\nFrom spree_wished_products swp\nleft join spree_variants sv on sv.id = swp.variant_id \ngroup by sv.product_id, swp.wishlist_id;"
							},
							"sink": {
								"type": "AzurePostgreSQLSink",
								"writeBatchSize": 1000000,
								"writeBatchTimeout": "00:30:00",
								"writeMethod": "CopyCommand"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "shopping_list_id",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "shopping_list_id",
											"type": "Int32",
											"physicalType": "integer"
										}
									},
									{
										"source": {
											"name": "product_id",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "product_id",
											"type": "Int32",
											"physicalType": "integer"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_V1_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_V2_PRODUCT_DB_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {
									"table_name": "shopping_list_products"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Product DB"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_V1_PRODUCTION')]",
				"[concat(variables('factoryId'), '/datasets/DS_V2_PRODUCT_DB_PRODUCTION')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/shopping_lists')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "PostgreSqlV2Source",
								"query": "select\n\tid,\n\tuser_id,\n\tname,\n\tcreated_at,\n\tupdated_at\nFrom spree_wishlists;"
							},
							"sink": {
								"type": "AzurePostgreSQLSink",
								"writeBatchSize": 1000000,
								"writeBatchTimeout": "00:30:00",
								"writeMethod": "CopyCommand"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "id",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "id",
											"type": "Int32",
											"physicalType": "integer"
										}
									},
									{
										"source": {
											"name": "user_id",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "user_id",
											"type": "Int32",
											"physicalType": "integer"
										}
									},
									{
										"source": {
											"name": "name",
											"type": "String",
											"physicalType": "character varying"
										},
										"sink": {
											"name": "name",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "created_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										},
										"sink": {
											"name": "created_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										}
									},
									{
										"source": {
											"name": "updated_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										},
										"sink": {
											"name": "updated_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_V1_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_V2_PRODUCT_DB_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {
									"table_name": "shopping_list"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Product DB"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_V1_PRODUCTION')]",
				"[concat(variables('factoryId'), '/datasets/DS_V2_PRODUCT_DB_PRODUCTION')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/store_credit')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "PostgreSqlV2Source",
								"query": "select \n\tid,\n\tuser_id,\n\tcategory_id as store_credit_category_id,\n\ttype_id as \tstore_credit_type_id,\n\tcreated_by_id,\n\tamount,\n\tamount_used,\n\tamount_authorized,\n\tcurrency,\n\tLEFT(memo,200) as memo,\n\tinvalidated_at,\n\texpires_at,\n\tcreated_at,\n\tupdated_at,\n\tdeleted_at\nFrom spree_store_credits;"
							},
							"sink": {
								"type": "AzurePostgreSQLSink",
								"writeBatchSize": 1000000,
								"writeBatchTimeout": "00:30:00",
								"writeMethod": "CopyCommand"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "id",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "id",
											"type": "Int32",
											"physicalType": "integer"
										}
									},
									{
										"source": {
											"name": "user_id",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "user_id",
											"type": "Int32",
											"physicalType": "integer"
										}
									},
									{
										"source": {
											"name": "created_by_id",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "created_by_id",
											"type": "Int32",
											"physicalType": "integer"
										}
									},
									{
										"source": {
											"name": "amount",
											"type": "Decimal",
											"physicalType": "numeric"
										},
										"sink": {
											"name": "amount",
											"type": "Double",
											"physicalType": "double precision"
										}
									},
									{
										"source": {
											"name": "amount_used",
											"type": "Decimal",
											"physicalType": "numeric"
										},
										"sink": {
											"name": "amount_used",
											"type": "Double",
											"physicalType": "double precision"
										}
									},
									{
										"source": {
											"name": "amount_authorized",
											"type": "Decimal",
											"physicalType": "numeric"
										},
										"sink": {
											"name": "amount_authorized",
											"type": "Double",
											"physicalType": "double precision"
										}
									},
									{
										"source": {
											"name": "currency",
											"type": "String",
											"physicalType": "character varying"
										},
										"sink": {
											"name": "currency",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "memo",
											"type": "String",
											"physicalType": "text"
										},
										"sink": {
											"name": "memo",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "invalidated_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										},
										"sink": {
											"name": "invalidated_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										}
									},
									{
										"source": {
											"name": "expires_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										},
										"sink": {
											"name": "expires_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										}
									},
									{
										"source": {
											"name": "created_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										},
										"sink": {
											"name": "created_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										}
									},
									{
										"source": {
											"name": "updated_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										},
										"sink": {
											"name": "updated_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										}
									},
									{
										"source": {
											"name": "deleted_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										},
										"sink": {
											"name": "deleted_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_V1_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_V2_ORDER_DB_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {
									"table_name": "store_credit"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Order DB"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_V1_PRODUCTION')]",
				"[concat(variables('factoryId'), '/datasets/DS_V2_ORDER_DB_PRODUCTION')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/store_credit_category')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "PostgreSqlV2Source",
								"query": "select\n\tid,\n\tname,\n\tavailable_to_admin,\n\tcreated_at,\n\tupdated_at\nFrom spree_store_credit_categories"
							},
							"sink": {
								"type": "AzurePostgreSQLSink",
								"writeBatchSize": 1000000,
								"writeBatchTimeout": "00:30:00",
								"writeMethod": "CopyCommand"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_V1_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_V2_ORDER_DB_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {
									"table_name": "store_credit_category"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Order DB"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_V1_PRODUCTION')]",
				"[concat(variables('factoryId'), '/datasets/DS_V2_ORDER_DB_PRODUCTION')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/store_credit_transaction')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "PostgreSqlV2Source",
								"query": "select\n\tid,\n\tstore_credit_id,\n\taction,\n\tamount,\n\tuser_total_amount,\n\tauthorization_code,\n\tupdate_reason_id,\n\toriginator_type,\n\toriginator_id,\n\tcurrency,\n\tCOALESCE(created_at,current_timestamp) as created_at,\n\tCOALESCE(updated_at,current_timestamp) as updated_at\nFrom spree_store_credit_events;"
							},
							"sink": {
								"type": "AzurePostgreSQLSink",
								"writeBatchSize": 1000000,
								"writeBatchTimeout": "00:30:00",
								"writeMethod": "CopyCommand"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_V1_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_V2_ORDER_DB_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {
									"table_name": "store_credit_transaction"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Order DB"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_V1_PRODUCTION')]",
				"[concat(variables('factoryId'), '/datasets/DS_V2_ORDER_DB_PRODUCTION')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/store_credit_type')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "PostgreSqlV2Source",
								"query": "select\n\tid,\n\tname,\n\tpriority,\n\tcreated_at,\n\tupdated_at\nFrom spree_store_credit_types;"
							},
							"sink": {
								"type": "AzurePostgreSQLSink",
								"writeBatchSize": 1000000,
								"writeBatchTimeout": "00:30:00",
								"writeMethod": "CopyCommand"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_V1_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_V2_ORDER_DB_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {
									"table_name": "store_credit_type"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Order DB"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_V1_PRODUCTION')]",
				"[concat(variables('factoryId'), '/datasets/DS_V2_ORDER_DB_PRODUCTION')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/store_credit_update_reason')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "store_credit_update_reason",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "PostgreSqlV2Source",
								"query": "select\n\tid,\n\tname,\n\tcreated_at,\n\tupdated_at\nFrom spree_store_credit_update_reasons;"
							},
							"sink": {
								"type": "AzurePostgreSQLSink",
								"writeBatchSize": 1000000,
								"writeBatchTimeout": "00:30:00",
								"writeMethod": "CopyCommand"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_V1_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_V2_ORDER_DB_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {
									"table_name": "store_credit_update_reason"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Order DB"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_V1_PRODUCTION')]",
				"[concat(variables('factoryId'), '/datasets/DS_V2_ORDER_DB_PRODUCTION')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/super_market_payment')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Lookup1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "PostgreSqlV2Source",
								"query": "SELECT\n  id AS super_market_id,\n  payment_id,\n  delivery_option_id\nFROM (\n  SELECT\n    id,\n    UNNEST(REGEXP_MATCHES(\n      REPLACE(\n        REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(payment_options::text, '^.*home_delivery:(.*)$', '\\1'), 'store_pick_up:.*$', ''), '\\n', ''),\n        '''(\\d+)''',\n        '\\1'\n      ),\n      '(\\d+)',\n      'g'\n    ))::INTEGER AS payment_id,\n    '1' AS delivery_option_id -- Home Delivery type id\n  FROM danube_supermarkets\n  WHERE payment_options::text LIKE '%home_delivery%'\n  UNION ALL\n  SELECT\n    id AS super_market_id,\n    UNNEST(REGEXP_MATCHES(\n      REPLACE(\n        REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(payment_options::text, '^.*store_pick_up:(.*)$', '\\1'), 'home_delivery:.*$', ''), '\\n', ''),\n        '''(\\d+)''',\n        '\\1'\n      ),\n      '(\\d+)',\n      'g'\n    ))::INTEGER AS payment_id,\n    '2' AS delivery_option_id -- Store Pickup Delivery type id\n  FROM danube_supermarkets\n  WHERE payment_options::text LIKE '%store_pick_up%'\n) AS subquery_alias\nORDER BY super_market_id;"
							},
							"sink": {
								"type": "AzurePostgreSQLSink",
								"writeBatchSize": 1000000,
								"writeBatchTimeout": "00:30:00",
								"writeMethod": "CopyCommand"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "super_market_id",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "super_market_id",
											"type": "Int32",
											"physicalType": "integer"
										}
									},
									{
										"source": {
											"name": "payment_id",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "payment_id",
											"type": "Int32",
											"physicalType": "integer"
										}
									},
									{
										"source": {
											"name": "delivery_option_id",
											"type": "String",
											"physicalType": "text"
										},
										"sink": {
											"name": "delivery_option_id",
											"type": "Int32",
											"physicalType": "integer"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_V1_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_V2_USER_DB_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {
									"table_name": "super_market_payment"
								}
							}
						]
					},
					{
						"name": "Lookup1",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzurePostgreSqlSource",
								"query": "Alter sequence super_market_payment_id_seq restart with 1;\nSelect 'Altering Sequence ID' as Update;",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_V2_USER_DB_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {
									"table_name": "supermarket_payment"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "User DB"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_V1_PRODUCTION')]",
				"[concat(variables('factoryId'), '/datasets/DS_V2_USER_DB_PRODUCTION')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/supermarket')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "supermarket_to_datalake",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "PostgreSqlV2Source",
								"query": "select\n   ds.id,\n   dst.name,\n\tconcat(dst.address1,' ',dst.address2) as address,\n    LEFT(COALESCE(REPLACE(REPLACE(ds.phone, '+966', ''), '+973', ''), ''), 16) AS mobile_number,\n   ds.country_id,\n   ds.created_at,\n   ds.state_id,\n   lower(dst.city) as city,\n   ds.updated_at,\n   ds.visible as is_visible,\n   ds.latitude,\n   ds.longitude,\n   ds.time_slots_schedule_time_offset_override AS time_slots_lead_time,\n   ds.express_fee AS express_delivery_fee,\n   ds.call_masking as call_mask,\n   ds.min_item_total_for_free_delivery as minimum_total_amount_for_free_delivery,\n   COALESCE(dst.description, '') as description\nfrom danube_supermarkets ds\nleft join danube_supermarket_translations dst on dst.danube_supermarket_id =ds.id and dst.locale='en'\norder by ds.id;"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings",
									"copyBehavior": "FlattenHierarchy"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "id",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "id",
											"type": "Int32",
											"physicalType": "INT_32"
										}
									},
									{
										"source": {
											"name": "name",
											"type": "String",
											"physicalType": "character varying"
										},
										"sink": {
											"name": "name",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "address",
											"type": "String",
											"physicalType": "text"
										},
										"sink": {
											"name": "address",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "mobile_number",
											"type": "String",
											"physicalType": "text"
										},
										"sink": {
											"name": "mobile_number",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "country_id",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "country_id",
											"type": "Int32",
											"physicalType": "INT_32"
										}
									},
									{
										"source": {
											"name": "created_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										},
										"sink": {
											"name": "created_at",
											"type": "DateTime",
											"physicalType": "INT_96"
										}
									},
									{
										"source": {
											"name": "state_id",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "state_id",
											"type": "Int32",
											"physicalType": "INT_32"
										}
									},
									{
										"source": {
											"name": "city",
											"type": "String",
											"physicalType": "text"
										},
										"sink": {
											"name": "city",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "updated_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										},
										"sink": {
											"name": "updated_at",
											"type": "DateTime",
											"physicalType": "INT_96"
										}
									},
									{
										"source": {
											"name": "is_visible",
											"type": "Boolean",
											"physicalType": "boolean"
										},
										"sink": {
											"name": "is_visible",
											"type": "Boolean",
											"physicalType": "BOOLEAN"
										}
									},
									{
										"source": {
											"name": "latitude",
											"type": "Double",
											"physicalType": "double precision"
										},
										"sink": {
											"name": "latitude",
											"type": "Double",
											"physicalType": "DOUBLE"
										}
									},
									{
										"source": {
											"name": "longitude",
											"type": "Double",
											"physicalType": "double precision"
										},
										"sink": {
											"name": "longitude",
											"type": "Double",
											"physicalType": "DOUBLE"
										}
									},
									{
										"source": {
											"name": "time_slots_lead_time",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "time_slots_lead_time",
											"type": "Int32",
											"physicalType": "INT_32"
										}
									},
									{
										"source": {
											"name": "express_delivery_fee",
											"type": "Decimal",
											"physicalType": "numeric"
										},
										"sink": {
											"name": "express_delivery_fee",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										}
									},
									{
										"source": {
											"name": "call_mask",
											"type": "Boolean",
											"physicalType": "boolean"
										},
										"sink": {
											"name": "call_mask",
											"type": "Boolean",
											"physicalType": "BOOLEAN"
										}
									},
									{
										"source": {
											"name": "minimum_total_amount_for_free_delivery",
											"type": "Decimal",
											"physicalType": "numeric"
										},
										"sink": {
											"name": "minimum_total_amount_for_free_delivery",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										}
									},
									{
										"source": {
											"name": "description",
											"type": "String",
											"physicalType": "text"
										},
										"sink": {
											"name": "description",
											"type": "String",
											"physicalType": "UTF8"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_V1_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_Intermiadate_Result",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "supermarket_to_datalake",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "supermarket",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"supermarket": {},
									"city": {},
									"StoreInDB": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Delete1",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "Data flow1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DS_Intermiadate_Result",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "User DB"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_V1_PRODUCTION')]",
				"[concat(variables('factoryId'), '/datasets/DS_Intermiadate_Result')]",
				"[concat(variables('factoryId'), '/dataflows/supermarket')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/supermarket_delivery_option')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "PostgreSqlV2Source",
								"query": "SELECT\n  id AS supermarket_id, \n  2 AS delivery_option_id\nFROM danube_supermarkets\nWHERE payment_options::text LIKE '%store_pick_up%'\n\nUNION\n\nSELECT\n  id,\n  1 AS delivery_option_id\nFROM danube_supermarkets\nWHERE payment_options::text LIKE '%home_delivery%';"
							},
							"sink": {
								"type": "AzurePostgreSQLSink",
								"writeBatchSize": 1000000,
								"writeBatchTimeout": "00:30:00",
								"writeMethod": "CopyCommand"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_V1_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_V2_USER_DB_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {
									"table_name": "supermarket_delivery_option"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "User DB"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_V1_PRODUCTION')]",
				"[concat(variables('factoryId'), '/datasets/DS_V2_USER_DB_PRODUCTION')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/supermarket_delivery_region')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Lookup1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "PostgreSqlV2Source",
								"query": "SELECT\n    supermarket_id,\n    2 AS delivery_type_id,\n    (\n        SELECT\n            ('[' || string_agg(format('[%s,%s]', coordinate->1, coordinate->0), ',') || ']')::json\n        FROM (\n            SELECT json_array_elements((ST_AsGeoJSON(coverage)::json->'coordinates')->0) AS coordinate\n        ) AS flattened\n    ) AS delivery_region,\n    ST_AsText(coverage) as delivery_area,\n    ST_X(ST_AsText(center)) AS center_longitude,\n    ST_Y(ST_AsText(center)) AS center_latitude,\n    '#DEE513' AS fill_color,\n    0.5 AS fill_color_opacity,\n    '#5704FC' AS border_color,\n    2 AS border_width\nFROM\n    danube_express_supermarkets;"
							},
							"sink": {
								"type": "AzurePostgreSQLSink",
								"writeBatchSize": 1000000,
								"writeBatchTimeout": "00:30:00",
								"writeMethod": "CopyCommand"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "supermarket_id",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "supermarket_id",
											"type": "Int32",
											"physicalType": "integer"
										}
									},
									{
										"source": {
											"name": "delivery_type_id",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "delivery_type_id",
											"type": "Int32",
											"physicalType": "integer"
										}
									},
									{
										"source": {
											"name": "delivery_region",
											"type": "String",
											"physicalType": "json"
										},
										"sink": {
											"name": "delivery_region",
											"type": "String",
											"physicalType": "text"
										}
									},
									{
										"source": {
											"name": "center_latitude",
											"type": "Double",
											"physicalType": "double precision"
										},
										"sink": {
											"name": "center_latitude",
											"type": "Double",
											"physicalType": "double precision"
										}
									},
									{
										"source": {
											"name": "center_longitude",
											"type": "Double",
											"physicalType": "double precision"
										},
										"sink": {
											"name": "center_longitude",
											"type": "Double",
											"physicalType": "double precision"
										}
									},
									{
										"source": {
											"name": "fill_color",
											"type": "String",
											"physicalType": "text"
										},
										"sink": {
											"name": "fill_color",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "fill_color_opacity",
											"type": "Decimal",
											"physicalType": "numeric"
										},
										"sink": {
											"name": "fill_color_opacity",
											"type": "Double",
											"physicalType": "double precision"
										}
									},
									{
										"source": {
											"name": "border_color",
											"type": "String",
											"physicalType": "text"
										},
										"sink": {
											"name": "border_color",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "border_width",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "border_width",
											"type": "Int32",
											"physicalType": "integer"
										}
									},
									{
										"source": {
											"name": "delivery_area",
											"type": "String",
											"physicalType": "text"
										},
										"sink": {
											"name": "delivery_area",
											"type": "String",
											"physicalType": "character varying"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_V1_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_V2_USER_DB_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {
									"table_name": "supermarket_delivery_region"
								}
							}
						]
					},
					{
						"name": "Copy data2",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "PostgreSqlV2Source",
								"query": "WITH collected_geometries AS (\n    SELECT \n        szm.zone_id,\n        ST_ASText(sd.region) AS geom,\n\t\tAVG(ST_X(sd.center::geometry)) AS center_longitude,\n        AVG(ST_Y(sd.center::geometry)) AS center_latitude,\n\t\tROW_NUMBER() over (partition by zone_id order by zone_id) as row_num\n\t\n    FROM \n        spree_districts sd\n    JOIN \n        spree_zone_members szm ON sd.id = szm.zoneable_id\n    WHERE \n        sd.visible = true\n    GROUP BY \n        szm.zone_id, sd.region\n), filtered_geometries AS(\nSELECT zone_id,geom,center_longitude,center_latitude\nFROM collected_geometries\nwhere row_num = 1)\nSELECT \n    sz.id,\n    coalesce(ds.id) AS supermarket_id,\n    1 AS delivery_type_id,\n    (\n\tSELECT\n            ('[' || string_agg(format('[%s,%s]', coordinate->1, coordinate->0), ',') || ']')::json\n        FROM (\n            SELECT json_array_elements((ST_AsGeoJSON(ST_GeometryN(cg.geom,1))::json->'coordinates')->0) AS coordinate\n        ) AS flattened\n    ) AS delivery_region,\n    ST_ASText(geom) as delivery_area,\n    cg.center_longitude,\n    cg.center_latitude,\n    '#DEE513' AS fill_color,\n    0.5 AS fill_color_opacity,\n    '#5704FC' AS border_color,\n    2 AS border_width\nFROM \n    spree_zones sz\nLEFT JOIN \n    danube_supermarkets ds ON sz.id = ds.zone_id AND ds.supermarket_type IN ('regular', 'regular_express')\nLEFT JOIN \n    filtered_geometries cg ON sz.id = cg.zone_id\nwhere geom is not null\nand ds.id is not null"
							},
							"sink": {
								"type": "AzurePostgreSQLSink",
								"writeBatchSize": 1000000,
								"writeBatchTimeout": "00:30:00",
								"writeMethod": "CopyCommand"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "id",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "id",
											"type": "Int32",
											"physicalType": "integer"
										}
									},
									{
										"source": {
											"name": "supermarket_id",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "supermarket_id",
											"type": "Int32",
											"physicalType": "integer"
										}
									},
									{
										"source": {
											"name": "delivery_type_id",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "delivery_type_id",
											"type": "Int32",
											"physicalType": "integer"
										}
									},
									{
										"source": {
											"name": "delivery_region",
											"type": "String",
											"physicalType": "json"
										},
										"sink": {
											"name": "delivery_region",
											"type": "String",
											"physicalType": "text"
										}
									},
									{
										"source": {
											"name": "center_latitude",
											"type": "Double",
											"physicalType": "double precision"
										},
										"sink": {
											"name": "center_latitude",
											"type": "Double",
											"physicalType": "double precision"
										}
									},
									{
										"source": {
											"name": "center_longitude",
											"type": "Double",
											"physicalType": "double precision"
										},
										"sink": {
											"name": "center_longitude",
											"type": "Double",
											"physicalType": "double precision"
										}
									},
									{
										"source": {
											"name": "fill_color",
											"type": "String",
											"physicalType": "text"
										},
										"sink": {
											"name": "fill_color",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "fill_color_opacity",
											"type": "Decimal",
											"physicalType": "numeric"
										},
										"sink": {
											"name": "fill_color_opacity",
											"type": "Double",
											"physicalType": "double precision"
										}
									},
									{
										"source": {
											"name": "border_color",
											"type": "String",
											"physicalType": "text"
										},
										"sink": {
											"name": "border_color",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "border_width",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "border_width",
											"type": "Int32",
											"physicalType": "integer"
										}
									},
									{
										"source": {
											"name": "delivery_area",
											"type": "String",
											"physicalType": "text"
										},
										"sink": {
											"name": "delivery_area",
											"type": "String",
											"physicalType": "character varying"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_V1_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_V2_USER_DB_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {
									"table_name": "supermarket_delivery_region"
								}
							}
						]
					},
					{
						"name": "Lookup1",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Copy data2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzurePostgreSqlSource",
								"query": "DO $$ \nDECLARE\n    max_id INTEGER;\nBEGIN\n    -- Get the maximum id from the supermarket_delivery_region table\n    SELECT max(id) INTO max_id FROM supermarket_delivery_region;\n    \n    -- Restart the sequence with the max_id + 1\n    EXECUTE 'ALTER SEQUENCE supermarket_delivery_region_id_seq RESTART WITH ' || (max_id + 1);\nEND $$;\n\nSelect 'Reset Super Market' As Update;",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_V2_USER_DB_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {
									"table_name": "supermarket_delivery_region"
								}
							},
							"firstRowOnly": false
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "User DB"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_V1_PRODUCTION')]",
				"[concat(variables('factoryId'), '/datasets/DS_V2_USER_DB_PRODUCTION')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/supermarket_delivery_type')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "PostgreSqlV2Source",
								"query": "  select * from (SELECT \n      id AS supermarket_id,\n      1 AS delivery_type_id\n  FROM danube_supermarkets\n  WHERE supermarket_type IN ('regular', 'regular_and_express')\n  UNION\n  SELECT \n      id AS supermarket_id,\n      2 AS delivery_type_id\n  FROM danube_supermarkets\n  WHERE supermarket_type IN ('express', 'regular_and_express')) as ds order by supermarket_id asc;"
							},
							"sink": {
								"type": "AzurePostgreSQLSink",
								"writeBatchSize": 1000000,
								"writeBatchTimeout": "00:30:00",
								"writeMethod": "CopyCommand"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_V1_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_V2_USER_DB_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {
									"table_name": "supermarket_delivery_type"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "User DB"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_V1_PRODUCTION')]",
				"[concat(variables('factoryId'), '/datasets/DS_V2_USER_DB_PRODUCTION')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/supplier')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Lookup1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "PostgreSqlV2Source",
								"query": "SELECT \n\t  REGEXP_REPLACE(MAX(COALESCE(spt.supplier_name,'')), '-[0-9]+$', '') AS name,\n-- \t  UPPER(REGEXP_REPLACE(TRANSLATE(MAX(spt.supplier_name), ' ', '_'), '[^a-zA-Z0-9_]', '', 'g')) as code,\n\t  LEFT(COALESCE(spt.code, ''), 10) AS code,\n\t  MAX(spt.created_at) as created_at,\n\t  MAX(spt.updated_at) as updated_at,\n\t  MAX(spt.deleted_at) as deleted_at\n\tFROM \n\t  (SELECT\n\t\tspree_product_id,\n\t\tMAX(CASE WHEN locale = 'en' THEN manufacturer END) as supplier_name,\n\t\tMAX(CASE WHEN locale = 'ar' THEN manufacturer END) as code,\n\t\tMAX(created_at) as created_at,\n\t\tMAX(updated_at) as updated_at,\n\t\tMAX(deleted_at) as deleted_at\n\t  FROM spree_product_translations\n\t  WHERE manufacturer IS NOT NULL\n\t  GROUP BY spree_product_id) as spt\n\tGROUP BY spt.code;"
							},
							"sink": {
								"type": "AzurePostgreSQLSink",
								"writeBatchSize": 1000000,
								"writeBatchTimeout": "00:30:00",
								"writeMethod": "CopyCommand"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "created_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										},
										"sink": {
											"name": "created_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										}
									},
									{
										"source": {
											"name": "updated_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										},
										"sink": {
											"name": "updated_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										}
									},
									{
										"source": {
											"name": "deleted_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										},
										"sink": {
											"name": "deleted_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										}
									},
									{
										"source": {
											"name": "code",
											"type": "String",
											"physicalType": "text"
										},
										"sink": {
											"name": "code",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "name",
											"type": "String",
											"physicalType": "text"
										},
										"sink": {
											"name": "name",
											"type": "String",
											"physicalType": "character varying"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_V1_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_V2_PRODUCT_DB_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {
									"table_name": "supplier"
								}
							}
						]
					},
					{
						"name": "Lookup1",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzurePostgreSqlSource",
								"query": "alter sequence supplier_id_seq restart with 1;\nSelect 'Altering Sequence ID' As Update;",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_V2_PRODUCT_DB_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {
									"table_name": "supplier"
								}
							},
							"firstRowOnly": false
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Product DB"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_V1_PRODUCTION')]",
				"[concat(variables('factoryId'), '/datasets/DS_V2_PRODUCT_DB_PRODUCTION')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/taxon')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "PostgreSqlV2Source",
								"query": "SELECT\n    st.id,\n    st.parent_id AS parent_id,\n    st.position,\n    MAX(CASE WHEN stt.locale = 'en' THEN stt.name END) as name,\n    COALESCE(MAX(CASE WHEN stt.locale = 'en' THEN stt.permalink END), '') as permalink,\n    st.taxonomy_id,\n    st.created_at,\n    st.updated_at,\n    MAX(CASE WHEN stt.locale = 'en' THEN stt.meta_title END) as meta_title,\n    MAX(CASE WHEN stt.locale = 'en' THEN stt.meta_description END) as meta_description,\n    MAX(CASE WHEN stt.locale = 'en' THEN stt.meta_keywords END) as meta_keywords,\n    st.visible,\n    Date(st.start_time) AS start_date,\n    Cast( Substring(To_char(st.start_time, 'HH24:MI:SS'), 1, 8)  AS text) AS start_time,\n    Date(st.end_time) AS end_date,\n    Cast(Substring(To_char(st.end_time, 'HH24:MI:SS'), 1, 8) AS text) AS end_time,\n    st.product_text_tag_en,\n    st.product_text_tag_ar,\n    COALESCE(st.tag_to_show, '') AS tag_to_show,\n    st.visible_only_for_subscriber,\n    MAX(CASE WHEN stt.locale = 'ar' THEN stt.name END) as name_ar,\n    COALESCE(MAX(CASE WHEN stt.locale = 'ar' THEN stt.permalink END), '') as permalink_ar,\n    MAX(CASE WHEN stt.locale = 'ar' THEN stt.meta_title END) as meta_title_ar,\n    MAX(CASE WHEN stt.locale = 'ar' THEN stt.meta_description END) as meta_description_ar,\n    MAX(CASE WHEN stt.locale = 'ar' THEN stt.meta_keywords END) as meta_keywords_ar,\n    '' as pretty_name,\n    '' as pretty_name_ar,\n    'false' as featured\nFROM\n    spree_taxons st\nLEFT JOIN spree_taxon_translations stt on stt.spree_taxon_id = st.id\nGROUP BY\n    st.id;"
							},
							"sink": {
								"type": "AzurePostgreSQLSink",
								"writeBatchSize": 1000000,
								"writeBatchTimeout": "00:30:00",
								"writeMethod": "CopyCommand"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "id",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "id",
											"type": "Int32",
											"physicalType": "integer"
										}
									},
									{
										"source": {
											"name": "name",
											"type": "String",
											"physicalType": "text"
										},
										"sink": {
											"name": "name",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "position",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "position",
											"type": "Int32",
											"physicalType": "integer"
										}
									},
									{
										"source": {
											"name": "parent_id",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "parent_id",
											"type": "Int32",
											"physicalType": "integer"
										}
									},
									{
										"source": {
											"name": "taxonomy_id",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "taxonomy_id",
											"type": "Int32",
											"physicalType": "integer"
										}
									},
									{
										"source": {
											"name": "created_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										},
										"sink": {
											"name": "created_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										}
									},
									{
										"source": {
											"name": "updated_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										},
										"sink": {
											"name": "updated_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										}
									},
									{
										"source": {
											"name": "visible",
											"type": "Boolean",
											"physicalType": "boolean"
										},
										"sink": {
											"name": "visible",
											"type": "Boolean",
											"physicalType": "boolean"
										}
									},
									{
										"source": {
											"name": "permalink",
											"type": "String",
											"physicalType": "text"
										},
										"sink": {
											"name": "permalink",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "start_date",
											"type": "DateTime",
											"physicalType": "date"
										},
										"sink": {
											"name": "start_date",
											"type": "DateTime",
											"physicalType": "date"
										}
									},
									{
										"source": {
											"name": "end_date",
											"type": "DateTime",
											"physicalType": "date"
										},
										"sink": {
											"name": "end_date",
											"type": "DateTime",
											"physicalType": "date"
										}
									},
									{
										"source": {
											"name": "start_time",
											"type": "String",
											"physicalType": "text"
										},
										"sink": {
											"name": "start_time",
											"type": "TimeSpan",
											"physicalType": "time without time zone"
										}
									},
									{
										"source": {
											"name": "end_time",
											"type": "String",
											"physicalType": "text"
										},
										"sink": {
											"name": "end_time",
											"type": "TimeSpan",
											"physicalType": "time without time zone"
										}
									},
									{
										"source": {
											"name": "product_text_tag_en",
											"type": "String",
											"physicalType": "character varying"
										},
										"sink": {
											"name": "product_text_tag_en",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "product_text_tag_ar",
											"type": "String",
											"physicalType": "character varying"
										},
										"sink": {
											"name": "product_text_tag_ar",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "tag_to_show",
											"type": "String",
											"physicalType": "character varying"
										},
										"sink": {
											"name": "tag_to_show",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "visible_only_for_subscriber",
											"type": "Boolean",
											"physicalType": "boolean"
										},
										"sink": {
											"name": "visible_only_for_subscriber",
											"type": "Boolean",
											"physicalType": "boolean"
										}
									},
									{
										"source": {
											"name": "meta_title",
											"type": "String",
											"physicalType": "text"
										},
										"sink": {
											"name": "meta_title",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "meta_description",
											"type": "String",
											"physicalType": "text"
										},
										"sink": {
											"name": "meta_description",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "meta_keywords",
											"type": "String",
											"physicalType": "text"
										},
										"sink": {
											"name": "meta_keywords",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "name_ar",
											"type": "String",
											"physicalType": "text"
										},
										"sink": {
											"name": "name_ar",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "permalink_ar",
											"type": "String",
											"physicalType": "text"
										},
										"sink": {
											"name": "permalink_ar",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "meta_title_ar",
											"type": "String",
											"physicalType": "text"
										},
										"sink": {
											"name": "meta_title_ar",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "meta_description_ar",
											"type": "String",
											"physicalType": "text"
										},
										"sink": {
											"name": "meta_description_ar",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "meta_keywords_ar",
											"type": "String",
											"physicalType": "text"
										},
										"sink": {
											"name": "meta_keywords_ar",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "featured",
											"type": "String",
											"physicalType": "text"
										},
										"sink": {
											"name": "featured",
											"type": "Boolean",
											"physicalType": "boolean"
										}
									},
									{
										"source": {
											"name": "pretty_name_ar",
											"type": "String",
											"physicalType": "text"
										},
										"sink": {
											"name": "pretty_name_ar",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "pretty_name",
											"type": "String",
											"physicalType": "text"
										},
										"sink": {
											"name": "pretty_name",
											"type": "String",
											"physicalType": "character varying"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_V1_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_V2_PRODUCT_DB_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {
									"table_name": "taxon"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Product DB"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_V1_PRODUCTION')]",
				"[concat(variables('factoryId'), '/datasets/DS_V2_PRODUCT_DB_PRODUCTION')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/taxon_country')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "PostgreSqlV2Source",
								"query": "SELECT \r\n    a.taxon_id,\r\n    CASE \r\n        WHEN au.name = 'Danube' THEN (SELECT id FROM spree_countries WHERE name = 'Saudi Arabia')\r\n        ELSE aua.id \r\n    END AS country_id\r\nFROM spree_tenants_taxons a\r\nLEFT JOIN spree_tenants au ON a.tenant_id = au.id\r\nLEFT JOIN spree_countries aua ON aua.name = au.name;"
							},
							"sink": {
								"type": "AzurePostgreSQLSink",
								"writeBatchSize": 1000000,
								"writeBatchTimeout": "00:30:00",
								"writeMethod": "CopyCommand"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "taxon_id",
											"type": "Int64",
											"physicalType": "bigint"
										},
										"sink": {
											"name": "taxon_id",
											"type": "Int32",
											"physicalType": "integer"
										}
									},
									{
										"source": {
											"name": "country_id",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "country_id",
											"type": "Int32",
											"physicalType": "integer"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_V1_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_V2_PRODUCT_DB_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {
									"table_name": "taxon_country"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Product DB"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_V1_PRODUCTION')]",
				"[concat(variables('factoryId'), '/datasets/DS_V2_PRODUCT_DB_PRODUCTION')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/taxon_group')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "PostgreSqlV2Source",
								"query": "select \n    id,\n    name,\n    created_at,\n    updated_at,\n    key,\n\ttrue as visible\nfrom spree_taxon_groups;"
							},
							"sink": {
								"type": "AzurePostgreSQLSink",
								"writeBatchSize": 1000000,
								"writeBatchTimeout": "00:30:00",
								"writeMethod": "CopyCommand"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "id",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "id",
											"type": "Int32",
											"physicalType": "integer"
										}
									},
									{
										"source": {
											"name": "name",
											"type": "String",
											"physicalType": "character varying"
										},
										"sink": {
											"name": "name",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "key",
											"type": "String",
											"physicalType": "character varying"
										},
										"sink": {
											"name": "key",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "visible",
											"type": "Boolean",
											"physicalType": "boolean"
										},
										"sink": {
											"name": "visible",
											"type": "Boolean",
											"physicalType": "boolean"
										}
									},
									{
										"source": {
											"name": "created_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										},
										"sink": {
											"name": "created_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										}
									},
									{
										"source": {
											"name": "updated_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										},
										"sink": {
											"name": "updated_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_V1_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_V2_PRODUCT_DB_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {
									"table_name": "taxon_group"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Product DB"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_V1_PRODUCTION')]",
				"[concat(variables('factoryId'), '/datasets/DS_V2_PRODUCT_DB_PRODUCTION')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/taxon_group_membership')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "PostgreSqlV2Source",
								"query": "select \n    taxon_group_id,\n    taxon_id,\n    position\nfrom spree_taxon_group_memberships;"
							},
							"sink": {
								"type": "AzurePostgreSQLSink",
								"writeBatchSize": 1000000,
								"writeBatchTimeout": "00:30:00",
								"writeMethod": "CopyCommand"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "taxon_group_id",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "taxon_group_id",
											"type": "Int32",
											"physicalType": "integer"
										}
									},
									{
										"source": {
											"name": "taxon_id",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "taxon_id",
											"type": "Int32",
											"physicalType": "integer"
										}
									},
									{
										"source": {
											"name": "position",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "position",
											"type": "Int32",
											"physicalType": "integer"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_V1_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_V2_PRODUCT_DB_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {
									"table_name": "taxon_group_membership"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Product DB"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_V1_PRODUCTION')]",
				"[concat(variables('factoryId'), '/datasets/DS_V2_PRODUCT_DB_PRODUCTION')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/taxonomies')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "PostgreSqlV2Source",
								"query": "select st.id,\n        stt.name,\n        st.created_at, \n        st.updated_at,\n        st.position,\n        1 AS category_id\nfrom spree_taxonomies st\nleft join spree_taxonomy_translations stt\non st.id = stt.spree_taxonomy_id\nand locale='en';"
							},
							"sink": {
								"type": "AzurePostgreSQLSink",
								"writeBatchSize": 1000000,
								"writeBatchTimeout": "00:30:00",
								"writeMethod": "CopyCommand"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "id",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "id",
											"type": "Int32",
											"physicalType": "integer"
										}
									},
									{
										"source": {
											"name": "created_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										},
										"sink": {
											"name": "created_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										}
									},
									{
										"source": {
											"name": "updated_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										},
										"sink": {
											"name": "updated_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										}
									},
									{
										"source": {
											"name": "name",
											"type": "String",
											"physicalType": "character varying"
										},
										"sink": {
											"name": "name",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "position",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "position",
											"type": "Int32",
											"physicalType": "integer"
										}
									},
									{
										"source": {
											"name": "category_id",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "category_id",
											"type": "Int32",
											"physicalType": "integer"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_V1_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_V2_PRODUCT_DB_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {
									"table_name": "taxonomies"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Product DB"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_V1_PRODUCTION')]",
				"[concat(variables('factoryId'), '/datasets/DS_V2_PRODUCT_DB_PRODUCTION')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/time_slot')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "time_slot table",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Lookup1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "PostgreSqlV2Source",
								"query": "SELECT \n    spree_shipping_method_id AS delivery_option_id, \n    CASE \n        WHEN dtss.day_of_week = 0 THEN 'sunday' \n        WHEN dtss.day_of_week = 1 THEN 'monday' \n        WHEN dtss.day_of_week = 2 THEN 'tuesday' \n        WHEN dtss.day_of_week = 3 THEN 'wednesday' \n        WHEN dtss.day_of_week = 4 THEN 'thursday' \n        WHEN dtss.day_of_week = 5 THEN 'friday' \n        WHEN dtss.day_of_week = 6 THEN 'saturday' \n        ELSE '' \n    END AS day_of_week, \n    cast(dts.start_time as text), \n    cast(dts.end_time as text), \n    dts.enabled, \n    1 AS country_id \nFROM \n    danube_time_slots_schedules dtss \nLEFT JOIN \n    danube_time_slots dts ON dtss.time_slot_id = dts.id \nwhere dts.enabled\nGROUP BY \n    dtss.time_slot_id, \n    dtss.spree_shipping_method_id, \n    dtss.day_of_week, \n    dts.start_time, \n    dts.end_time, \n    dts.enabled;"
							},
							"sink": {
								"type": "AzurePostgreSQLSink",
								"writeBatchSize": 1000000,
								"writeBatchTimeout": "00:30:00",
								"writeMethod": "CopyCommand"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "start_time",
											"type": "String",
											"physicalType": "text"
										},
										"sink": {
											"name": "start_time",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "end_time",
											"type": "String",
											"physicalType": "text"
										},
										"sink": {
											"name": "end_time",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "country_id",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "country_id",
											"type": "Int32",
											"physicalType": "integer"
										}
									},
									{
										"source": {
											"name": "delivery_option_id",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "delivery_option_id",
											"type": "Int32",
											"physicalType": "integer"
										}
									},
									{
										"source": {
											"name": "day_of_week",
											"type": "String",
											"physicalType": "text"
										},
										"sink": {
											"name": "day_of_week",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "enabled",
											"type": "Boolean",
											"physicalType": "boolean"
										},
										"sink": {
											"name": "is_enabled",
											"type": "Boolean",
											"physicalType": "boolean"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_V1_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_V2_USER_DB_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {
									"table_name": "time_slot"
								}
							}
						]
					},
					{
						"name": "Lookup1",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzurePostgreSqlSource",
								"query": "alter sequence time_slot_id_seq restart with 1;\nSelect 'Altering Sequence ID' as Update;",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_V2_USER_DB_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {
									"table_name": "time_slot"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "User DB"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_V1_PRODUCTION')]",
				"[concat(variables('factoryId'), '/datasets/DS_V2_USER_DB_PRODUCTION')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/user')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "PostgreSqlV2Source",
								"query": "with cte as\r\n(SELECT\r\n  u.id,\r\n  CASE\r\n    WHEN u.deleted_at IS NOT NULL THEN TRUE\r\n    ELSE FALSE\r\n  END AS is_deleted,\r\n  u.created_at,\r\n  u.updated_at,\r\n  LEFT(COALESCE(u.first_name, ''), 40) AS first_name,\r\n  LEFT(COALESCE(u.last_name, ''), 40) AS last_name,\r\n  u.email,\r\n  'others' as gender,\r\n  COALESCE(CONCAT('+', u.mobile_number_country_code),'') AS country_code,\r\n  LEFT(COALESCE(CASE\r\n    WHEN u.mobile_phone_number LIKE CONCAT(\r\n      '+', u.mobile_number_country_code,\r\n      '%'\r\n      ) THEN SUBSTRING(\r\n      u.mobile_phone_number,\r\n      CHAR_LENGTH(u.mobile_number_country_code) + 2\r\n      )\r\n    WHEN u.mobile_phone_number LIKE CONCAT(u.mobile_number_country_code, '%') THEN SUBSTRING(\r\n      u.mobile_phone_number,\r\n      CHAR_LENGTH(u.mobile_number_country_code) + 1\r\n      )\r\n    ELSE COALESCE(u.mobile_phone_number, '')\r\n  END, ''), 16) AS mobile_number,\r\n  cast(u.dob as Text) as dob ,\r\n  COALESCE(u.referral_code, '') AS referral_code,\r\n  CASE WHEN u.locale ='en' THEN 1\r\n\tELSE 2\r\n   END AS language_id,\r\n  a.city,\r\n  a.latitude,\r\n  a.longitude,\r\n--   when country_id is '0' updated as '1' \r\n  CASE\r\n    WHEN a.country_id='0' THEN '1'\r\n    ELSE a.country_id\r\n  END AS country_id,\r\n  True as receive_marketing_promotions,\r\n  case \r\n  \twhen sua.provider = 'google_oauth2' then 'google'\r\n\telse sua.provider end as login_type,\r\n\tsua.uid as social_id,\r\n\t0 as balance,\r\n\tu.blacklisted_at,\r\n\tu.blacklisted_reason,\r\n\tROW_NUMBER() over (partition by u.id order by sua.updated_at desc) as rn\r\n\r\nFROM spree_users u\r\nLEFT JOIN spree_user_addresses ua ON u.id = ua.user_id AND ua.default = TRUE\r\nLEFT JOIN spree_addresses a ON ua.address_id = a.id\r\nleft join spree_user_authentications sua on u.id = sua.user_id \r\nORDER BY u.id ASC)\r\n\r\nselect id, is_deleted, created_at, updated_at, first_name, last_name, email, gender, country_code, mobile_number, dob, referral_code, language_id, city,\r\n\tlatitude, longitude, country_id, receive_marketing_promotions, login_type, social_id, balance, blacklisted_at, blacklisted_reason\r\n\tfrom cte \r\n\twhere rn = 1;"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings",
									"copyBehavior": "PreserveHierarchy"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"logSettings": {
								"enableCopyActivityLog": true,
								"copyActivityLogSettings": {
									"logLevel": "Warning",
									"enableReliableLogging": false
								},
								"logLocationSettings": {
									"linkedServiceName": {
										"referenceName": "LS_CrossDB_Connection_Storage",
										"type": "LinkedServiceReference"
									}
								}
							},
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "id",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "id",
											"type": "Int32",
											"physicalType": "INT_32"
										}
									},
									{
										"source": {
											"name": "is_deleted",
											"type": "Boolean",
											"physicalType": "boolean"
										},
										"sink": {
											"name": "is_deleted",
											"type": "Boolean",
											"physicalType": "BOOLEAN"
										}
									},
									{
										"source": {
											"name": "created_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										},
										"sink": {
											"name": "created_at",
											"type": "DateTime",
											"physicalType": "INT_96"
										}
									},
									{
										"source": {
											"name": "updated_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										},
										"sink": {
											"name": "updated_at",
											"type": "DateTime",
											"physicalType": "INT_96"
										}
									},
									{
										"source": {
											"name": "first_name",
											"type": "String",
											"physicalType": "text"
										},
										"sink": {
											"name": "first_name",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "last_name",
											"type": "String",
											"physicalType": "text"
										},
										"sink": {
											"name": "last_name",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "email",
											"type": "String",
											"physicalType": "character varying"
										},
										"sink": {
											"name": "email",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "gender",
											"type": "String",
											"physicalType": "text"
										},
										"sink": {
											"name": "gender",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "country_code",
											"type": "String",
											"physicalType": "text"
										},
										"sink": {
											"name": "country_code",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "mobile_number",
											"type": "String",
											"physicalType": "text"
										},
										"sink": {
											"name": "mobile_number",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "dob",
											"type": "String",
											"physicalType": "text"
										},
										"sink": {
											"name": "dob",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "referral_code",
											"type": "String",
											"physicalType": "character varying"
										},
										"sink": {
											"name": "referral_code",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "language_id",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "language_id",
											"type": "Int32",
											"physicalType": "INT_32"
										}
									},
									{
										"source": {
											"name": "city",
											"type": "String",
											"physicalType": "character varying"
										},
										"sink": {
											"name": "city",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "latitude",
											"type": "Double",
											"physicalType": "double precision"
										},
										"sink": {
											"name": "latitude",
											"type": "Double",
											"physicalType": "DOUBLE"
										}
									},
									{
										"source": {
											"name": "longitude",
											"type": "Double",
											"physicalType": "double precision"
										},
										"sink": {
											"name": "longitude",
											"type": "Double",
											"physicalType": "DOUBLE"
										}
									},
									{
										"source": {
											"name": "country_id",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "country_id",
											"type": "Int32",
											"physicalType": "INT_32"
										}
									},
									{
										"source": {
											"name": "receive_marketing_promotions",
											"type": "Boolean",
											"physicalType": "boolean"
										},
										"sink": {
											"name": "receive_marketing_promotions",
											"type": "Boolean",
											"physicalType": "BOOLEAN"
										}
									},
									{
										"source": {
											"name": "login_type",
											"type": "String",
											"physicalType": "character varying"
										},
										"sink": {
											"name": "login_type",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "social_id",
											"type": "String",
											"physicalType": "character varying"
										},
										"sink": {
											"name": "social_id",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "balance",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "balance",
											"type": "Int32",
											"physicalType": "INT_32"
										}
									},
									{
										"source": {
											"name": "blacklisted_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										},
										"sink": {
											"name": "blacklisted_at",
											"type": "DateTime",
											"physicalType": "INT_96"
										}
									},
									{
										"source": {
											"name": "blacklisted_reason",
											"type": "String",
											"physicalType": "character varying"
										},
										"sink": {
											"name": "blacklisted_reason",
											"type": "String",
											"physicalType": "UTF8"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_V1_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_Intermiadate_Result",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Copy data1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "user",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"city": {},
									"StoreInDB": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "User DB"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_V1_PRODUCTION')]",
				"[concat(variables('factoryId'), '/datasets/DS_Intermiadate_Result')]",
				"[concat(variables('factoryId'), '/dataflows/user')]",
				"[concat(variables('factoryId'), '/linkedServices/LS_CrossDB_Connection_Storage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_Intermiadate_Result')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_CrossDB_Connection_Storage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "production-migration"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_CrossDB_Connection_Storage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_V1_PRODUCTION')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_V1_PRODUCTION",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "PostgreSqlV2Table",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_V1_PRODUCTION')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_V2_AUTH_DB_PRODUCTION')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_V2_AUTH_DB_PRODUCTION_SERVER",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"table_name": {
						"type": "string"
					}
				},
				"folder": {
					"name": "V2 Datasets Production"
				},
				"annotations": [],
				"type": "AzurePostgreSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "public",
					"table": {
						"value": "@dataset().table_name",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_V2_AUTH_DB_PRODUCTION_SERVER')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_V2_ORDER_DB_PRODUCTION')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_V2_PRODUCTION_SERVER",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"table_name": {
						"type": "string"
					}
				},
				"folder": {
					"name": "V2 Datasets Production"
				},
				"annotations": [],
				"type": "AzurePostgreSqlTable",
				"schema": [
					{
						"name": "id",
						"type": "integer",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "order_id",
						"type": "integer",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "address_id",
						"type": "integer",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "is_bill_address",
						"type": "boolean",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "city",
						"type": "character varying",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "country",
						"type": "character varying",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "district",
						"type": "character varying",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "type",
						"type": "character varying",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "formatted_address",
						"type": "character varying",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "latitude",
						"type": "double precision",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "longitude",
						"type": "double precision",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "is_default",
						"type": "boolean",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "street_no",
						"type": "character varying",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "area",
						"type": "character varying",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "postal_code",
						"type": "integer",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "delivery_instruction",
						"type": "character varying",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "created_at",
						"type": "timestamp without time zone",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "updated_at",
						"type": "timestamp without time zone",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "deleted_at",
						"type": "timestamp without time zone",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "is_verified",
						"type": "boolean",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "image",
						"type": "character varying",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "comments",
						"type": "character varying",
						"precision": 0,
						"scale": 0
					}
				],
				"typeProperties": {
					"schema": "public",
					"table": {
						"value": "@dataset().table_name",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_V2_PRODUCTION_SERVER')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_V2_PRODUCT_DB_DEV')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_V2_PRODUCT_DB_DEV_SERVER",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"table_name": {
						"type": "string"
					}
				},
				"folder": {
					"name": "V2 Datasets DEV"
				},
				"annotations": [],
				"type": "AzurePostgreSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "public",
					"table": {
						"value": "@dataset().table_name",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_V2_PRODUCT_DB_DEV_SERVER')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_V2_PRODUCT_DB_PRODUCTION')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_V2_PRODUCT_DB_PRODUCTION_SERVER",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"table_name": {
						"type": "string"
					}
				},
				"folder": {
					"name": "V2 Datasets Production"
				},
				"annotations": [],
				"type": "AzurePostgreSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "public",
					"table": {
						"value": "@dataset().table_name",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_V2_PRODUCT_DB_PRODUCTION_SERVER')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_V2_USER_DB_DEV')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_V2_AUTH_DB_DEV_SERVER",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"table_name": {
						"type": "string"
					}
				},
				"folder": {
					"name": "V2 Datasets DEV"
				},
				"annotations": [],
				"type": "AzurePostgreSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "public",
					"table": {
						"value": "@dataset().table_name",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_V2_AUTH_DB_DEV_SERVER')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_V2_USER_DB_PRODUCTION')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_V2_USER_DB_PRODUCTION_SERVER",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"table_name": {
						"type": "string"
					}
				},
				"folder": {
					"name": "V2 Datasets Production"
				},
				"annotations": [],
				"type": "AzurePostgreSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "public",
					"table": {
						"value": "@dataset().table_name",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_V2_USER_DB_PRODUCTION_SERVER')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_CrossDB_Connection_Storage')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('LS_CrossDB_Connection_Storage_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_Danube_Key_Vault')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('LS_Danube_Key_Vault_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_V1_PRODUCTION')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "PostgreSqlV2",
				"typeProperties": {
					"server": "[parameters('LS_V1_PRODUCTION_properties_typeProperties_server')]",
					"port": 5432,
					"database": "[parameters('LS_V1_PRODUCTION_properties_typeProperties_database')]",
					"username": "[parameters('LS_V1_PRODUCTION_properties_typeProperties_username')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('LS_V1_PRODUCTION_password')]"
					},
					"sslMode": 1,
					"authenticationType": "Basic",
					"connectionTimeout": 600,
					"commandTimeout": 0
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_V2_AUTH_DB_DEV_SERVER')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzurePostgreSql",
				"typeProperties": {
					"connectionString": "[parameters('LS_V2_AUTH_DB_DEV_SERVER_connectionString')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "LS_Danube_Key_Vault",
							"type": "LinkedServiceReference"
						},
						"secretName": "db-password-dev"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_Danube_Key_Vault')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_V2_AUTH_DB_PRODUCTION_SERVER')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzurePostgreSql",
				"typeProperties": {
					"connectionString": "[parameters('LS_V2_AUTH_DB_PRODUCTION_SERVER_connectionString')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "LS_Danube_Key_Vault",
							"type": "LinkedServiceReference"
						},
						"secretName": "V2-PRODUCTION-SERVER-PASSWORD"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_Danube_Key_Vault')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_V2_PRODUCTION_SERVER')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzurePostgreSql",
				"typeProperties": {
					"connectionString": "[parameters('LS_V2_PRODUCTION_SERVER_connectionString')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "LS_Danube_Key_Vault",
							"type": "LinkedServiceReference"
						},
						"secretName": "V2-PRODUCTION-SERVER-PASSWORD"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_Danube_Key_Vault')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_V2_PRODUCT_DB_DEV_SERVER')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzurePostgreSql",
				"typeProperties": {
					"connectionString": "[parameters('LS_V2_PRODUCT_DB_DEV_SERVER_connectionString')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "LS_Danube_Key_Vault",
							"type": "LinkedServiceReference"
						},
						"secretName": "db-password-dev"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_Danube_Key_Vault')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_V2_PRODUCT_DB_PRODUCTION_SERVER')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzurePostgreSql",
				"typeProperties": {
					"connectionString": "[parameters('LS_V2_PRODUCT_DB_PRODUCTION_SERVER_connectionString')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "LS_Danube_Key_Vault",
							"type": "LinkedServiceReference"
						},
						"secretName": "V2-PRODUCTION-SERVER-PASSWORD"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_Danube_Key_Vault')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_V2_USER_DB_PRODUCTION_SERVER')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzurePostgreSql",
				"typeProperties": {
					"connectionString": "[parameters('LS_V2_USER_DB_PRODUCTION_SERVER_connectionString')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "LS_Danube_Key_Vault",
							"type": "LinkedServiceReference"
						},
						"secretName": "V2-PRODUCTION-SERVER-PASSWORD"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_Danube_Key_Vault')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/country')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "User DB"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_Intermiadate_Result",
								"type": "DatasetReference"
							},
							"name": "source1"
						},
						{
							"linkedService": {
								"referenceName": "LS_V2_USER_DB_PRODUCTION_SERVER",
								"type": "LinkedServiceReference"
							},
							"name": "currency"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "LS_V2_USER_DB_PRODUCTION_SERVER",
								"type": "LinkedServiceReference"
							},
							"name": "storeindb"
						}
					],
					"transformations": [
						{
							"name": "joiningCurrency"
						},
						{
							"name": "selectingrequiredFields"
						}
					],
					"scriptLines": [
						"source(output(",
						"          id as integer,",
						"          iso_country_code as string,",
						"          name as string,",
						"          currency as string,",
						"          updated_at as timestamp,",
						"          created_at as timestamp,",
						"          default_super_market_id as integer,",
						"          currency_precision as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> source1",
						"source(output(",
						"          id as integer,",
						"          created_at as timestamp,",
						"          updated_at as timestamp,",
						"          name as string,",
						"          deleted_at as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     tableName: 'currency',",
						"     schemaName: 'public',",
						"     store: 'postgres',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> currency",
						"source1, currency join(currency == currency@name,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joiningCurrency",
						"joiningCurrency select(mapColumn(",
						"          id = source1@id,",
						"          iso_country_code,",
						"          name = source1@name,",
						"          updated_at = source1@updated_at,",
						"          created_at = source1@created_at,",
						"          default_super_market_id,",
						"          currency_precision,",
						"          currency_id = currency@id",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectingrequiredFields",
						"selectingrequiredFields sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     tableName: 'country',",
						"     schemaName: 'public',",
						"     deletable: false,",
						"     insertable: true,",
						"     updateable: false,",
						"     upsertable: false,",
						"     store: 'postgres',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          id,",
						"          iso_country_code,",
						"          name,",
						"          updated_at,",
						"          created_at,",
						"          default_super_market_id,",
						"          currency_precision,",
						"          currency_id",
						"     )) ~> storeindb"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_Intermiadate_Result')]",
				"[concat(variables('factoryId'), '/linkedServices/LS_V2_USER_DB_PRODUCTION_SERVER')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/employee')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "User DB"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_Intermiadate_Result",
								"type": "DatasetReference"
							},
							"name": "employee"
						},
						{
							"linkedService": {
								"referenceName": "LS_V2_USER_DB_PRODUCTION_SERVER",
								"type": "LinkedServiceReference"
							},
							"name": "city"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "LS_V2_USER_DB_PRODUCTION_SERVER",
								"type": "LinkedServiceReference"
							},
							"name": "StoreInDB"
						}
					],
					"transformations": [
						{
							"name": "joiningCityTable"
						},
						{
							"name": "selectingNeededColumns"
						},
						{
							"name": "window1"
						},
						{
							"name": "selectingRequiredColumns"
						},
						{
							"name": "filteringcolumns"
						}
					],
					"scriptLines": [
						"source(output(",
						"          id as integer,",
						"          role_id as integer,",
						"          email as string,",
						"          created_at as timestamp,",
						"          updated_at as timestamp,",
						"          is_deleted as boolean,",
						"          first_name as string,",
						"          last_name as string,",
						"          mobile_number as string,",
						"          dob as timestamp,",
						"          country_code as string,",
						"          country_id as integer,",
						"          gender as string,",
						"          user_type as string,",
						"          availability as string,",
						"          role_name as string,",
						"          active as boolean,",
						"          status as boolean,",
						"          city as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> employee",
						"source(output(",
						"          id as integer,",
						"          created_at as timestamp,",
						"          updated_at as timestamp,",
						"          name as string,",
						"          country_id as integer,",
						"          abbreviation as string,",
						"          city_image_url as string,",
						"          is_visible as boolean,",
						"          deleted_at as timestamp,",
						"          latitude as double,",
						"          longitude as double,",
						"          translation_id as string,",
						"          state_id as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     tableName: 'city',",
						"     schemaName: 'public',",
						"     store: 'postgres',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> city",
						"employee, city join(lower(city) == name,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joiningCityTable",
						"joiningCityTable select(mapColumn(",
						"          id = employee@id,",
						"          role_id,",
						"          email,",
						"          created_at = employee@created_at,",
						"          updated_at = employee@updated_at,",
						"          is_deleted,",
						"          first_name,",
						"          last_name,",
						"          mobile_number,",
						"          dob,",
						"          country_code,",
						"          country_id = employee@country_id,",
						"          gender,",
						"          user_type,",
						"          availability,",
						"          active,",
						"          status,",
						"          city_id = city@id,",
						"          role_name",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectingNeededColumns",
						"selectingNeededColumns window(over(id),",
						"     asc(role_name, false),",
						"     final_column = rowNumber()==1) ~> window1",
						"filteringcolumns select(mapColumn(",
						"          id,",
						"          role_id,",
						"          email,",
						"          created_at,",
						"          updated_at,",
						"          is_deleted,",
						"          first_name,",
						"          last_name,",
						"          mobile_number,",
						"          dob,",
						"          country_code,",
						"          country_id,",
						"          gender,",
						"          user_type,",
						"          availability,",
						"          active,",
						"          status,",
						"          city_id",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectingRequiredColumns",
						"window1 filter(equals(final_column,true())) ~> filteringcolumns",
						"selectingRequiredColumns sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     tableName: 'employee',",
						"     schemaName: 'public',",
						"     deletable: false,",
						"     insertable: true,",
						"     updateable: false,",
						"     upsertable: false,",
						"     store: 'postgres',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> StoreInDB"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_Intermiadate_Result')]",
				"[concat(variables('factoryId'), '/linkedServices/LS_V2_USER_DB_PRODUCTION_SERVER')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/order')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Order DB"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_Intermiadate_Result",
								"type": "DatasetReference"
							},
							"name": "source1"
						},
						{
							"linkedService": {
								"referenceName": "LS_V2_USER_DB_PRODUCTION_SERVER",
								"type": "LinkedServiceReference"
							},
							"name": "city"
						},
						{
							"linkedService": {
								"referenceName": "LS_V2_PRODUCTION_SERVER",
								"type": "LinkedServiceReference"
							},
							"name": "ordercancellationreason"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "LS_V2_PRODUCTION_SERVER",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "join1"
						},
						{
							"name": "select1"
						},
						{
							"name": "join2"
						},
						{
							"name": "select2"
						}
					],
					"scriptLines": [
						"source(output(",
						"          id as integer,",
						"          item_total as decimal(38,18),",
						"          total as decimal(38,18),",
						"          status as string,",
						"          user_id as integer,",
						"          completed_at as timestamp,",
						"          bill_address_id as integer,",
						"          ship_address_id as integer,",
						"          payment_total as decimal(38,18),",
						"          created_at as timestamp,",
						"          updated_at as timestamp,",
						"          currency as string,",
						"          item_count as integer,",
						"          cancel_reason as string,",
						"          cancelled_at as timestamp,",
						"          cancelled_by as integer,",
						"          delivery_option_id as integer,",
						"          country_id as integer,",
						"          payment_option_id as integer,",
						"          city as string,",
						"          language_id as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> source1",
						"source(output(",
						"          id as integer,",
						"          name as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     query: 'select id, name from city',",
						"     store: 'postgres',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> city",
						"source(output(",
						"          id as integer,",
						"          reason_en as string,",
						"          reason_ar as string,",
						"          visible as boolean,",
						"          created_at as timestamp,",
						"          updated_at as timestamp,",
						"          deleted_at as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     query: 'select * from order_cancellation_reason',",
						"     store: 'postgres',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> ordercancellationreason",
						"source1, city join(lower(city) == name,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"join1 select(mapColumn(",
						"          id = source1@id,",
						"          item_total,",
						"          total,",
						"          status,",
						"          user_id,",
						"          completed_at,",
						"          bill_address_id,",
						"          ship_address_id,",
						"          payment_total,",
						"          created_at,",
						"          updated_at,",
						"          currency,",
						"          item_count,",
						"          cancelled_at,",
						"          cancelled_by,",
						"          delivery_option_id,",
						"          country_id,",
						"          payment_option_id,",
						"          language_id,",
						"          city_id = city@id,",
						"          cancel_reason",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1, ordercancellationreason join(cancel_reason == reason_en,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join2",
						"join2 select(mapColumn(",
						"          id = select1@id,",
						"          item_total,",
						"          total,",
						"          status,",
						"          user_id,",
						"          completed_at,",
						"          bill_address_id,",
						"          ship_address_id,",
						"          payment_total,",
						"          created_at = select1@created_at,",
						"          updated_at = select1@updated_at,",
						"          currency,",
						"          item_count,",
						"          cancelled_at,",
						"          cancelled_by,",
						"          delivery_option_id,",
						"          country_id,",
						"          payment_option_id,",
						"          language_id,",
						"          city_id,",
						"          order_cancellation_id = ordercancellationreason@id",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2",
						"select2 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     tableName: 'order',",
						"     schemaName: 'public',",
						"     deletable: false,",
						"     insertable: true,",
						"     updateable: false,",
						"     upsertable: false,",
						"     store: 'postgres',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          id,",
						"          item_total,",
						"          total,",
						"          status,",
						"          user_id,",
						"          completed_at,",
						"          bill_address_id,",
						"          ship_address_id,",
						"          payment_total,",
						"          created_at,",
						"          updated_at,",
						"          currency,",
						"          item_count,",
						"          cancelled_at,",
						"          cancelled_by,",
						"          delivery_option_id,",
						"          country_id,",
						"          payment_option_id,",
						"          language_id,",
						"          city_id,",
						"          order_cancellation_id",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_Intermiadate_Result')]",
				"[concat(variables('factoryId'), '/linkedServices/LS_V2_USER_DB_PRODUCTION_SERVER')]",
				"[concat(variables('factoryId'), '/linkedServices/LS_V2_PRODUCTION_SERVER')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/order_product')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Order DB"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_Intermiadate_Result",
								"type": "DatasetReference"
							},
							"name": "extractorderproduct"
						},
						{
							"linkedService": {
								"referenceName": "LS_V2_PRODUCTION_SERVER",
								"type": "LinkedServiceReference"
							},
							"name": "ordershipment"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "LS_V2_PRODUCTION_SERVER",
								"type": "LinkedServiceReference"
							},
							"name": "writestatusbacktodb"
						}
					],
					"transformations": [
						{
							"name": "joinbasedonshipmentid"
						},
						{
							"name": "selectingmandatoryfields"
						},
						{
							"name": "addingstatuscondition"
						},
						{
							"name": "select2"
						}
					],
					"scriptLines": [
						"source(output(",
						"          id as integer,",
						"          product_variant_id as integer,",
						"          quantity as integer,",
						"          picked_weight as integer,",
						"          picked_quantity as integer,",
						"          price as decimal(38,18),",
						"          created_at as timestamp,",
						"          replaced as boolean,",
						"          state as string,",
						"          updated_at as timestamp,",
						"          action_price as decimal(38,18),",
						"          sale_price as decimal(38,18),",
						"          picker_id as integer,",
						"          product_id as integer,",
						"          delivery_instruction as string,",
						"          order_shipment_id as integer,",
						"          replacement_pref as string,",
						"          category_id as integer,",
						"          status as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> extractorderproduct",
						"source(output(",
						"          id as integer,",
						"          order_id as integer,",
						"          supermarket_id as integer,",
						"          delivery_type_id as integer,",
						"          delivery_date as date,",
						"          delivered_at as timestamp,",
						"          total as double,",
						"          tax_total as double,",
						"          status as string,",
						"          driver_id as integer,",
						"          delivery_charges as double,",
						"          time_slot_id as integer,",
						"          created_at as timestamp,",
						"          updated_at as timestamp,",
						"          deleted_at as timestamp,",
						"          processing_start_at as timestamp,",
						"          dispatch_job_id as integer,",
						"          is_delivery_on_hold as boolean,",
						"          delivery_order as integer,",
						"          formatted_time_slot as string,",
						"          promotion_woa_percentage as double,",
						"          promotion_woa_max_discount as double,",
						"          discount_given as double",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     tableName: 'order_shipment',",
						"     schemaName: 'public',",
						"     store: 'postgres',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> ordershipment",
						"extractorderproduct, select2 join(order_shipment_id == shipment_id,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinbasedonshipmentid",
						"joinbasedonshipmentid select(mapColumn(",
						"          id,",
						"          product_variant_id,",
						"          quantity,",
						"          picked_weight,",
						"          picked_quantity,",
						"          price,",
						"          created_at,",
						"          replaced,",
						"          state,",
						"          updated_at,",
						"          action_price,",
						"          sale_price,",
						"          picker_id,",
						"          product_id,",
						"          delivery_instruction,",
						"          order_shipment_id,",
						"          replacement_pref,",
						"          category_id,",
						"          status,",
						"          shipment_id,",
						"          shipment_status,",
						"          order_id",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectingmandatoryfields",
						"selectingmandatoryfields derive(status = iif(picked_quantity >= quantity, 'picked',\r",
						"    iif(equals(replaced, true()), 'replaced',\r",
						"        iif(and(equals(shipment_status, 'pending'), equals(picked_quantity, 0)), 'pending',\r",
						"            iif(equals(state,'complete') && equals(picked_quantity, 0) && isNull(replaced), 'issue', '')\r",
						"        )\r",
						"    )\r",
						")) ~> addingstatuscondition",
						"ordershipment select(mapColumn(",
						"          shipment_id = id,",
						"          shipment_status = status,",
						"          order_id",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2",
						"addingstatuscondition sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          id as integer,",
						"          product_id as integer,",
						"          quantity as integer,",
						"          price as double,",
						"          action_price as double,",
						"          status as string,",
						"          picker_id as integer,",
						"          picked_quantity as integer,",
						"          created_at as timestamp,",
						"          updated_at as timestamp,",
						"          deleted_at as timestamp,",
						"          replacement_pref as string,",
						"          order_shipment_id as integer,",
						"          product_variant_id as integer,",
						"          category_id as integer,",
						"          replacement_of as integer,",
						"          added_by as integer,",
						"          modified_by as integer,",
						"          delivery_instruction as string,",
						"          sale_price as double,",
						"          product_report_id as integer,",
						"          picked_weight as double,",
						"          replaced_by as integer,",
						"          meta as string",
						"     ),",
						"     format: 'table',",
						"     tableName: 'order_product',",
						"     schemaName: 'public',",
						"     deletable: false,",
						"     insertable: true,",
						"     updateable: false,",
						"     upsertable: false,",
						"     store: 'postgres',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          id,",
						"          product_id,",
						"          quantity,",
						"          price,",
						"          action_price,",
						"          status,",
						"          picker_id,",
						"          picked_quantity,",
						"          created_at,",
						"          updated_at,",
						"          replacement_pref,",
						"          order_shipment_id,",
						"          product_variant_id,",
						"          category_id,",
						"          delivery_instruction,",
						"          sale_price,",
						"          picked_weight",
						"     )) ~> writestatusbacktodb"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_Intermiadate_Result')]",
				"[concat(variables('factoryId'), '/linkedServices/LS_V2_PRODUCTION_SERVER')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/order_shipment')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Order DB"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_Intermiadate_Result",
								"type": "DatasetReference"
							},
							"name": "ordershipment"
						},
						{
							"linkedService": {
								"referenceName": "LS_V2_USER_DB_PRODUCTION_SERVER",
								"type": "LinkedServiceReference"
							},
							"name": "deliverytype"
						},
						{
							"linkedService": {
								"referenceName": "LS_V2_USER_DB_PRODUCTION_SERVER",
								"type": "LinkedServiceReference"
							},
							"name": "timeslottable"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "LS_V2_PRODUCTION_SERVER",
								"type": "LinkedServiceReference"
							},
							"name": "writeintodb"
						}
					],
					"transformations": [
						{
							"name": "joindeliverytype"
						},
						{
							"name": "selectdeliverytype"
						},
						{
							"name": "mergingtimeslots"
						},
						{
							"name": "selectrequiredcolumns"
						},
						{
							"name": "selecttimeslots"
						},
						{
							"name": "joiningtimeslots"
						}
					],
					"scriptLines": [
						"source(output(",
						"          id as integer,",
						"          order_id as integer,",
						"          order_status as string,",
						"          created_at as timestamp,",
						"          updated_at as timestamp,",
						"          tax_total as double,",
						"          total as decimal(38,18),",
						"          start_time as string,",
						"          end_time as string,",
						"          day_of_week as string,",
						"          delivery_option_id as integer,",
						"          order_type as string,",
						"          supermarket_id as integer,",
						"          delivery_date as timestamp,",
						"          delivery_charges as decimal(38,18),",
						"          is_delivery_on_hold as boolean,",
						"          processing_start_at as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> ordershipment",
						"source(output(",
						"          id as integer,",
						"          name as string,",
						"          created_at as timestamp,",
						"          updated_at as timestamp,",
						"          deleted_at as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     tableName: 'delivery_type',",
						"     schemaName: 'public',",
						"     store: 'postgres',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> deliverytype",
						"source(output(",
						"          id as integer,",
						"          start_time as string,",
						"          end_time as string,",
						"          country_id as integer,",
						"          delivery_option_id as integer,",
						"          day_of_week as string,",
						"          created_at as timestamp,",
						"          updated_at as timestamp,",
						"          deleted_at as timestamp,",
						"          is_enabled as boolean",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     tableName: 'time_slot',",
						"     schemaName: 'public',",
						"     store: 'postgres',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> timeslottable",
						"ordershipment, selectdeliverytype join(order_type == delivery_type_name,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joindeliverytype",
						"deliverytype select(mapColumn(",
						"          delivery_type_id = id,",
						"          delivery_type_name = name",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectdeliverytype",
						"joiningtimeslots derive(formatted_time_slot = concat(selecttimeslots@start_time,'-',selecttimeslots@end_time),",
						"          delivery_type_id = coalesce(delivery_type_id,1)) ~> mergingtimeslots",
						"mergingtimeslots select(mapColumn(",
						"          id,",
						"          order_id,",
						"          order_status,",
						"          created_at,",
						"          updated_at,",
						"          tax_total,",
						"          total,",
						"          order_type,",
						"          supermarket_id,",
						"          delivery_date,",
						"          delivery_charges,",
						"          is_delivery_on_hold,",
						"          processing_start_at,",
						"          delivery_type_id,",
						"          formatted_time_slot,",
						"          time_slot_id = tc_id",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectrequiredcolumns",
						"timeslottable select(mapColumn(",
						"          tc_id = id,",
						"          start_time,",
						"          end_time,",
						"          delivery_option_id,",
						"          day_of_week",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selecttimeslots",
						"joindeliverytype, selecttimeslots join(ordershipment@start_time == selecttimeslots@start_time",
						"     && ordershipment@end_time == selecttimeslots@end_time",
						"     && ordershipment@delivery_option_id == selecttimeslots@delivery_option_id",
						"     && ordershipment@day_of_week == selecttimeslots@day_of_week,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joiningtimeslots",
						"selectrequiredcolumns sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          id as integer,",
						"          order_id as integer,",
						"          supermarket_id as integer,",
						"          delivery_type_id as integer,",
						"          delivery_date as date,",
						"          delivered_at as timestamp,",
						"          total as double,",
						"          tax_total as double,",
						"          status as string,",
						"          driver_id as integer,",
						"          delivery_charges as double,",
						"          time_slot_id as integer,",
						"          created_at as timestamp,",
						"          updated_at as timestamp,",
						"          deleted_at as timestamp,",
						"          processing_start_at as timestamp,",
						"          dispatch_job_id as integer,",
						"          is_delivery_on_hold as boolean,",
						"          delivery_order as integer,",
						"          formatted_time_slot as string,",
						"          promotion_woa_percentage as double,",
						"          promotion_woa_max_discount as double,",
						"          discount_given as double",
						"     ),",
						"     format: 'table',",
						"     tableName: 'order_shipment',",
						"     schemaName: 'public',",
						"     deletable: false,",
						"     insertable: true,",
						"     updateable: false,",
						"     upsertable: false,",
						"     store: 'postgres',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          id,",
						"          order_id,",
						"          supermarket_id,",
						"          delivery_type_id,",
						"          delivery_date,",
						"          total,",
						"          tax_total,",
						"          delivery_charges,",
						"          time_slot_id,",
						"          created_at,",
						"          updated_at,",
						"          processing_start_at,",
						"          is_delivery_on_hold,",
						"          formatted_time_slot,",
						"          status = order_status",
						"     )) ~> writeintodb"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_Intermiadate_Result')]",
				"[concat(variables('factoryId'), '/linkedServices/LS_V2_USER_DB_PRODUCTION_SERVER')]",
				"[concat(variables('factoryId'), '/linkedServices/LS_V2_PRODUCTION_SERVER')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/supermarket')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "User DB"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_Intermiadate_Result",
								"type": "DatasetReference"
							},
							"name": "supermarket"
						},
						{
							"linkedService": {
								"referenceName": "LS_V2_USER_DB_PRODUCTION_SERVER",
								"type": "LinkedServiceReference"
							},
							"name": "city"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "LS_V2_USER_DB_PRODUCTION_SERVER",
								"type": "LinkedServiceReference"
							},
							"name": "StoreInDB"
						}
					],
					"transformations": [
						{
							"name": "joiningCity"
						},
						{
							"name": "selectingRequiredFields"
						},
						{
							"name": "replacingemptystringintransactionID"
						}
					],
					"scriptLines": [
						"source(output(",
						"          id as integer,",
						"          name as string,",
						"          address as string,",
						"          mobile_number as string,",
						"          country_id as integer,",
						"          created_at as timestamp,",
						"          updated_at as timestamp,",
						"          is_visible as boolean,",
						"          latitude as double,",
						"          longitude as double,",
						"          time_slots_lead_time as integer,",
						"          express_delivery_fee as decimal(38,18),",
						"          call_mask as boolean,",
						"          minimum_total_amount_for_free_delivery as decimal(38,18),",
						"          description as string,",
						"          state_id as integer,",
						"          city as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> supermarket",
						"source(output(",
						"          id as integer,",
						"          created_at as timestamp,",
						"          updated_at as timestamp,",
						"          name as string,",
						"          country_id as integer,",
						"          abbreviation as string,",
						"          city_image_url as string,",
						"          is_visible as boolean,",
						"          deleted_at as timestamp,",
						"          latitude as double,",
						"          longitude as double,",
						"          translation_id as string,",
						"          state_id as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     query: 'select * from city',",
						"     store: 'postgres',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> city",
						"supermarket, city join(supermarket@state_id == toInteger(city@state_id)",
						"     && city == city@name,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joiningCity",
						"replacingemptystringintransactionID select(mapColumn(",
						"          id = supermarket@id,",
						"          name = supermarket@name,",
						"          address,",
						"          mobile_number,",
						"          country_id = supermarket@country_id,",
						"          created_at = supermarket@created_at,",
						"          updated_at = supermarket@updated_at,",
						"          is_visible = supermarket@is_visible,",
						"          latitude = supermarket@latitude,",
						"          longitude = supermarket@longitude,",
						"          time_slots_lead_time,",
						"          express_delivery_fee,",
						"          call_mask,",
						"          minimum_total_amount_for_free_delivery,",
						"          description,",
						"          city_id = city@id,",
						"          translation_id",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectingRequiredFields",
						"joiningCity derive(translation_id = coalesce(translation_id,'')) ~> replacingemptystringintransactionID",
						"selectingRequiredFields sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     tableName: 'super_market',",
						"     schemaName: 'public',",
						"     deletable: false,",
						"     insertable: true,",
						"     updateable: false,",
						"     upsertable: false,",
						"     store: 'postgres',",
						"     batchSize: 100000,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> StoreInDB"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_Intermiadate_Result')]",
				"[concat(variables('factoryId'), '/linkedServices/LS_V2_USER_DB_PRODUCTION_SERVER')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/user')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "User DB"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_Intermiadate_Result",
								"type": "DatasetReference"
							},
							"name": "source1"
						},
						{
							"linkedService": {
								"referenceName": "LS_V2_USER_DB_PRODUCTION_SERVER",
								"type": "LinkedServiceReference"
							},
							"name": "city"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "LS_V2_USER_DB_PRODUCTION_SERVER",
								"type": "LinkedServiceReference"
							},
							"name": "StoreInDB"
						}
					],
					"transformations": [
						{
							"name": "joiningCityTable"
						},
						{
							"name": "selectingRequiredFields"
						}
					],
					"scriptLines": [
						"source(output(",
						"          id as integer,",
						"          is_deleted as boolean,",
						"          created_at as timestamp,",
						"          updated_at as timestamp,",
						"          first_name as string,",
						"          last_name as string,",
						"          email as string,",
						"          gender as string,",
						"          country_code as string,",
						"          mobile_number as string,",
						"          dob as string,",
						"          referral_code as string,",
						"          language_id as integer,",
						"          city as string,",
						"          latitude as double,",
						"          longitude as double,",
						"          country_id as integer,",
						"          receive_marketing_promotions as boolean,",
						"          login_type as string,",
						"          social_id as string,",
						"          balance as integer,",
						"          blacklisted_at as timestamp,",
						"          blacklisted_reason as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> source1",
						"source(output(",
						"          id as integer,",
						"          created_at as timestamp,",
						"          updated_at as timestamp,",
						"          name as string,",
						"          country_id as integer,",
						"          abbreviation as string,",
						"          city_image_url as string,",
						"          is_visible as boolean,",
						"          deleted_at as timestamp,",
						"          latitude as double,",
						"          longitude as double,",
						"          translation_id as string,",
						"          state_id as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     tableName: 'city',",
						"     schemaName: 'public',",
						"     store: 'postgres',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> city",
						"source1, city join(city == name,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joiningCityTable",
						"joiningCityTable select(mapColumn(",
						"          id = source1@id,",
						"          is_deleted,",
						"          created_at = source1@created_at,",
						"          updated_at = source1@updated_at,",
						"          first_name,",
						"          last_name,",
						"          email,",
						"          gender,",
						"          country_code,",
						"          mobile_number,",
						"          dob,",
						"          referral_code,",
						"          language_id,",
						"          latitude = source1@latitude,",
						"          longitude = source1@longitude,",
						"          country_id = source1@country_id,",
						"          receive_marketing_promotions,",
						"          login_type,",
						"          social_id,",
						"          balance,",
						"          blacklisted_at,",
						"          blacklisted_reason,",
						"          city_id = city@id",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectingRequiredFields",
						"selectingRequiredFields sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     tableName: 'user',",
						"     schemaName: 'public',",
						"     deletable: false,",
						"     insertable: true,",
						"     updateable: false,",
						"     upsertable: false,",
						"     store: 'postgres',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          id,",
						"          is_deleted,",
						"          created_at,",
						"          updated_at,",
						"          first_name,",
						"          last_name,",
						"          email,",
						"          gender,",
						"          country_code,",
						"          mobile_number,",
						"          dob,",
						"          referral_code,",
						"          language_id,",
						"          latitude,",
						"          longitude,",
						"          country_id,",
						"          receive_marketing_promotions,",
						"          login_type,",
						"          social_id,",
						"          balance,",
						"          blacklisted_at,",
						"          blacklisted_reason,",
						"          city_id",
						"     )) ~> StoreInDB"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_Intermiadate_Result')]",
				"[concat(variables('factoryId'), '/linkedServices/LS_V2_USER_DB_PRODUCTION_SERVER')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/auth_device_token_cdc')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "fetchmaxupdateddate",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzurePostgreSqlSource",
								"query": "select max(updated_at) as max_updated_date from public.device_token;",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_V2_AUTH_DB_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {
									"table_name": "user"
								}
							}
						}
					},
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Set variable1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "PostgreSqlV2Source",
								"query": {
									"value": "with cte as(\nselect \n  distinct user_id,\n  uuid as device_id,\n  platform as device_type,\n  created_at,\n  updated_at,\n  push_notification_token as token,\n  'customer' as user_type,\n  row_number() over (partition by user_id order by user_id) as rn\nfrom spree_user_clients\norder by user_id, uuid)\n\nselect user_id, device_id, device_type, created_at, updated_at, token, user_type\nfrom cte \nwhere updated_at >= '@{variables('max_updated_date')}'\nand rn = 1;",
									"type": "Expression"
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings",
									"copyBehavior": "PreserveHierarchy"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_V1_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_Intermiadate_Result",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Set variable1",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "fetchmaxupdateddate",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "max_updated_date",
							"value": {
								"value": "@activity('fetchmaxupdateddate').output.firstRow.max_updated_date",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Copy data1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_auth_device_token_cdc",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Delete1",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "Data flow1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DS_Intermiadate_Result",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"max_updated_date": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Auth DB CDC"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_V2_AUTH_DB_PRODUCTION')]",
				"[concat(variables('factoryId'), '/datasets/DS_V1_PRODUCTION')]",
				"[concat(variables('factoryId'), '/datasets/DS_Intermiadate_Result')]",
				"[concat(variables('factoryId'), '/dataflows/df_auth_device_token_cdc')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/auth_ employee_cdc')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "fetchmaxupdateddate",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzurePostgreSqlSource",
								"query": "select max(updated_at) as max_updated_date from public.employee;",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_V2_AUTH_DB_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {
									"table_name": "user"
								}
							}
						}
					},
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Set variable1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "PostgreSqlV2Source",
								"query": {
									"value": "SELECT distinct\n\tu.id as id,\n    u.id AS user,\n    u.encrypted_password AS password,\n    u.password_salt,\n    u.email,\n    u.created_at,\n    u.updated_at,\n    CAST(CASE \n            WHEN u.deleted_at IS NOT NULL THEN TRUE\n            ELSE FALSE\n        END AS BOOLEAN) AS is_deleted,\n    CURRENT_TIMESTAMP as password_updated_at\n\t\nFROM spree_users u\ninner join spree_roles_users sru on sru.user_id = u.id\ninner join spree_roles sr on sr.id = sru.role_id and sr.id <> 2 and sr.name <> 'user'\nwhere u.updated_at >= '@{variables('max_updated_date')}';",
									"type": "Expression"
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings",
									"copyBehavior": "PreserveHierarchy"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_V1_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_Intermiadate_Result",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Set variable1",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "fetchmaxupdateddate",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "max_updated_date",
							"value": {
								"value": "@activity('fetchmaxupdateddate').output.firstRow.max_updated_date",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Copy data1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_auth_employee_cdc",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Delete1",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "Data flow1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DS_Intermiadate_Result",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"max_updated_date": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Auth DB CDC"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_V2_AUTH_DB_PRODUCTION')]",
				"[concat(variables('factoryId'), '/datasets/DS_V1_PRODUCTION')]",
				"[concat(variables('factoryId'), '/datasets/DS_Intermiadate_Result')]",
				"[concat(variables('factoryId'), '/dataflows/df_auth_employee_cdc')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/auth_user_cdc')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "fetchmaxupdateddate",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzurePostgreSqlSource",
								"query": "select max(updated_at) as max_updated_date from public.user;",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_V2_AUTH_DB_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {
									"table_name": "user"
								}
							}
						}
					},
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Set variable1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "PostgreSqlV2Source",
								"query": "SELECT \r\n    u.id AS user_id,\r\n    u.encrypted_password AS password,\r\n    u.password_salt,\r\n    u.email,\r\n    u.created_at,\r\n    u.updated_at,\r\n    CAST(CASE \r\n            WHEN u.deleted_at IS NOT NULL THEN TRUE\r\n            ELSE FALSE\r\n        END AS BOOLEAN) AS is_deleted,\r\n    CURRENT_TIMESTAMP as password_updated_at,\r\n    false as is_email_verified,\r\n    u.is_phone_verified as mobile_verified,\r\n\tcase \r\n  \twhen sua.provider = 'google_oauth2' then 'google'\r\n\telse sua.provider end as login_type,\r\n\tsua.uid as social_id,\r\n\tcoalesce(u.spree_api_key,'') as spree_api_key,\r\n\tcase \r\n\twhen u.blacklisted_at is not null Then True\r\n\tELSE false\r\n\tend as blacklisted\r\n\t\r\nFROM spree_users u\r\nleft join spree_user_authentications sua on u.id = sua.user_id\r\nwhere u.updated_at >= '@{variables('max_updated_date')}';"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings",
									"copyBehavior": "PreserveHierarchy"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "is_deleted",
											"type": "Boolean",
											"physicalType": "boolean"
										},
										"sink": {
											"name": "is_deleted",
											"type": "Boolean",
											"physicalType": "boolean"
										}
									},
									{
										"source": {
											"name": "created_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										},
										"sink": {
											"name": "created_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										}
									},
									{
										"source": {
											"name": "updated_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										},
										"sink": {
											"name": "updated_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										}
									},
									{
										"source": {
											"name": "user_id",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "user",
											"type": "Int32",
											"physicalType": "integer"
										}
									},
									{
										"source": {
											"name": "email",
											"type": "String",
											"physicalType": "character varying"
										},
										"sink": {
											"name": "email",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "password_updated_at",
											"type": "DateTime",
											"physicalType": "timestamp with time zone"
										},
										"sink": {
											"name": "password_updated_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										}
									},
									{
										"source": {
											"name": "login_type",
											"type": "String",
											"physicalType": "character varying"
										},
										"sink": {
											"name": "login_type",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "social_id",
											"type": "String",
											"physicalType": "character varying"
										},
										"sink": {
											"name": "social_id",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "is_email_verified",
											"type": "Boolean",
											"physicalType": "boolean"
										},
										"sink": {
											"name": "is_email_verified",
											"type": "Boolean",
											"physicalType": "boolean"
										}
									},
									{
										"source": {
											"name": "mobile_verified",
											"type": "Boolean",
											"physicalType": "boolean"
										},
										"sink": {
											"name": "mobile_verified",
											"type": "Boolean",
											"physicalType": "boolean"
										}
									},
									{
										"source": {
											"name": "password_salt",
											"type": "String",
											"physicalType": "character varying"
										},
										"sink": {
											"name": "password_salt",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "password",
											"type": "String",
											"physicalType": "character varying"
										},
										"sink": {
											"name": "password",
											"type": "String",
											"physicalType": "text"
										}
									},
									{
										"source": {
											"name": "blacklisted",
											"type": "Boolean",
											"physicalType": "boolean"
										},
										"sink": {
											"name": "is_blacklisted",
											"type": "Boolean",
											"physicalType": "boolean"
										}
									},
									{
										"source": {
											"name": "spree_api_key",
											"type": "String",
											"physicalType": "character varying"
										},
										"sink": {
											"name": "spree_api_key",
											"type": "String",
											"physicalType": "character varying"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_V1_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_Intermiadate_Result",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Set variable1",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "fetchmaxupdateddate",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "max_updated_date",
							"value": {
								"value": "@activity('fetchmaxupdateddate').output.firstRow.max_updated_date",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Copy data1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_auth_user_cdc",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Delete1",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "Data flow1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DS_Intermiadate_Result",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"max_updated_date": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Auth DB CDC"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_V2_AUTH_DB_PRODUCTION')]",
				"[concat(variables('factoryId'), '/datasets/DS_V1_PRODUCTION')]",
				"[concat(variables('factoryId'), '/datasets/DS_Intermiadate_Result')]",
				"[concat(variables('factoryId'), '/dataflows/df_auth_user_cdc')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_auth_device_token_cdc')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Auth_CDC"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_Intermiadate_Result",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "LS_V2_AUTH_DB_PRODUCTION_SERVER",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          user_id as integer,",
						"          device_id as string,",
						"          device_type as string,",
						"          created_at as timestamp,",
						"          updated_at as timestamp,",
						"          token as string,",
						"          user_type as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> source1",
						"source1 alterRow(upsertIf(true())) ~> alterRow1",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     tableName: 'device_token',",
						"     schemaName: 'public',",
						"     deletable: false,",
						"     insertable: false,",
						"     updateable: false,",
						"     upsertable: true,",
						"     keys:['user_id'],",
						"     store: 'postgres',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          user_id,",
						"          device_id,",
						"          device_type,",
						"          created_at,",
						"          updated_at,",
						"          token,",
						"          user_type",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_Intermiadate_Result')]",
				"[concat(variables('factoryId'), '/linkedServices/LS_V2_AUTH_DB_PRODUCTION_SERVER')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_auth_employee_cdc')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Auth_CDC"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_Intermiadate_Result",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "LS_V2_AUTH_DB_PRODUCTION_SERVER",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          id as integer,",
						"          user as integer,",
						"          password as string,",
						"          password_salt as string,",
						"          email as string,",
						"          created_at as timestamp,",
						"          updated_at as timestamp,",
						"          is_deleted as boolean,",
						"          password_updated_at as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> source1",
						"source1 alterRow(upsertIf(true())) ~> alterRow1",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     tableName: 'employee',",
						"     schemaName: 'public',",
						"     deletable: false,",
						"     insertable: false,",
						"     updateable: false,",
						"     upsertable: true,",
						"     keys:['user'],",
						"     store: 'postgres',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          id,",
						"          user,",
						"          password,",
						"          password_salt,",
						"          email,",
						"          created_at,",
						"          updated_at,",
						"          is_deleted,",
						"          password_updated_at",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_Intermiadate_Result')]",
				"[concat(variables('factoryId'), '/linkedServices/LS_V2_AUTH_DB_PRODUCTION_SERVER')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_auth_user_cdc')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Auth_CDC"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_Intermiadate_Result",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "LS_V2_AUTH_DB_PRODUCTION_SERVER",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          is_deleted as boolean,",
						"          created_at as timestamp,",
						"          updated_at as timestamp,",
						"          user as integer,",
						"          email as string,",
						"          password_updated_at as timestamp,",
						"          login_type as string,",
						"          social_id as string,",
						"          is_email_verified as boolean,",
						"          mobile_verified as boolean,",
						"          password_salt as string,",
						"          password as string,",
						"          is_blacklisted as boolean,",
						"          spree_api_key as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> source1",
						"source1 alterRow(upsertIf(true())) ~> alterRow1",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          id as integer,",
						"          is_deleted as boolean,",
						"          created_at as timestamp,",
						"          updated_at as timestamp,",
						"          user as integer,",
						"          email as string,",
						"          otp as integer,",
						"          otp_generated_at as long,",
						"          password_updated_at as timestamp,",
						"          login_type as string,",
						"          social_id as string,",
						"          is_email_verified as boolean,",
						"          email_verification_key as string,",
						"          mobile_otp as integer,",
						"          mobile_otp_generated_at as long,",
						"          mobile_verified as boolean,",
						"          password_salt as string,",
						"          password as string,",
						"          is_blacklisted as boolean,",
						"          spree_api_key as string",
						"     ),",
						"     format: 'table',",
						"     tableName: 'user',",
						"     schemaName: 'public',",
						"     deletable: false,",
						"     insertable: false,",
						"     updateable: false,",
						"     upsertable: true,",
						"     keys:['user'],",
						"     store: 'postgres',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          is_deleted,",
						"          created_at,",
						"          updated_at,",
						"          user,",
						"          email,",
						"          password_updated_at,",
						"          login_type,",
						"          social_id,",
						"          is_email_verified,",
						"          mobile_verified,",
						"          password_salt,",
						"          password,",
						"          is_blacklisted,",
						"          spree_api_key",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_Intermiadate_Result')]",
				"[concat(variables('factoryId'), '/linkedServices/LS_V2_AUTH_DB_PRODUCTION_SERVER')]"
			]
		}
	]
}