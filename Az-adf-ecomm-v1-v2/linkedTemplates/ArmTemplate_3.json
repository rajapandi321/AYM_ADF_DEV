{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "Az-adf-ecomm-v1-v2"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/order_product')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.15:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "PostgreSqlV2Source",
								"query": "SELECT\n    a.id, \n    a.variant_id AS product_variant_id,\n    COALESCE(SUM(siu.quantity_count), 0) AS quantity,\n    a.price,\n    a.created_at,\n    coalesce(a.updated_at,current_timestamp) as updated_at,\n    CASE \n        WHEN a.on_sale = false THEN a.price\n        ELSE '0.0'\n    END AS action_price,\n    CASE \n        WHEN a.on_sale = true THEN a.price\n        ELSE '0'\n    END AS sale_price,\n    b.product_id,\n    CASE\n      WHEN d.replace_product::varchar = 'true' THEN 'replace-with-similar-product' \n      WHEN d.replace_product::varchar = 'false' THEN 'cancel'\n      ELSE NULL\n    END AS replacement_pref,\n    COALESCE(SUM(e.quantity), 0) AS picked_quantity,\n    0 AS picker_id,\n    COALESCE(c.shipment_id, 0) AS order_shipment_id,\n    1 AS category_id, -- default value = 1 (grocery id from category table)\n    '' AS status\nFROM spree_line_items a \nLEFT JOIN spree_variants b ON b.id = a.variant_id\nLEFT JOIN (\n    SELECT DISTINCT ON (line_item_id) * \n    FROM spree_inventory_units\n) c ON c.line_item_id = a.id\nLEFT JOIN (\n    SELECT \n        line_item_id, \n        state, \n        COUNT(id) AS quantity_count\n    FROM spree_inventory_units \n    GROUP BY line_item_id, state\n) siu ON siu.line_item_id = a.id AND siu.state != 'canceled'\nLEFT JOIN spree_orders d ON d.id = c.order_id\nLEFT JOIN spree_picked_items e ON e.pickable_id = a.id\nGROUP BY\n    a.id, \n    a.variant_id,\n    a.price,\n    a.created_at,\n    a.updated_at,\n    a.on_sale,\n    b.product_id,\n    d.replace_product,\n    c.shipment_id\nORDER BY a.id;"
							},
							"sink": {
								"type": "AzurePostgreSQLSink",
								"writeBatchSize": 1000000,
								"writeBatchTimeout": "00:30:00",
								"writeMethod": "CopyCommand"
							},
							"enableStaging": false,
							"parallelCopies": 8,
							"dataIntegrationUnits": 4,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_V1_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_V2_ORDER_DB_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {
									"table_name": "order_product"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Order DB"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/order_promotions')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "PostgreSqlV2Source",
								"query": "select * from spree_orders_promotions;"
							},
							"sink": {
								"type": "AzurePostgreSQLSink",
								"writeBatchSize": 1000000,
								"writeBatchTimeout": "00:30:00",
								"writeMethod": "CopyCommand"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "id",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "id",
											"type": "Int32",
											"physicalType": "integer"
										}
									},
									{
										"source": {
											"name": "order_id",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "order_id",
											"type": "Int32",
											"physicalType": "integer"
										}
									},
									{
										"source": {
											"name": "promotion_id",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "promotion_id",
											"type": "Int32",
											"physicalType": "integer"
										}
									},
									{
										"source": {
											"name": "promotion_code_id",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "promotion_code_id",
											"type": "Int32",
											"physicalType": "integer"
										}
									},
									{
										"source": {
											"name": "created_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										},
										"sink": {
											"name": "created_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										}
									},
									{
										"source": {
											"name": "updated_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										},
										"sink": {
											"name": "updated_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_V1_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_V2_ORDER_DB_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {
									"table_name": "order_promotions"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Order DB"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/order_shipment')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "PostgreSqlV2Source",
								"query": "WITH cte AS (\n    SELECT \n        ssh.id,\n        ssh.order_id,\n        CASE \n            WHEN ssh.state = 'shipped' THEN 'delivered'\n            WHEN ssh.state = 'pending' THEN 'pending'\n            WHEN ssh.state = 'ready' THEN 'picked'\n            WHEN ssh.state = 'canceled' THEN 'cancelled'\n        END AS status,\n        ssh.created_at,\n        ssh.updated_at,\n        CAST((ssh.additional_tax_total + ssh.included_tax_total) AS DOUBLE PRECISION) AS tax_total,\n        so.total,\n        so.order_type,\n        slto.time_slots_schedule_id,\n        so.supermarket_id,\n        sla.delivery_date,\n        sa.amount AS delivery_charges,\n        FALSE AS is_delivery_on_hold,\n        CURRENT_TIMESTAMP AS processing_start_at,\n        ROW_NUMBER() OVER (PARTITION BY ssh.id ORDER BY ssh.id) AS rn\n    FROM spree_shipments ssh\n    INNER JOIN spree_orders so ON so.id = ssh.order_id AND so.state != 'cart'\n    LEFT JOIN spree_lift_assignments sla ON sla.order_id = ssh.order_id\n    LEFT JOIN spree_adjustments sa ON sa.order_id = ssh.order_id AND sa.label = 'Express Fee'\n    LEFT JOIN danube_slot_to_orders slto ON slto.order_id = ssh.order_id\n    ORDER BY ssh.id ASC\n)\nSELECT \n    id,\n    order_id,\n    status,\n    created_at,\n    updated_at,\n    tax_total,\n    total,\n    order_type,\n    time_slots_schedule_id,\n    supermarket_id,\n    delivery_date,\n    delivery_charges,\n    is_delivery_on_hold,\n    processing_start_at\nFROM cte\nWHERE rn = 1;\n"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings",
									"copyBehavior": "FlattenHierarchy"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "id",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "id",
											"type": "Int32",
											"physicalType": "INT_32"
										}
									},
									{
										"source": {
											"name": "order_id",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "order_id",
											"type": "Int32",
											"physicalType": "INT_32"
										}
									},
									{
										"source": {
											"name": "status",
											"type": "String",
											"physicalType": "text"
										},
										"sink": {
											"name": "status",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "created_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										},
										"sink": {
											"name": "created_at",
											"type": "DateTime",
											"physicalType": "INT_96"
										}
									},
									{
										"source": {
											"name": "updated_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										},
										"sink": {
											"name": "updated_at",
											"type": "DateTime",
											"physicalType": "INT_96"
										}
									},
									{
										"source": {
											"name": "tax_total",
											"type": "Double",
											"physicalType": "double precision"
										},
										"sink": {
											"name": "tax_total",
											"type": "Double",
											"physicalType": "DOUBLE"
										}
									},
									{
										"source": {
											"name": "total",
											"type": "Decimal",
											"physicalType": "numeric"
										},
										"sink": {
											"name": "total",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										}
									},
									{
										"source": {
											"name": "order_type",
											"type": "String",
											"physicalType": "character varying"
										},
										"sink": {
											"name": "order_type",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "time_slots_schedule_id",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "time_slots_schedule_id",
											"type": "Int32",
											"physicalType": "INT_32"
										}
									},
									{
										"source": {
											"name": "supermarket_id",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "supermarket_id",
											"type": "Int32",
											"physicalType": "INT_32"
										}
									},
									{
										"source": {
											"name": "delivery_date",
											"type": "DateTime",
											"physicalType": "date"
										},
										"sink": {
											"name": "delivery_date",
											"type": "DateTime",
											"physicalType": "INT_96"
										}
									},
									{
										"source": {
											"name": "delivery_charges",
											"type": "Decimal",
											"physicalType": "numeric"
										},
										"sink": {
											"name": "delivery_charges",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										}
									},
									{
										"source": {
											"name": "is_delivery_on_hold",
											"type": "Boolean",
											"physicalType": "boolean"
										},
										"sink": {
											"name": "is_delivery_on_hold",
											"type": "Boolean",
											"physicalType": "BOOLEAN"
										}
									},
									{
										"source": {
											"name": "processing_start_at",
											"type": "DateTime",
											"physicalType": "timestamp with time zone"
										},
										"sink": {
											"name": "processing_start_at",
											"type": "DateTime",
											"physicalType": "INT_96"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_V1_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_Intermiadate_Result",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Copy data1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "order_shipment",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"ordershipment": {},
									"deliverytype": {},
									"deliverycapacity": {},
									"timeslot": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Order DB"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/payment_option')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "payment_option",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "PostgreSqlV2Source",
								"query": "SELECT id,\n       name,\n       created_at,\n       updated_at,\n       deleted_at,\n       CASE\n            WHEN type = 'Spree::PaymentMethod::StoreCredit' THEN 'e-wlt'\n            WHEN type = 'Spree::Gateway::PayFort' THEN 'credit'\n            WHEN type = 'Spree::Gateway::CheckoutCom' THEN 'credit'\n            WHEN type = 'Spree::Gateway::Tamara' THEN 'tamara'\n            WHEN type = 'Spree::Gateway::BogusSimple' THEN 'bogus-simple'\n            WHEN type = 'Spree::PaymentMethod::Check' THEN 'cod'\n            WHEN type = 'Spree::Gateway::CheckoutCom::ApplePay' THEN 'a-pay'\n            WHEN type = 'Spree::Gateway::LoyaltyPoint' THEN 'loy-pts'\n            WHEN type = 'Spree::Gateway::PayFort::ApplePay' THEN 'a-pay'\n        Else '' \n\t\tEnd as code\nFROM   spree_payment_methods\nwhere name is not null\nORDER  BY id ASC;"
							},
							"sink": {
								"type": "AzurePostgreSQLSink",
								"writeBatchSize": 1000000,
								"writeBatchTimeout": "00:30:00",
								"writeMethod": "CopyCommand"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_V1_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_V2_USER_DB_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {
									"table_name": "payment_option"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "User DB"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/product')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "addsuppliercodecolumn",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "PostgreSqlV2Source",
								"query": "WITH brand AS (\r\n  SELECT \r\n    rt.id,\r\n    COALESCE(rt.name_en,'') AS name_en,\r\n    COALESCE(\r\n      CASE\r\n        WHEN LENGTH(rt.name_en) < 5 THEN \r\n          UPPER(REGEXP_REPLACE(TRANSLATE(rt.name_en, ' ', '_'), '[^a-zA-Z0-9_]', '', 'g')) || '_' || rt.id\r\n        ELSE \r\n          UPPER(SUBSTRING(REGEXP_REPLACE(TRANSLATE(rt.name_en, ' ', ''), '[^a-zA-Z0-9]', '', 'g'), 1, 1)) ||\r\n          UPPER(SUBSTRING(REGEXP_REPLACE(SUBSTRING(REGEXP_REPLACE(TRANSLATE(rt.name_en, ' ', ''), '[^a-zA-Z0-9]', ' ', 'g'), 2), ' ', ''), 1, 1)) ||\r\n          '_' || rt.id\r\n      END, \r\n    '') AS code,\r\n    rt.created_at,\r\n    rt.updated_at,\r\n    rt.temp_taxon_id,\r\n    COALESCE(rt.name_ar, '') AS name_ar\r\n  FROM (\r\n    SELECT \r\n      ROW_NUMBER() OVER () AS id,\r\n      st.id AS temp_taxon_id,\r\n      MAX(CASE WHEN stt.locale = 'en' THEN stt.name END) AS name_en,\r\n      MAX(CASE WHEN stt.locale = 'ar' THEN stt.name END) AS name_ar,\r\n      st.created_at,\r\n      st.updated_at\r\n    FROM spree_taxons st\r\n    LEFT JOIN spree_taxon_translations stt ON stt.spree_taxon_id = st.id\r\n    WHERE st.parent_id IN (\r\n      SELECT st.id \r\n      FROM spree_taxons st \r\n      JOIN spree_taxon_translations stt ON stt.spree_taxon_id = st.id AND stt.locale = 'en'\r\n      WHERE stt.name = 'Brands'\r\n    )\r\n    GROUP BY st.id\r\n  ) AS rt\r\n  ORDER BY rt.temp_taxon_id ASC\r\n), \r\nsupplier AS (\r\n  SELECT \r\n    REGEXP_REPLACE(MAX(COALESCE(spt.supplier_name,'')), '-[0-9]+$', '') AS name,\r\n    LEFT(COALESCE(spt.code, ''), 10) AS code,\r\n    MAX(spt.created_at) AS created_at,\r\n    MAX(spt.updated_at) AS updated_at,\r\n    MAX(spt.deleted_at) AS deleted_at\r\n  FROM (\r\n    SELECT\r\n      spree_product_id,\r\n      MAX(CASE WHEN locale = 'en' THEN manufacturer END) AS supplier_name,\r\n      MAX(CASE WHEN locale = 'ar' THEN manufacturer END) AS code,\r\n      MAX(created_at) AS created_at,\r\n      MAX(updated_at) AS updated_at,\r\n      MAX(deleted_at) AS deleted_at\r\n    FROM spree_product_translations\r\n    WHERE manufacturer IS NOT NULL\r\n    GROUP BY spree_product_id\r\n  ) AS spt\r\n  GROUP BY spt.code\r\n), \r\ncte AS (\r\n  SELECT \r\n    sp.id,\r\n    sp.tax_category_id,\r\n    sp.refundable,\r\n    sp.moq_limit,\r\n    sp.meta_title,\r\n    sp.loyalty_point,\r\n    sp_table.validity_tag_ar,\r\n    sp_table.validity_tag,\r\n    sp_table.slug,\r\n    sp_table.size,\r\n\tREGEXP_REPLACE(MAX(COALESCE(sp_table.supplier_name,'')), '-[0-9]+$', '') AS supplier_code,\r\n    COALESCE(sp_table.name_ar, '') AS name_ar,\r\n    COALESCE(sp_table.name, '') AS name,\r\n    COALESCE(sp_table.meta_keywords_ar, '') AS meta_keywords_ar,\r\n    COALESCE(sp_table.meta_keywords, '') AS meta_keywords,\r\n    COALESCE(sp_table.meta_description_ar, '') AS meta_description_ar,\r\n    COALESCE(sp_table.meta_description, '') AS meta_description,\r\n    COALESCE(sp_table.short_description_ar, '') AS short_description_ar,\r\n    COALESCE(sp_table.long_description_ar, '') AS long_description_ar,\r\n    COALESCE(sp_table.short_description, '') AS short_description,\r\n    COALESCE(sp_table.long_description, '') AS long_description,\r\n    COALESCE(sp.is_loyalty_reward, 'false') AS issue_loyalty_points,\r\n    CASE\r\n      WHEN sp.electronic_product_code = '' THEN NULL \r\n      ELSE CAST(sp.electronic_product_code AS INT)\r\n    END AS electronic_product_code,\r\n    CASE\r\n      WHEN sp.deleted_at IS NOT NULL THEN TRUE\r\n      ELSE FALSE\r\n    END AS is_deleted,\r\n    COALESCE(sp.crushable, false) AS crushable,\r\n    sp.created_at,\r\n    sp.updated_at,\r\n    sp.cod_enabled,\r\n    COALESCE(CAST(sp.available_on AS DATE), CAST(CURRENT_TIMESTAMP AS DATE)) AS available_on,\r\n    sp.bundled,\r\n    sp.bin_category_id,\r\n    brand_taxon.temp_taxon_id AS default_taxon_id,\r\n    sv.width,\r\n    sv.weight_increment,\r\n    sv.weight,\r\n    sv.sku,\r\n    case when\r\n    CAST(sv.perform_liquid_weight_check AS INT) = 0 Then 'False'\r\n    ELSE 'True'\r\n    END AS perform_liquid_weight_check,\r\n    sv.max_weight_per_order,\r\n    sv.height,\r\n    sv.depth,\r\n    sv.default_weight_count,\r\n    FALSE AS promotable,\r\n    TRUE AS is_wishlisted,\r\n    FALSE AS is_gluten_free,\r\n    '' AS discount,\r\n    FALSE AS deactivate,\r\n    ds_country.country_id,\r\n    1 AS category_id,\r\n    brand_taxon.brand_id AS brand_id\r\n  FROM spree_products sp\r\n  LEFT JOIN (\r\n    SELECT\r\n      sp.id,\r\n\t  MAX(CASE WHEN locale = 'en' THEN manufacturer END) as supplier_name,\r\n      MAX(CASE WHEN sptrans.locale = 'ar' THEN sptrans.validity_tag END) AS validity_tag_ar,\r\n      MAX(CASE WHEN sptrans.locale = 'en' THEN sptrans.validity_tag END) AS validity_tag,\r\n      MAX(sptrans.slug) AS slug,\r\n      MAX(sptrans.pack_size) AS size,\r\n      MAX(CASE WHEN sptrans.locale = 'ar' THEN sptrans.name END) AS name_ar,\r\n      MAX(CASE WHEN sptrans.locale = 'en' THEN sptrans.name END) AS name,\r\n      MAX(CASE WHEN sptrans.locale = 'ar' THEN sptrans.meta_keywords END) AS meta_keywords_ar,\r\n      MAX(CASE WHEN sptrans.locale = 'en' THEN sptrans.meta_keywords END) AS meta_keywords,\r\n      MAX(CASE WHEN sptrans.locale = 'ar' THEN sptrans.meta_description END) AS meta_description_ar,\r\n      MAX(CASE WHEN sptrans.locale = 'en' THEN sptrans.meta_description END) AS meta_description,\r\n      MAX(CASE WHEN sptrans.locale = 'ar' THEN sptrans.description END) AS short_description_ar,\r\n      MAX(CASE WHEN sptrans.locale = 'ar' THEN sptrans.description END) AS long_description_ar,\r\n      MAX(CASE WHEN sptrans.locale = 'en' THEN sptrans.description END) AS short_description,\r\n      MAX(CASE WHEN sptrans.locale = 'en' THEN sptrans.description END) AS long_description,\r\n      MAX(CASE WHEN sptrans.locale = 'ar' THEN sptrans.manufacturer END) AS supplier_code\r\n    FROM spree_products sp\r\n    LEFT JOIN spree_product_translations sptrans ON sptrans.spree_product_id = sp.id\r\n    GROUP BY sp.id\r\n  ) AS sp_table ON sp_table.id = sp.id\r\n  LEFT JOIN (\r\n    SELECT \r\n      sp.id, \r\n      db.country_id \r\n    FROM spree_products sp\r\n    LEFT JOIN spree_product_inventory_modifiers sim ON sp.id = sim.product_id\r\n    LEFT JOIN danube_supermarkets db ON sim.rule_supermarket_id = db.id\r\n    GROUP BY sp.id, db.country_id\r\n  ) AS ds_country ON sp.id = ds_country.id\r\n  LEFT JOIN (\r\n    SELECT \r\n      ROW_NUMBER() OVER (PARTITION BY prod_taxon.product_id ORDER BY b.created_at DESC) AS row_num,\r\n      b.temp_taxon_id,\r\n      b.id AS brand_id, \r\n      prod_taxon.product_id AS product_id\r\n    FROM brand b \r\n    LEFT JOIN spree_products_taxons prod_taxon ON b.temp_taxon_id = prod_taxon.taxon_id\r\n  ) AS brand_taxon ON brand_taxon.product_id = sp.id\r\n  LEFT JOIN (\r\n    SELECT \r\n      ROW_NUMBER() OVER (PARTITION BY product_id ORDER BY created_at DESC) AS row_num, \r\n      *\r\n    FROM spree_variants \r\n  ) sv ON sv.product_id = sp.id\r\n  LEFT JOIN supplier sup ON sup.code = sp_table.supplier_code AND sup.code != ''\r\n  WHERE (brand_taxon.row_num = 1 OR brand_taxon.row_num IS NULL) \r\n    AND (sv.row_num = 1 OR sv.row_num IS NULL)\r\nGROUP BY \r\n        sp.id, \r\n        sp.tax_category_id,\r\n        sp.refundable,\r\n        sp.moq_limit,\r\n        sp.meta_title,\r\n        sp.loyalty_point,\r\n        sp_table.validity_tag_ar,\r\n        sp_table.validity_tag,\r\n        sp_table.slug,\r\n\t\tbrand_taxon.temp_taxon_id,\r\n        sp_table.size,\r\n        sp_table.supplier_name,\r\n        sp_table.name_ar,\r\n        sp_table.name,\r\n        sp_table.meta_keywords_ar,\r\n        sp_table.meta_keywords,\r\n        sp_table.meta_description_ar,\r\n        sp_table.meta_description,\r\n        sp_table.short_description_ar,\r\n        sp_table.long_description_ar,\r\n        sp_table.short_description,\r\n        sp_table.long_description,\r\n        sp.is_loyalty_reward,\r\n\t\t    brand_taxon.brand_id,\r\n        sp.electronic_product_code,\r\n        sp.deleted_at,\r\n        sp.crushable,\r\n        sp.created_at,\r\n        sp.updated_at,\r\n        sp.cod_enabled,\r\n        sp.available_on,\r\n        sp.bundled,\r\n        sp.bin_category_id,\r\n        sv.width,\r\n        sv.weight_increment,\r\n        sv.weight,\r\n        sv.sku,\r\n        sv.perform_liquid_weight_check,\r\n        sv.max_weight_per_order,\r\n        sv.height,\r\n        sv.depth,\r\n        sv.default_weight_count,\r\n        ds_country.country_id\r\n)\r\nSELECT \r\n  filtered_cte.id,\r\n    filtered_cte.tax_category_id,\r\n    filtered_cte.refundable,\r\n    filtered_cte.moq_limit,\r\n    filtered_cte.meta_title,\r\n    filtered_cte.loyalty_point,\r\n    filtered_cte.validity_tag_ar,\r\n    filtered_cte.validity_tag,\r\n    filtered_cte.slug,\r\n    filtered_cte.size,\r\n\tfiltered_cte.supplier_code as temp_supplier_code,\r\n    filtered_cte.name_ar,\r\n    filtered_cte.name,\r\n    filtered_cte.meta_keywords_ar,\r\n    filtered_cte.meta_keywords,\r\n    filtered_cte.meta_description_ar,\r\n    filtered_cte.meta_description,\r\n    filtered_cte.short_description_ar,\r\n    filtered_cte.long_description_ar,\r\n    filtered_cte.short_description,\r\n    filtered_cte.long_description,\r\n    filtered_cte.issue_loyalty_points,\r\n    filtered_cte.electronic_product_code,\r\n    filtered_cte.is_deleted,\r\n    filtered_cte.crushable,\r\n    filtered_cte.created_at,\r\n    filtered_cte.updated_at,\r\n    filtered_cte.cod_enabled,\r\n    filtered_cte.available_on,\r\n    filtered_cte.bundled,\r\n    filtered_cte.bin_category_id,\r\n    filtered_cte.default_taxon_id,\r\n    filtered_cte.width,\r\n    filtered_cte.weight_increment,\r\n    filtered_cte.weight,\r\n    filtered_cte.sku,\r\n    filtered_cte.perform_liquid_weight_check,\r\n    filtered_cte.max_weight_per_order,\r\n    filtered_cte.height,\r\n    filtered_cte.depth,\r\n    filtered_cte.default_weight_count,\r\n    filtered_cte.promotable,\r\n    filtered_cte.is_wishlisted,\r\n    filtered_cte.is_gluten_free,\r\n    filtered_cte.discount,\r\n    filtered_cte.deactivate,\r\n    filtered_cte.country_id,\r\n    filtered_cte.category_id,\r\n    filtered_cte.brand_id\r\nFROM (\r\n  SELECT \r\n    cte.*,\r\n    ROW_NUMBER() OVER (PARTITION BY id ORDER BY country_id) AS rn \r\n  FROM cte\r\n) filtered_cte\r\nWHERE rn = 1;"
							},
							"sink": {
								"type": "AzurePostgreSQLSink",
								"writeBatchSize": 1000000,
								"writeBatchTimeout": "00:30:00",
								"preCopyScript": "ALTER TABLE product ADD COLUMN temp_taxon_id INT;",
								"writeMethod": "CopyCommand"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "id",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "id",
											"type": "Int32",
											"physicalType": "integer"
										}
									},
									{
										"source": {
											"name": "is_deleted",
											"type": "Boolean",
											"physicalType": "boolean"
										},
										"sink": {
											"name": "is_deleted",
											"type": "Boolean",
											"physicalType": "boolean"
										}
									},
									{
										"source": {
											"name": "created_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										},
										"sink": {
											"name": "created_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										}
									},
									{
										"source": {
											"name": "updated_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										},
										"sink": {
											"name": "updated_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										}
									},
									{
										"source": {
											"name": "name",
											"type": "String",
											"physicalType": "text"
										},
										"sink": {
											"name": "name",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "discount",
											"type": "String",
											"physicalType": "text"
										},
										"sink": {
											"name": "discount",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "is_wishlisted",
											"type": "Boolean",
											"physicalType": "boolean"
										},
										"sink": {
											"name": "is_wishlisted",
											"type": "Boolean",
											"physicalType": "boolean"
										}
									},
									{
										"source": {
											"name": "sku",
											"type": "String",
											"physicalType": "character varying"
										},
										"sink": {
											"name": "sku",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "country_id",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "country_id",
											"type": "Int32",
											"physicalType": "integer"
										}
									},
									{
										"source": {
											"name": "category_id",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "category_id",
											"type": "Int32",
											"physicalType": "integer"
										}
									},
									{
										"source": {
											"name": "name_ar",
											"type": "String",
											"physicalType": "text"
										},
										"sink": {
											"name": "name_ar",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "available_on",
											"type": "DateTime",
											"physicalType": "date"
										},
										"sink": {
											"name": "available_on",
											"type": "DateTime",
											"physicalType": "date"
										}
									},
									{
										"source": {
											"name": "electronic_product_code",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "electronic_product_code",
											"type": "Int32",
											"physicalType": "integer"
										}
									},
									{
										"source": {
											"name": "height",
											"type": "Decimal",
											"physicalType": "numeric"
										},
										"sink": {
											"name": "height",
											"type": "Double",
											"physicalType": "double precision"
										}
									},
									{
										"source": {
											"name": "width",
											"type": "Decimal",
											"physicalType": "numeric"
										},
										"sink": {
											"name": "width",
											"type": "Double",
											"physicalType": "double precision"
										}
									},
									{
										"source": {
											"name": "depth",
											"type": "Decimal",
											"physicalType": "numeric"
										},
										"sink": {
											"name": "depth",
											"type": "Double",
											"physicalType": "double precision"
										}
									},
									{
										"source": {
											"name": "weight",
											"type": "Decimal",
											"physicalType": "numeric"
										},
										"sink": {
											"name": "weight",
											"type": "Double",
											"physicalType": "double precision"
										}
									},
									{
										"source": {
											"name": "issue_loyalty_points",
											"type": "Boolean",
											"physicalType": "boolean"
										},
										"sink": {
											"name": "issue_loyalty_points",
											"type": "Boolean",
											"physicalType": "boolean"
										}
									},
									{
										"source": {
											"name": "bin_category_id",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "bin_category_id",
											"type": "Int32",
											"physicalType": "integer"
										}
									},
									{
										"source": {
											"name": "tax_category_id",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "tax_category_id",
											"type": "Int32",
											"physicalType": "integer"
										}
									},
									{
										"source": {
											"name": "cod_enabled",
											"type": "Boolean",
											"physicalType": "boolean"
										},
										"sink": {
											"name": "cod_enabled",
											"type": "Boolean",
											"physicalType": "boolean"
										}
									},
									{
										"source": {
											"name": "promotable",
											"type": "Boolean",
											"physicalType": "boolean"
										},
										"sink": {
											"name": "promotable",
											"type": "Boolean",
											"physicalType": "boolean"
										}
									},
									{
										"source": {
											"name": "refundable",
											"type": "Boolean",
											"physicalType": "boolean"
										},
										"sink": {
											"name": "refundable",
											"type": "Boolean",
											"physicalType": "boolean"
										}
									},
									{
										"source": {
											"name": "deactivate",
											"type": "Boolean",
											"physicalType": "boolean"
										},
										"sink": {
											"name": "deactivate",
											"type": "Boolean",
											"physicalType": "boolean"
										}
									},
									{
										"source": {
											"name": "validity_tag",
											"type": "String",
											"physicalType": "text"
										},
										"sink": {
											"name": "validity_tag",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "validity_tag_ar",
											"type": "String",
											"physicalType": "text"
										},
										"sink": {
											"name": "validity_tag_ar",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "meta_title",
											"type": "String",
											"physicalType": "character varying"
										},
										"sink": {
											"name": "meta_title",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "meta_keywords",
											"type": "String",
											"physicalType": "text"
										},
										"sink": {
											"name": "meta_keywords",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "meta_keywords_ar",
											"type": "String",
											"physicalType": "text"
										},
										"sink": {
											"name": "meta_keywords_ar",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "slug",
											"type": "String",
											"physicalType": "text"
										},
										"sink": {
											"name": "slug",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "brand_id",
											"type": "Int64",
											"physicalType": "bigint"
										},
										"sink": {
											"name": "brand_id",
											"type": "Int32",
											"physicalType": "integer"
										}
									},
									{
										"source": {
											"name": "bundled",
											"type": "Boolean",
											"physicalType": "boolean"
										},
										"sink": {
											"name": "bundled",
											"type": "Boolean",
											"physicalType": "boolean"
										}
									},
									{
										"source": {
											"name": "size",
											"type": "String",
											"physicalType": "text"
										},
										"sink": {
											"name": "size",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "perform_liquid_weight_check",
											"type": "String",
											"physicalType": "text"
										},
										"sink": {
											"name": "perform_liquid_weight_check",
											"type": "Boolean",
											"physicalType": "boolean"
										}
									},
									{
										"source": {
											"name": "weight_increment",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "weight_increment",
											"type": "Int32",
											"physicalType": "integer"
										}
									},
									{
										"source": {
											"name": "max_weight_per_order",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "max_weight_per_order",
											"type": "Int32",
											"physicalType": "integer"
										}
									},
									{
										"source": {
											"name": "crushable",
											"type": "Boolean",
											"physicalType": "boolean"
										},
										"sink": {
											"name": "crushable",
											"type": "Boolean",
											"physicalType": "boolean"
										}
									},
									{
										"source": {
											"name": "moq_limit",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "moq_limit",
											"type": "Int32",
											"physicalType": "integer"
										}
									},
									{
										"source": {
											"name": "default_weight_count",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "default_weight_count",
											"type": "Int32",
											"physicalType": "integer"
										}
									},
									{
										"source": {
											"name": "meta_description_ar",
											"type": "String",
											"physicalType": "text"
										},
										"sink": {
											"name": "meta_description_ar",
											"type": "String",
											"physicalType": "text"
										}
									},
									{
										"source": {
											"name": "meta_description",
											"type": "String",
											"physicalType": "text"
										},
										"sink": {
											"name": "meta_description",
											"type": "String",
											"physicalType": "text"
										}
									},
									{
										"source": {
											"name": "default_taxon_id",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "default_taxon_id",
											"type": "Int32",
											"physicalType": "integer"
										}
									},
									{
										"source": {
											"name": "short_description",
											"type": "String",
											"physicalType": "text"
										},
										"sink": {
											"name": "short_description",
											"type": "String",
											"physicalType": "text"
										}
									},
									{
										"source": {
											"name": "long_description",
											"type": "String",
											"physicalType": "text"
										},
										"sink": {
											"name": "long_description",
											"type": "String",
											"physicalType": "text"
										}
									},
									{
										"source": {
											"name": "short_description_ar",
											"type": "String",
											"physicalType": "text"
										},
										"sink": {
											"name": "short_description_ar",
											"type": "String",
											"physicalType": "text"
										}
									},
									{
										"source": {
											"name": "long_description_ar",
											"type": "String",
											"physicalType": "text"
										},
										"sink": {
											"name": "long_description_ar",
											"type": "String",
											"physicalType": "text"
										}
									},
									{
										"source": {
											"name": "is_gluten_free",
											"type": "Boolean",
											"physicalType": "boolean"
										},
										"sink": {
											"name": "is_gluten_free",
											"type": "Boolean",
											"physicalType": "boolean"
										}
									},
									{
										"source": {
											"name": "loyalty_point",
											"type": "Decimal",
											"physicalType": "numeric"
										},
										"sink": {
											"name": "loyalty_point",
											"type": "Double",
											"physicalType": "double precision"
										}
									},
									{
										"source": {
											"name": "temp_supplier_code",
											"type": "String",
											"physicalType": "text"
										},
										"sink": {
											"name": "temp_supplier_code",
											"type": "String",
											"physicalType": "character varying"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_V1_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_V2_PRODUCT_DB_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {
									"table_name": "product"
								}
							}
						]
					},
					{
						"name": "updatetemptaxonid",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Copy data1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzurePostgreSqlSource",
								"query": "WITH cte AS (\r\n    SELECT st.product_id, st.taxon_id AS temp_taxon_id\r\n    FROM product_taxon st\r\n)\r\nUPDATE product p\r\nSET temp_taxon_id = cte.temp_taxon_id\r\nFROM cte\r\nWHERE p.id = cte.product_id;\r\nSELECT 'Updating Temp Taxon ID' AS Message;",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_V2_PRODUCT_DB_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {
									"table_name": "product"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "updatesupplierIDandbrandID",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "updatetemptaxonid",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzurePostgreSqlSource",
								"query": "With cte AS\n  (select id, name as supplier_code \n  from supplier\n)\nUPDATE product p\nSET supplier_id = cte.id\nFROM cte\nWHERE p.temp_supplier_code = cte.supplier_code;\nWITH cte1 AS (\n    SELECT id, temp_taxon_id\n    FROM brand\n)\nUPDATE product p\nSET brand_id = cte1.id\nFROM cte1\nWHERE p.temp_taxon_id = cte1.temp_taxon_id;\nSELECT 'Update Supplier ID and Brand ID' as ID;",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_V2_PRODUCT_DB_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {
									"table_name": "product"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "addsuppliercodecolumn",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzurePostgreSqlSource",
								"query": "Alter table product add column temp_supplier_code varchar(200);\nSELECT 'Adding Supplier_Code' As Update",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_V2_PRODUCT_DB_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {
									"table_name": "product"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "RemovingUnwantedcolumnsfromproduct",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "updatesupplierIDandbrandID",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzurePostgreSqlSource",
								"query": "alter table product drop column temp_taxon_id;\r\nalter table product drop column temp_supplier_code;\r\nalter table brand drop column temp_taxon_id;\r\nSELECT 'Remove unwanted Columns' as Removed;",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_V2_PRODUCT_DB_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {
									"table_name": "product"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Product DB/brand and product pipelines"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/product_barcode')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "PostgreSqlV2Source",
								"query": "select \n    id,\n    product_id,\n    barcode,\n    created_at,\n    updated_at\nfrom spree_product_barcodes \nOrder by id ASC;"
							},
							"sink": {
								"type": "AzurePostgreSQLSink",
								"writeBatchSize": 1000000,
								"writeBatchTimeout": "00:30:00",
								"writeMethod": "CopyCommand"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "id",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "id",
											"type": "Int32",
											"physicalType": "integer"
										}
									},
									{
										"source": {
											"name": "barcode",
											"type": "String",
											"physicalType": "character varying"
										},
										"sink": {
											"name": "barcode",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "product_id",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "product_id",
											"type": "Int32",
											"physicalType": "integer"
										}
									},
									{
										"source": {
											"name": "created_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										},
										"sink": {
											"name": "created_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										}
									},
									{
										"source": {
											"name": "updated_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										},
										"sink": {
											"name": "updated_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_V1_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_V2_PRODUCT_DB_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {
									"table_name": "product_barcode"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Product DB"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/product_image')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "PostgreSqlV2Source",
								"query": "SELECT id,\n       viewable_id          AS product_id,\n       attachment_file_name AS file_name,\n       created_at,\n       updated_at,\n       1 as order\nFROM   spree_assets\nWHERE  viewable_type = 'Spree::Variant' \nOrder by id ASC;"
							},
							"sink": {
								"type": "AzurePostgreSQLSink",
								"writeBatchSize": 1000000,
								"writeBatchTimeout": "00:30:00",
								"writeMethod": "CopyCommand"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "id",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "id",
											"type": "Int32",
											"physicalType": "integer"
										}
									},
									{
										"source": {
											"name": "created_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										},
										"sink": {
											"name": "created_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										}
									},
									{
										"source": {
											"name": "updated_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										},
										"sink": {
											"name": "updated_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										}
									},
									{
										"source": {
											"name": "product_id",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "product_id",
											"type": "Int32",
											"physicalType": "integer"
										}
									},
									{
										"source": {
											"name": "file_name",
											"type": "String",
											"physicalType": "character varying"
										},
										"sink": {
											"name": "file_name",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "order",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "order",
											"type": "Int32",
											"physicalType": "integer"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_V1_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_V2_PRODUCT_DB_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {
									"table_name": "product_image"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Product DB"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/product_price_versions')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "PostgreSqlV2Source",
								"query": "SELECT ppv.id,\n       ppv.created_at,\n       ppv.item_id AS inventory_modifier_id,\n       ppv.whodunnit AS user_id,\n\t   pim.product_id,\n\t   pim.rule_supermarket_id as supermarket_id,\n       ppv.object_changes,\n       (ppv.object_changes->'action_price'->>0)::numeric AS action_price,\n       (ppv.object_changes->'action_price'->>1)::numeric AS updated_action_price,\n       (ppv.object_changes->'action_sale_price'->>0)::numeric AS sale_price,\n       (ppv.object_changes->'action_sale_price'->>1)::numeric AS updated_sale_price,\n       ppv.event\nFROM spree_product_price_versions ppv\nleft join spree_product_inventory_modifiers pim\non pim.id = ppv.item_id\norder by ppv.id;"
							},
							"sink": {
								"type": "AzurePostgreSQLSink",
								"writeBatchSize": 1000000,
								"writeBatchTimeout": "00:30:00",
								"writeMethod": "CopyCommand"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_V1_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_V2_PRODUCT_DB_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {
									"table_name": {
										"value": "product_price_versions",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Product DB"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/product_taxon')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "PostgreSqlV2Source",
								"query": "SELECT DISTINCT product_id,\n       taxon_id\nFROM   spree_products_taxons;"
							},
							"sink": {
								"type": "AzurePostgreSQLSink",
								"writeBatchSize": 1000000,
								"writeBatchTimeout": "00:30:00",
								"writeMethod": "CopyCommand"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_V1_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_V2_PRODUCT_DB_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {
									"table_name": "product_taxon"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Product DB"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/promotion')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "PostgreSqlV2Source",
								"query": "WITH Cte AS (\n  SELECT DISTINCT\n    sp.id,\n    COALESCE(MAX(CASE WHEN spt.locale = 'en' THEN spt.name END), '') AS name_en,\n    MAX(CASE WHEN spt.locale = 'en' THEN spt.description END) AS description_en,\n    COALESCE(MAX(CASE WHEN spt.locale = 'ar' THEN spt.name END), '') AS name_ar,\n    MAX(CASE WHEN spt.locale = 'ar' THEN spt.description END) AS description_ar,\n    UPPER(REGEXP_REPLACE(TRANSLATE(MAX(CASE WHEN spt.locale = 'en' THEN spt.name END), ' ', '_'), '[^a-zA-Z0-9_]', '', 'g')) AS code,\n    sp.expires_at,\n    sp.starts_at,\n    COALESCE(sp.usage_limit, 0) AS usage_limit,\n    sp.match_policy,\n    sp.created_at,\n    sp.updated_at,\n    sp.per_code_usage_limit,\n    sp.apply_automatically,\n    sp.deleted_at,\n    TRUE AS is_visible\n  FROM spree_promotions AS sp\n  LEFT JOIN spree_promotion_translations AS spt ON spt.spree_promotion_id = sp.id\n  WHERE spt.name IS NOT NULL\n  GROUP BY sp.id\n  ORDER BY sp.id ASC\n)\nSELECT\n  id,\n  name_en,\n  description_en,\n  name_ar,\n  description_ar,\n  code,\n  expires_at,\n  starts_at,\n  usage_limit,\n  match_policy,\n  created_at,\n  updated_at,\n  per_code_usage_limit,\n  apply_automatically,\n  deleted_at,\n  is_visible\nFROM (\n  SELECT\n    id,\n    name_en,\n    description_en,\n    name_ar,\n    description_ar,\n    code,\n    expires_at,\n    starts_at,\n    usage_limit,\n    match_policy,\n    created_at,\n    updated_at,\n    per_code_usage_limit,\n    apply_automatically,\n    deleted_at,\n    is_visible,\n    ROW_NUMBER() OVER (PARTITION BY name_en ORDER BY id) AS rn\n  FROM Cte\n) AS temp\nWHERE rn = 1\nORDER BY name_en;"
							},
							"sink": {
								"type": "AzurePostgreSQLSink",
								"writeBatchSize": 1000000,
								"writeBatchTimeout": "00:30:00",
								"writeMethod": "CopyCommand"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "id",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "id",
											"type": "Int32",
											"physicalType": "integer"
										}
									},
									{
										"source": {
											"name": "name_en",
											"type": "String",
											"physicalType": "text"
										},
										"sink": {
											"name": "name_en",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "name_ar",
											"type": "String",
											"physicalType": "text"
										},
										"sink": {
											"name": "name_ar",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "description_en",
											"type": "String",
											"physicalType": "text"
										},
										"sink": {
											"name": "description_en",
											"type": "String",
											"physicalType": "text"
										}
									},
									{
										"source": {
											"name": "description_ar",
											"type": "String",
											"physicalType": "text"
										},
										"sink": {
											"name": "description_ar",
											"type": "String",
											"physicalType": "text"
										}
									},
									{
										"source": {
											"name": "per_code_usage_limit",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "per_code_usage_limit",
											"type": "Int32",
											"physicalType": "integer"
										}
									},
									{
										"source": {
											"name": "usage_limit",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "usage_limit",
											"type": "Int32",
											"physicalType": "integer"
										}
									},
									{
										"source": {
											"name": "starts_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										},
										"sink": {
											"name": "starts_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										}
									},
									{
										"source": {
											"name": "expires_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										},
										"sink": {
											"name": "expires_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										}
									},
									{
										"source": {
											"name": "apply_automatically",
											"type": "Boolean",
											"physicalType": "boolean"
										},
										"sink": {
											"name": "apply_automatically",
											"type": "Boolean",
											"physicalType": "boolean"
										}
									},
									{
										"source": {
											"name": "is_visible",
											"type": "Boolean",
											"physicalType": "boolean"
										},
										"sink": {
											"name": "is_visible",
											"type": "Boolean",
											"physicalType": "boolean"
										}
									},
									{
										"source": {
											"name": "created_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										},
										"sink": {
											"name": "created_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										}
									},
									{
										"source": {
											"name": "updated_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										},
										"sink": {
											"name": "updated_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										}
									},
									{
										"source": {
											"name": "deleted_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										},
										"sink": {
											"name": "deleted_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										}
									},
									{
										"source": {
											"name": "match_policy",
											"type": "String",
											"physicalType": "character varying"
										},
										"sink": {
											"name": "match_policy",
											"type": "String",
											"physicalType": "character varying"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_V1_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_V2_PRODUCT_DB_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {
									"table_name": "promotion"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Product DB"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/recipe')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "PostgreSqlV2Source",
								"query": "SELECT \n    au.id,\n    COALESCE(sket_en.name, '') AS name_en,\n    COALESCE(sket_en.recipe, '') AS recipe_en,\n    au.calories,\n    au.cuisine_id,\n    CASE WHEN regexp_replace(au.servings, '\\D*(\\d+).*', '\\1') <> '' \n         THEN CAST(regexp_replace(au.servings, '\\D*(\\d+).*', '\\1') AS INTEGER)\n         ELSE 0 \n    END AS servings,\n    au.updated_at,\n    au.visible AS is_visible,\n    au.created_at,\n    COALESCE(sket_en.description, '') AS description_en,\n    COALESCE(sket_ar.name, '') AS name_ar,\n    COALESCE(sket_ar.recipe, '') AS recipe_ar,\n    COALESCE(sket_ar.description, '') AS description_ar,\n    1 AS country_id,\n    '' AS cuisines_banner_image_url,\n    '' AS recipe_banner_image_url,\n    '' AS app_home_image_url,\n    0 AS position\nFROM \n    spree_kitchen_recipes au\nLEFT JOIN \n    spree_kitchen_recipe_translations sket_en ON (sket_en.spree_kitchen_recipe_id = au.id AND sket_en.locale = 'en')\nLEFT JOIN \n    spree_kitchen_recipe_translations sket_ar ON (sket_ar.spree_kitchen_recipe_id = au.id AND sket_ar.locale = 'ar');"
							},
							"sink": {
								"type": "AzurePostgreSQLSink",
								"writeBatchSize": 1000000,
								"writeBatchTimeout": "00:30:00",
								"writeMethod": "CopyCommand"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "id",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "id",
											"type": "Int32",
											"physicalType": "integer"
										}
									},
									{
										"source": {
											"name": "name_en",
											"type": "String",
											"physicalType": "character varying"
										},
										"sink": {
											"name": "name_en",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "name_ar",
											"type": "String",
											"physicalType": "character varying"
										},
										"sink": {
											"name": "name_ar",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "country_id",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "country_id",
											"type": "Int32",
											"physicalType": "integer"
										}
									},
									{
										"source": {
											"name": "cuisine_id",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "cuisine_id",
											"type": "Int32",
											"physicalType": "integer"
										}
									},
									{
										"source": {
											"name": "servings",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "servings",
											"type": "Int32",
											"physicalType": "integer"
										}
									},
									{
										"source": {
											"name": "description_en",
											"type": "String",
											"physicalType": "character varying"
										},
										"sink": {
											"name": "description_en",
											"type": "String",
											"physicalType": "text"
										}
									},
									{
										"source": {
											"name": "description_ar",
											"type": "String",
											"physicalType": "character varying"
										},
										"sink": {
											"name": "description_ar",
											"type": "String",
											"physicalType": "text"
										}
									},
									{
										"source": {
											"name": "recipe_en",
											"type": "String",
											"physicalType": "text"
										},
										"sink": {
											"name": "recipe_en",
											"type": "String",
											"physicalType": "text"
										}
									},
									{
										"source": {
											"name": "recipe_ar",
											"type": "String",
											"physicalType": "text"
										},
										"sink": {
											"name": "recipe_ar",
											"type": "String",
											"physicalType": "text"
										}
									},
									{
										"source": {
											"name": "is_visible",
											"type": "Boolean",
											"physicalType": "boolean"
										},
										"sink": {
											"name": "is_visible",
											"type": "Boolean",
											"physicalType": "boolean"
										}
									},
									{
										"source": {
											"name": "calories",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "calories",
											"type": "Double",
											"physicalType": "double precision"
										}
									},
									{
										"source": {
											"name": "position",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "position",
											"type": "Int32",
											"physicalType": "integer"
										}
									},
									{
										"source": {
											"name": "app_home_image_url",
											"type": "String",
											"physicalType": "text"
										},
										"sink": {
											"name": "app_home_image_url",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "recipe_banner_image_url",
											"type": "String",
											"physicalType": "text"
										},
										"sink": {
											"name": "recipe_banner_image_url",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "cuisines_banner_image_url",
											"type": "String",
											"physicalType": "text"
										},
										"sink": {
											"name": "cuisines_banner_image_url",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "created_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										},
										"sink": {
											"name": "created_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										}
									},
									{
										"source": {
											"name": "updated_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										},
										"sink": {
											"name": "updated_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_V1_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_V2_PRODUCT_DB_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {
									"table_name": "recipe"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Product DB"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/shopping_list_products')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "PostgreSqlV2Source",
								"query": "select \nswp.wishlist_id as shopping_list_id,\nsv.product_id\nFrom spree_wished_products swp\nleft join spree_variants sv on sv.id = swp.variant_id \ngroup by sv.product_id, swp.wishlist_id;"
							},
							"sink": {
								"type": "AzurePostgreSQLSink",
								"writeBatchSize": 1000000,
								"writeBatchTimeout": "00:30:00",
								"writeMethod": "CopyCommand"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "shopping_list_id",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "shopping_list_id",
											"type": "Int32",
											"physicalType": "integer"
										}
									},
									{
										"source": {
											"name": "product_id",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "product_id",
											"type": "Int32",
											"physicalType": "integer"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_V1_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_V2_PRODUCT_DB_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {
									"table_name": "shopping_list_products"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Product DB"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/shopping_lists')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "PostgreSqlV2Source",
								"query": "select\n\tid,\n\tuser_id,\n\tname,\n\tcreated_at,\n\tupdated_at\nFrom spree_wishlists;"
							},
							"sink": {
								"type": "AzurePostgreSQLSink",
								"writeBatchSize": 1000000,
								"writeBatchTimeout": "00:30:00",
								"writeMethod": "CopyCommand"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "id",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "id",
											"type": "Int32",
											"physicalType": "integer"
										}
									},
									{
										"source": {
											"name": "user_id",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "user_id",
											"type": "Int32",
											"physicalType": "integer"
										}
									},
									{
										"source": {
											"name": "name",
											"type": "String",
											"physicalType": "character varying"
										},
										"sink": {
											"name": "name",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "created_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										},
										"sink": {
											"name": "created_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										}
									},
									{
										"source": {
											"name": "updated_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										},
										"sink": {
											"name": "updated_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_V1_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_V2_PRODUCT_DB_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {
									"table_name": "shopping_list"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Product DB"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/store_credit')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "PostgreSqlV2Source",
								"query": "select \n\tid,\n\tuser_id,\n\tcategory_id as store_credit_category_id,\n\ttype_id as \tstore_credit_type_id,\n\tcreated_by_id,\n\tamount,\n\tamount_used,\n\tamount_authorized,\n\tcurrency,\n\tLEFT(memo,200) as memo,\n\tinvalidated_at,\n\texpires_at,\n\tcreated_at,\n\tupdated_at,\n\tdeleted_at\nFrom spree_store_credits;"
							},
							"sink": {
								"type": "AzurePostgreSQLSink",
								"writeBatchSize": 1000000,
								"writeBatchTimeout": "00:30:00",
								"writeMethod": "CopyCommand"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "id",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "id",
											"type": "Int32",
											"physicalType": "integer"
										}
									},
									{
										"source": {
											"name": "user_id",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "user_id",
											"type": "Int32",
											"physicalType": "integer"
										}
									},
									{
										"source": {
											"name": "created_by_id",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "created_by_id",
											"type": "Int32",
											"physicalType": "integer"
										}
									},
									{
										"source": {
											"name": "amount",
											"type": "Decimal",
											"physicalType": "numeric"
										},
										"sink": {
											"name": "amount",
											"type": "Double",
											"physicalType": "double precision"
										}
									},
									{
										"source": {
											"name": "amount_used",
											"type": "Decimal",
											"physicalType": "numeric"
										},
										"sink": {
											"name": "amount_used",
											"type": "Double",
											"physicalType": "double precision"
										}
									},
									{
										"source": {
											"name": "amount_authorized",
											"type": "Decimal",
											"physicalType": "numeric"
										},
										"sink": {
											"name": "amount_authorized",
											"type": "Double",
											"physicalType": "double precision"
										}
									},
									{
										"source": {
											"name": "currency",
											"type": "String",
											"physicalType": "character varying"
										},
										"sink": {
											"name": "currency",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "memo",
											"type": "String",
											"physicalType": "text"
										},
										"sink": {
											"name": "memo",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "invalidated_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										},
										"sink": {
											"name": "invalidated_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										}
									},
									{
										"source": {
											"name": "expires_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										},
										"sink": {
											"name": "expires_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										}
									},
									{
										"source": {
											"name": "created_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										},
										"sink": {
											"name": "created_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										}
									},
									{
										"source": {
											"name": "updated_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										},
										"sink": {
											"name": "updated_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										}
									},
									{
										"source": {
											"name": "deleted_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										},
										"sink": {
											"name": "deleted_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_V1_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_V2_ORDER_DB_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {
									"table_name": "store_credit"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Order DB"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/store_credit_category')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "PostgreSqlV2Source",
								"query": "select\n\tid,\n\tname,\n\tavailable_to_admin,\n\tcreated_at,\n\tupdated_at\nFrom spree_store_credit_categories"
							},
							"sink": {
								"type": "AzurePostgreSQLSink",
								"writeBatchSize": 1000000,
								"writeBatchTimeout": "00:30:00",
								"writeMethod": "CopyCommand"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_V1_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_V2_ORDER_DB_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {
									"table_name": "store_credit_category"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Order DB"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/store_credit_transaction')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "PostgreSqlV2Source",
								"query": "select\n\tid,\n\tstore_credit_id,\n\taction,\n\tamount,\n\tuser_total_amount,\n\tauthorization_code,\n\tupdate_reason_id,\n\toriginator_type,\n\toriginator_id,\n\tcurrency,\n\tCOALESCE(created_at,current_timestamp) as created_at,\n\tCOALESCE(updated_at,current_timestamp) as updated_at\nFrom spree_store_credit_events;"
							},
							"sink": {
								"type": "AzurePostgreSQLSink",
								"writeBatchSize": 1000000,
								"writeBatchTimeout": "00:30:00",
								"writeMethod": "CopyCommand"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_V1_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_V2_ORDER_DB_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {
									"table_name": "store_credit_transaction"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Order DB"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/store_credit_type')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "PostgreSqlV2Source",
								"query": "select\n\tid,\n\tname,\n\tpriority,\n\tcreated_at,\n\tupdated_at\nFrom spree_store_credit_types;"
							},
							"sink": {
								"type": "AzurePostgreSQLSink",
								"writeBatchSize": 1000000,
								"writeBatchTimeout": "00:30:00",
								"writeMethod": "CopyCommand"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_V1_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_V2_ORDER_DB_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {
									"table_name": "store_credit_type"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Order DB"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/store_credit_update_reason')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "store_credit_update_reason",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "PostgreSqlV2Source",
								"query": "select\n\tid,\n\tname,\n\tcreated_at,\n\tupdated_at\nFrom spree_store_credit_update_reasons;"
							},
							"sink": {
								"type": "AzurePostgreSQLSink",
								"writeBatchSize": 1000000,
								"writeBatchTimeout": "00:30:00",
								"writeMethod": "CopyCommand"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_V1_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_V2_ORDER_DB_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {
									"table_name": "store_credit_update_reason"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Order DB"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/super_market_payment')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "PostgreSqlV2Source",
								"query": "SELECT\n  id AS super_market_id,\n  payment_id,\n  delivery_option_id\nFROM (\n  SELECT\n    id,\n    UNNEST(REGEXP_MATCHES(\n      REPLACE(\n        REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(payment_options::text, '^.*home_delivery:(.*)$', '\\1'), 'store_pick_up:.*$', ''), '\\n', ''),\n        '''(\\d+)''',\n        '\\1'\n      ),\n      '(\\d+)',\n      'g'\n    ))::INTEGER AS payment_id,\n    '1' AS delivery_option_id -- Home Delivery type id\n  FROM danube_supermarkets\n  WHERE payment_options::text LIKE '%home_delivery%'\n  UNION ALL\n  SELECT\n    id AS super_market_id,\n    UNNEST(REGEXP_MATCHES(\n      REPLACE(\n        REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(payment_options::text, '^.*store_pick_up:(.*)$', '\\1'), 'home_delivery:.*$', ''), '\\n', ''),\n        '''(\\d+)''',\n        '\\1'\n      ),\n      '(\\d+)',\n      'g'\n    ))::INTEGER AS payment_id,\n    '2' AS delivery_option_id -- Store Pickup Delivery type id\n  FROM danube_supermarkets\n  WHERE payment_options::text LIKE '%store_pick_up%'\n) AS subquery_alias\nORDER BY super_market_id;"
							},
							"sink": {
								"type": "AzurePostgreSQLSink",
								"writeBatchSize": 1000000,
								"writeBatchTimeout": "00:30:00",
								"writeMethod": "CopyCommand"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_V1_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_V2_USER_DB_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {
									"table_name": "super_market_payment"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "User DB"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/supermarket')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "supermarket_to_datalake",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "PostgreSqlV2Source",
								"query": "select\n   ds.id,\n   dst.name,\n\tconcat(dst.address1,' ',dst.address2) as address,\n    LEFT(COALESCE(REPLACE(REPLACE(ds.phone, '+966', ''), '+973', ''), ''), 16) AS mobile_number,\n   ds.country_id,\n   ds.created_at,\n   ds.state_id,\n   lower(dst.city) as city,\n   ds.updated_at,\n   ds.visible as is_visible,\n   ds.latitude,\n   ds.longitude,\n   ds.time_slots_schedule_time_offset_override AS time_slots_lead_time,\n   ds.express_fee AS express_delivery_fee,\n   ds.call_masking as call_mask,\n   ds.min_item_total_for_free_delivery as minimum_total_amount_for_free_delivery,\n   COALESCE(dst.description, '') as description\nfrom danube_supermarkets ds\nleft join danube_supermarket_translations dst on dst.danube_supermarket_id =ds.id and dst.locale='en'\norder by ds.id;"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings",
									"copyBehavior": "FlattenHierarchy"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "id",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "id",
											"type": "Int32",
											"physicalType": "INT_32"
										}
									},
									{
										"source": {
											"name": "name",
											"type": "String",
											"physicalType": "character varying"
										},
										"sink": {
											"name": "name",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "address",
											"type": "String",
											"physicalType": "text"
										},
										"sink": {
											"name": "address",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "mobile_number",
											"type": "String",
											"physicalType": "text"
										},
										"sink": {
											"name": "mobile_number",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "country_id",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "country_id",
											"type": "Int32",
											"physicalType": "INT_32"
										}
									},
									{
										"source": {
											"name": "created_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										},
										"sink": {
											"name": "created_at",
											"type": "DateTime",
											"physicalType": "INT_96"
										}
									},
									{
										"source": {
											"name": "state_id",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "state_id",
											"type": "Int32",
											"physicalType": "INT_32"
										}
									},
									{
										"source": {
											"name": "city",
											"type": "String",
											"physicalType": "text"
										},
										"sink": {
											"name": "city",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "updated_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										},
										"sink": {
											"name": "updated_at",
											"type": "DateTime",
											"physicalType": "INT_96"
										}
									},
									{
										"source": {
											"name": "is_visible",
											"type": "Boolean",
											"physicalType": "boolean"
										},
										"sink": {
											"name": "is_visible",
											"type": "Boolean",
											"physicalType": "BOOLEAN"
										}
									},
									{
										"source": {
											"name": "latitude",
											"type": "Double",
											"physicalType": "double precision"
										},
										"sink": {
											"name": "latitude",
											"type": "Double",
											"physicalType": "DOUBLE"
										}
									},
									{
										"source": {
											"name": "longitude",
											"type": "Double",
											"physicalType": "double precision"
										},
										"sink": {
											"name": "longitude",
											"type": "Double",
											"physicalType": "DOUBLE"
										}
									},
									{
										"source": {
											"name": "time_slots_lead_time",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "time_slots_lead_time",
											"type": "Int32",
											"physicalType": "INT_32"
										}
									},
									{
										"source": {
											"name": "express_delivery_fee",
											"type": "Decimal",
											"physicalType": "numeric"
										},
										"sink": {
											"name": "express_delivery_fee",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										}
									},
									{
										"source": {
											"name": "call_mask",
											"type": "Boolean",
											"physicalType": "boolean"
										},
										"sink": {
											"name": "call_mask",
											"type": "Boolean",
											"physicalType": "BOOLEAN"
										}
									},
									{
										"source": {
											"name": "minimum_total_amount_for_free_delivery",
											"type": "Decimal",
											"physicalType": "numeric"
										},
										"sink": {
											"name": "minimum_total_amount_for_free_delivery",
											"type": "Decimal",
											"physicalType": "DECIMAL"
										}
									},
									{
										"source": {
											"name": "description",
											"type": "String",
											"physicalType": "text"
										},
										"sink": {
											"name": "description",
											"type": "String",
											"physicalType": "UTF8"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_V1_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_Intermiadate_Result",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "supermarket_to_datalake",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "supermarket",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"supermarket": {},
									"city": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Delete1",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "Data flow1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DS_Intermiadate_Result",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "User DB"
				},
				"annotations": []
			},
			"dependsOn": []
		}
	]
}