{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "Az-adf-ecomm-v1-v2"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/recipe')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "PostgreSqlV2Source",
								"query": "SELECT \n    au.id,\n    COALESCE(sket_en.name, '') AS name_en,\n    COALESCE(sket_en.recipe, '') AS recipe_en,\n    au.calories,\n    au.cuisine_id,\n    CASE WHEN regexp_replace(au.servings, '\\D*(\\d+).*', '\\1') <> '' \n         THEN CAST(regexp_replace(au.servings, '\\D*(\\d+).*', '\\1') AS INTEGER)\n         ELSE 0 \n    END AS servings,\n    au.updated_at,\n    au.visible AS is_visible,\n    au.created_at,\n    COALESCE(sket_en.description, '') AS description_en,\n    COALESCE(sket_ar.name, '') AS name_ar,\n    COALESCE(sket_ar.recipe, '') AS recipe_ar,\n    COALESCE(sket_ar.description, '') AS description_ar,\n    1 AS country_id,\n    '' AS cuisines_banner_image_url,\n    '' AS recipe_banner_image_url,\n    '' AS app_home_image_url,\n    0 AS position\nFROM \n    spree_kitchen_recipes au\nLEFT JOIN \n    spree_kitchen_recipe_translations sket_en ON (sket_en.spree_kitchen_recipe_id = au.id AND sket_en.locale = 'en')\nLEFT JOIN \n    spree_kitchen_recipe_translations sket_ar ON (sket_ar.spree_kitchen_recipe_id = au.id AND sket_ar.locale = 'ar');"
							},
							"sink": {
								"type": "AzurePostgreSQLSink",
								"writeBatchSize": 1000000,
								"writeBatchTimeout": "00:30:00",
								"writeMethod": "CopyCommand"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "id",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "id",
											"type": "Int32",
											"physicalType": "integer"
										}
									},
									{
										"source": {
											"name": "name_en",
											"type": "String",
											"physicalType": "character varying"
										},
										"sink": {
											"name": "name_en",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "name_ar",
											"type": "String",
											"physicalType": "character varying"
										},
										"sink": {
											"name": "name_ar",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "country_id",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "country_id",
											"type": "Int32",
											"physicalType": "integer"
										}
									},
									{
										"source": {
											"name": "cuisine_id",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "cuisine_id",
											"type": "Int32",
											"physicalType": "integer"
										}
									},
									{
										"source": {
											"name": "servings",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "servings",
											"type": "Int32",
											"physicalType": "integer"
										}
									},
									{
										"source": {
											"name": "description_en",
											"type": "String",
											"physicalType": "character varying"
										},
										"sink": {
											"name": "description_en",
											"type": "String",
											"physicalType": "text"
										}
									},
									{
										"source": {
											"name": "description_ar",
											"type": "String",
											"physicalType": "character varying"
										},
										"sink": {
											"name": "description_ar",
											"type": "String",
											"physicalType": "text"
										}
									},
									{
										"source": {
											"name": "recipe_en",
											"type": "String",
											"physicalType": "text"
										},
										"sink": {
											"name": "recipe_en",
											"type": "String",
											"physicalType": "text"
										}
									},
									{
										"source": {
											"name": "recipe_ar",
											"type": "String",
											"physicalType": "text"
										},
										"sink": {
											"name": "recipe_ar",
											"type": "String",
											"physicalType": "text"
										}
									},
									{
										"source": {
											"name": "is_visible",
											"type": "Boolean",
											"physicalType": "boolean"
										},
										"sink": {
											"name": "is_visible",
											"type": "Boolean",
											"physicalType": "boolean"
										}
									},
									{
										"source": {
											"name": "calories",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "calories",
											"type": "Double",
											"physicalType": "double precision"
										}
									},
									{
										"source": {
											"name": "position",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "position",
											"type": "Int32",
											"physicalType": "integer"
										}
									},
									{
										"source": {
											"name": "app_home_image_url",
											"type": "String",
											"physicalType": "text"
										},
										"sink": {
											"name": "app_home_image_url",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "recipe_banner_image_url",
											"type": "String",
											"physicalType": "text"
										},
										"sink": {
											"name": "recipe_banner_image_url",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "cuisines_banner_image_url",
											"type": "String",
											"physicalType": "text"
										},
										"sink": {
											"name": "cuisines_banner_image_url",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "created_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										},
										"sink": {
											"name": "created_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										}
									},
									{
										"source": {
											"name": "updated_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										},
										"sink": {
											"name": "updated_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_V1_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_V2_PRODUCT_DB_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {
									"table_name": "recipe"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Product DB"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/offline_product_barcode')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "PostgreSqlV2Source",
								"query": "SELECT \r\n    id AS offline_product_id,\r\n    CASE \r\n        WHEN (barcode_element ~ E'^\\\\d+$') THEN CAST(barcode_element AS BIGINT)\r\n        ELSE -1\r\n    END AS barcode,\r\n    1 AS \"order\"\r\nFROM   \r\n    spree_custom_products\r\nCROSS JOIN LATERAL unnest(barcodes) AS barcode_element\r\nORDER BY \r\n    id DESC;"
							},
							"sink": {
								"type": "AzurePostgreSQLSink",
								"writeBatchSize": 1000000,
								"writeBatchTimeout": "00:30:00",
								"writeMethod": "CopyCommand"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_V1_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_V2_PRODUCT_DB_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {
									"table_name": "offline_product_barcode"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Product DB"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/inventory_modifiers')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "PostgreSqlV2Source",
								"query": "SELECT id,\n       product_id,\n       Cast(action_price as double precision),\n       action_in_stock AS track_stock,\n       COALESCE(rule_supermarket_id, -1) AS supermarket_id,\n       created_at,\n       updated_at,\n\t   Cast(action_sale_price as double precision) AS sale_price,\n       Date(action_sale_start) AS sale_start_date,\n       Substring(To_char(action_sale_start, 'HH24:MI:SS'), 1, 8) AS sale_start_time,\n       Date(action_sale_end) AS sale_end_date,\n       Substring(To_char(action_sale_end, 'HH24:MI:SS'), 1, 8)   AS sale_end_time,\n       Date(availability_start_time) AS availability_start_date,\n       -- availability_start_time (timestamp without time zone so we need to extract using string manipulation) \n       Date(availability_end_time) AS availability_end_date,\n       stock_quantity,\n       action_sale_price AS cost_price\nFROM   spree_product_inventory_modifiers\norder by id ASC;"
							},
							"sink": {
								"type": "AzurePostgreSQLSink",
								"writeBatchSize": 1000000,
								"writeBatchTimeout": "00:30:00",
								"writeMethod": "CopyCommand"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "id",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "id",
											"type": "Int32",
											"physicalType": "integer"
										}
									},
									{
										"source": {
											"name": "product_id",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "product_id",
											"type": "Int32",
											"physicalType": "integer"
										}
									},
									{
										"source": {
											"name": "supermarket_id",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "supermarket_id",
											"type": "Int32",
											"physicalType": "integer"
										}
									},
									{
										"source": {
											"name": "action_price",
											"type": "Double",
											"physicalType": "double precision"
										},
										"sink": {
											"name": "action_price",
											"type": "Double",
											"physicalType": "double precision"
										}
									},
									{
										"source": {
											"name": "sale_price",
											"type": "Double",
											"physicalType": "double precision"
										},
										"sink": {
											"name": "sale_price",
											"type": "Double",
											"physicalType": "double precision"
										}
									},
									{
										"source": {
											"name": "sale_start_date",
											"type": "DateTime",
											"physicalType": "date"
										},
										"sink": {
											"name": "sale_start_date",
											"type": "DateTime",
											"physicalType": "date"
										}
									},
									{
										"source": {
											"name": "sale_end_date",
											"type": "DateTime",
											"physicalType": "date"
										},
										"sink": {
											"name": "sale_end_date",
											"type": "DateTime",
											"physicalType": "date"
										}
									},
									{
										"source": {
											"name": "sale_start_time",
											"type": "String",
											"physicalType": "text"
										},
										"sink": {
											"name": "sale_start_time",
											"type": "TimeSpan",
											"physicalType": "time without time zone"
										}
									},
									{
										"source": {
											"name": "sale_end_time",
											"type": "String",
											"physicalType": "text"
										},
										"sink": {
											"name": "sale_end_time",
											"type": "TimeSpan",
											"physicalType": "time without time zone"
										}
									},
									{
										"source": {
											"name": "availability_start_date",
											"type": "DateTime",
											"physicalType": "date"
										},
										"sink": {
											"name": "availability_start_date",
											"type": "DateTime",
											"physicalType": "date"
										}
									},
									{
										"source": {
											"name": "availability_end_date",
											"type": "DateTime",
											"physicalType": "date"
										},
										"sink": {
											"name": "availability_end_date",
											"type": "DateTime",
											"physicalType": "date"
										}
									},
									{
										"source": {
											"name": "track_stock",
											"type": "Boolean",
											"physicalType": "boolean"
										},
										"sink": {
											"name": "track_stock",
											"type": "Boolean",
											"physicalType": "boolean"
										}
									},
									{
										"source": {
											"name": "stock_quantity",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "stock_quantity",
											"type": "Int32",
											"physicalType": "integer"
										}
									},
									{
										"source": {
											"name": "created_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										},
										"sink": {
											"name": "created_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										}
									},
									{
										"source": {
											"name": "updated_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										},
										"sink": {
											"name": "updated_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_V1_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_V2_PRODUCT_DB_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {
									"table_name": "inventory_modifiers"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Product DB"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/offline_product')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "PostgreSqlV2Source",
								"query": "SELECT id,\n\tCOALESCE(sku, '') AS sku,\n       COALESCE(Cast(price AS DOUBLE PRECISION),0) as price,\n       created_at,\n       updated_at,\n\tCOALESCE(name_en, '') AS name,\n       1 AS country_id,\n       1 AS order\nFROM   spree_custom_products;"
							},
							"sink": {
								"type": "AzurePostgreSQLSink",
								"writeBatchSize": 1000000,
								"writeBatchTimeout": "00:30:00",
								"writeMethod": "CopyCommand"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "id",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "id",
											"type": "Int32",
											"physicalType": "integer"
										}
									},
									{
										"source": {
											"name": "name",
											"type": "String",
											"physicalType": "character varying"
										},
										"sink": {
											"name": "name",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "sku",
											"type": "String",
											"physicalType": "character varying"
										},
										"sink": {
											"name": "sku",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "price",
											"type": "Double",
											"physicalType": "double precision"
										},
										"sink": {
											"name": "price",
											"type": "Double",
											"physicalType": "double precision"
										}
									},
									{
										"source": {
											"name": "country_id",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "country_id",
											"type": "Int32",
											"physicalType": "integer"
										}
									},
									{
										"source": {
											"name": "created_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										},
										"sink": {
											"name": "created_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										}
									},
									{
										"source": {
											"name": "updated_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										},
										"sink": {
											"name": "updated_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_V1_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_V2_PRODUCT_DB_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {
									"table_name": "offline_product"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Product DB"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/bundle_product')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "PostgreSqlV2Source",
								"query": "SELECT \n  master_product_id, \n  child_product_id, \n  quantity \nFROM \n  spree_bundle_products;"
							},
							"sink": {
								"type": "AzurePostgreSQLSink",
								"writeBatchSize": 1000000,
								"writeBatchTimeout": "00:30:00",
								"writeMethod": "CopyCommand"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "master_product_id",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "master_product_id",
											"type": "Int32",
											"physicalType": "integer"
										}
									},
									{
										"source": {
											"name": "child_product_id",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "child_product_id",
											"type": "Int32",
											"physicalType": "integer"
										}
									},
									{
										"source": {
											"name": "quantity",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "quantity",
											"type": "Int32",
											"physicalType": "integer"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_V1_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_V2_PRODUCT_DB_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {
									"table_name": "bundle_products"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Product DB"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/cuisine')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "PostgreSqlV2Source",
								"query": "SELECT \n  id, \n  name_en, \n  name_ar, \n  created_at, \n  updated_at, \n  sort_order as position \nFROM \n  spree_kitchen_cuisines\nOrder by id ASC;"
							},
							"sink": {
								"type": "AzurePostgreSQLSink",
								"writeBatchSize": 1000000,
								"writeBatchTimeout": "00:30:00",
								"writeMethod": "CopyCommand"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "id",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "id",
											"type": "Int32",
											"physicalType": "integer"
										}
									},
									{
										"source": {
											"name": "name_en",
											"type": "String",
											"physicalType": "character varying"
										},
										"sink": {
											"name": "name_en",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "name_ar",
											"type": "String",
											"physicalType": "character varying"
										},
										"sink": {
											"name": "name_ar",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "position",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "position",
											"type": "Int32",
											"physicalType": "integer"
										}
									},
									{
										"source": {
											"name": "created_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										},
										"sink": {
											"name": "created_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										}
									},
									{
										"source": {
											"name": "updated_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										},
										"sink": {
											"name": "updated_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_V1_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_V2_PRODUCT_DB_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {
									"table_name": "cuisine"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Product DB"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ingredient')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "PostgreSqlV2Source",
								"query": "select \n  id, \n  name_en, \n  name_ar, \n  taxon_id, \n  kitchen_recipe_id as recipe_id, \n  quantity, \n  COALESCE(Cast(measurement AS CHARACTER varying),'') AS measurement,\n  created_at, \n  updated_at \nfrom \n  spree_kitchen_ingredients\norder by id ASC;"
							},
							"sink": {
								"type": "AzurePostgreSQLSink",
								"writeBatchSize": 1000000,
								"writeBatchTimeout": "00:30:00",
								"writeMethod": "CopyCommand"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "id",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "id",
											"type": "Int32",
											"physicalType": "integer"
										}
									},
									{
										"source": {
											"name": "name_en",
											"type": "String",
											"physicalType": "character varying"
										},
										"sink": {
											"name": "name_en",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "name_ar",
											"type": "String",
											"physicalType": "character varying"
										},
										"sink": {
											"name": "name_ar",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "recipe_id",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "recipe_id",
											"type": "Int32",
											"physicalType": "integer"
										}
									},
									{
										"source": {
											"name": "taxon_id",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "taxon_id",
											"type": "Int32",
											"physicalType": "integer"
										}
									},
									{
										"source": {
											"name": "quantity",
											"type": "String",
											"physicalType": "character varying"
										},
										"sink": {
											"name": "quantity",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "measurement",
											"type": "String",
											"physicalType": "character varying"
										},
										"sink": {
											"name": "measurement",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "created_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										},
										"sink": {
											"name": "created_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										}
									},
									{
										"source": {
											"name": "updated_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										},
										"sink": {
											"name": "updated_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_V1_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_V2_PRODUCT_DB_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {
									"table_name": "ingredient"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Product DB"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ingredient_product')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "PostgreSqlV2Source",
								"query": "select \n  -- id,\n  Cast(kitchen_ingredient_id AS integer) AS ingredient_id,\n  Cast(recommended_product_id AS integer) AS product_id\nfrom spree_ingredient_products\n-- order by id asc;"
							},
							"sink": {
								"type": "AzurePostgreSQLSink",
								"writeBatchSize": 1000000,
								"writeBatchTimeout": "00:30:00",
								"writeMethod": "CopyCommand"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "ingredient_id",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "ingredient_id",
											"type": "Int32",
											"physicalType": "integer"
										}
									},
									{
										"source": {
											"name": "product_id",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "product_id",
											"type": "Int32",
											"physicalType": "integer"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_V1_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_V2_PRODUCT_DB_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {
									"table_name": "ingredient_product"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Product DB"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/nutritional_facts')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "PostgreSqlV2Source",
								"query": "WITH json_to_extract AS\n(\n       SELECT id,\n              quantity_en AS quantity,\n              product_id,\n              created_at,\n              updated_at,\n              quantity_ar,\n              nutrients :: jsonb AS json_data\n       FROM   spree_nutritional_facts )\nSELECT    id,\n          quantity,\n          quantity_ar,\n          product_id,\n          calories,\n          total_fat,\n          saturated_fat,\n          trans_fat,\n          cholesterol,\n          total_carbohydrates,\n          sugar,\n          dietary_fiber,\n          protein,\n          salt,\n          sodium,\n          iron,\n          calcium,\n          vitamin_a,\n          vitamin_c,\n          vitamin_d,\n          ph,\n          created_at,\n          updated_at\nFROM      json_to_extract\nLEFT JOIN lateral\n          (\n                 Select ( Regexp_matches( json_data :: text, 'calories:\\s*([\\d.]+)(?:\\s*(kcal|g|mg))?' ) ) [1]            AS calories,\n                        ( regexp_matches( json_data :: text, 'total_fat:\\s*([\\d.]+)(?:\\s*(kcal|g|mg))?' ) ) [1]           AS total_fat,\n                        ( regexp_matches( json_data :: text, 'saturated_fat:\\s*([\\d.]+)(?:\\s*(kcal|g|mg))?' ) ) [1]       AS saturated_fat,\n                        ( regexp_matches( json_data :: text, 'trans_fat:\\s*([\\d.]+)(?:\\s*(kcal|g|mg))?' ) ) [1]           AS trans_fat,\n                        ( regexp_matches( json_data :: text, 'cholesterol:\\s*([\\d.]+)(?:\\s*(kcal|g|mg))?' ) ) [1]         AS cholesterol,\n                        ( regexp_matches( json_data :: text, 'total_carbohydrates:\\s*([\\d.]+)(?:\\s*(kcal|g|mg))?' ) ) [1] AS total_carbohydrates,\n                        ( regexp_matches( json_data :: text, 'sugar:\\s*([\\d.]+)(?:\\s*(kcal|g|mg))?' ) ) [1]               AS sugar,\n                        ( regexp_matches( json_data :: text, 'fiber:\\s*([\\d.]+)(?:\\s*(kcal|g|mg))?' ) ) [1]               AS dietary_fiber,\n                        ( regexp_matches( json_data :: text, 'protein:\\s*([\\d.]+)(?:\\s*(kcal|g|mg))?' ) ) [1]             AS protein,\n                        ( regexp_matches( json_data :: text, 'salt:\\s*([\\d.]+)(?:\\s*(kcal|g|mg))?' ) ) [1]                AS salt,\n                        ( regexp_matches( json_data :: text, 'sodium:\\s*([\\d.]+)(?:\\s*(kcal|g|mg))?' ) ) [1]              AS sodium,\n                        ( regexp_matches( json_data :: text, 'iron:\\s*([\\d.]+)(?:\\s*(kcal|g|mg))?' ) ) [1]                AS iron,\n                        ( regexp_matches( json_data :: text, 'calcium:\\s*([\\d.]+)(?:\\s*(kcal|g|mg))?' ) ) [1]             AS calcium,\n                        ( regexp_matches( json_data :: text, 'vitamin_a:\\s*([\\d.]+)(?:\\s*(kcal|g|mg))?' ) ) [1]           AS vitamin_a,\n                        ( regexp_matches( json_data :: text, 'vitamin_c:\\s*([\\d.]+)(?:\\s*(kcal|g|mg))?' ) ) [1]           AS vitamin_c,\n                        ( regexp_matches( json_data :: text, 'vitamin_d:\\s*([\\d.]+)(?:\\s*(kcal|g|mg))?' ) ) [1]           AS vitamin_d,\n                        ( regexp_matches( json_data :: text, 'ph:\\s*([\\d.]+)(?:\\s*(kcal|g|mg))?' ) ) [1]                  AS ph ) AS nutrient_values\nON        true\nORDER BY  id ASC;"
							},
							"sink": {
								"type": "AzurePostgreSQLSink",
								"writeBatchSize": 1000000,
								"writeBatchTimeout": "00:30:00",
								"writeMethod": "CopyCommand"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "id",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "id",
											"type": "Int32",
											"physicalType": "integer"
										}
									},
									{
										"source": {
											"name": "product_id",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "product_id",
											"type": "Int32",
											"physicalType": "integer"
										}
									},
									{
										"source": {
											"name": "quantity",
											"type": "String",
											"physicalType": "character varying"
										},
										"sink": {
											"name": "quantity",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "quantity_ar",
											"type": "String",
											"physicalType": "character varying"
										},
										"sink": {
											"name": "quantity_ar",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "created_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										},
										"sink": {
											"name": "created_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										}
									},
									{
										"source": {
											"name": "updated_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										},
										"sink": {
											"name": "updated_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										}
									},
									{
										"source": {
											"name": "calories",
											"type": "String",
											"physicalType": "text"
										},
										"sink": {
											"name": "calories",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "total_fat",
											"type": "String",
											"physicalType": "text"
										},
										"sink": {
											"name": "total_fat",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "saturated_fat",
											"type": "String",
											"physicalType": "text"
										},
										"sink": {
											"name": "saturated_fat",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "trans_fat",
											"type": "String",
											"physicalType": "text"
										},
										"sink": {
											"name": "trans_fat",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "cholesterol",
											"type": "String",
											"physicalType": "text"
										},
										"sink": {
											"name": "cholesterol",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "total_carbohydrates",
											"type": "String",
											"physicalType": "text"
										},
										"sink": {
											"name": "total_carbohydrates",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "sugar",
											"type": "String",
											"physicalType": "text"
										},
										"sink": {
											"name": "sugar",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "dietary_fiber",
											"type": "String",
											"physicalType": "text"
										},
										"sink": {
											"name": "dietary_fiber",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "protein",
											"type": "String",
											"physicalType": "text"
										},
										"sink": {
											"name": "protein",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "salt",
											"type": "String",
											"physicalType": "text"
										},
										"sink": {
											"name": "salt",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "sodium",
											"type": "String",
											"physicalType": "text"
										},
										"sink": {
											"name": "sodium",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "iron",
											"type": "String",
											"physicalType": "text"
										},
										"sink": {
											"name": "iron",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "calcium",
											"type": "String",
											"physicalType": "text"
										},
										"sink": {
											"name": "calcium",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "vitamin_a",
											"type": "String",
											"physicalType": "text"
										},
										"sink": {
											"name": "vitamin_a",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "vitamin_c",
											"type": "String",
											"physicalType": "text"
										},
										"sink": {
											"name": "vitamin_c",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "vitamin_d",
											"type": "String",
											"physicalType": "text"
										},
										"sink": {
											"name": "vitamin_d",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "ph",
											"type": "String",
											"physicalType": "text"
										},
										"sink": {
											"name": "ph",
											"type": "String",
											"physicalType": "character varying"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_V1_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_V2_PRODUCT_DB_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {
									"table_name": "nutritional_facts"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Product DB"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/option_type')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "PostgreSqlV2Source",
								"query": "select sot.id, \n\tsott1.name as name_en,\n\tcoalesce(sott2.name,'') as name_ar,\n\tcoalesce(sott1.presentation,'') as presentation_en,\n\tcoalesce(sott2.presentation,'') as presentation_ar,\n    sot.created_at,\n    sot.updated_at\n\t\nfrom spree_option_types sot\nleft join spree_option_type_translations sott1 on sot.id = sott1.spree_option_type_id\nand sott1.locale='en'\nleft join spree_option_type_translations sott2 on sot.id = sott2.spree_option_type_id\nand sott2.locale='ar';"
							},
							"sink": {
								"type": "AzurePostgreSQLSink",
								"writeBatchSize": 1000000,
								"writeBatchTimeout": "00:30:00",
								"writeMethod": "CopyCommand"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "id",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "id",
											"type": "Int32",
											"physicalType": "integer"
										}
									},
									{
										"source": {
											"name": "name_en",
											"type": "String",
											"physicalType": "character varying"
										},
										"sink": {
											"name": "name_en",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "name_ar",
											"type": "String",
											"physicalType": "character varying"
										},
										"sink": {
											"name": "name_ar",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "presentation_en",
											"type": "String",
											"physicalType": "character varying"
										},
										"sink": {
											"name": "presentation_en",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "presentation_ar",
											"type": "String",
											"physicalType": "character varying"
										},
										"sink": {
											"name": "presentation_ar",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "created_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										},
										"sink": {
											"name": "created_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										}
									},
									{
										"source": {
											"name": "updated_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										},
										"sink": {
											"name": "updated_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_V1_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_V2_PRODUCT_DB_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {
									"table_name": "option_type"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Product DB"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/option_value')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "PostgreSqlV2Source",
								"query": "SELECT sov.id,\n       coalesce(sovt1.name,'') as name,\n       position,\n\t   coalesce(sovt1.presentation,'') as presentation_en,\n       coalesce(sovt2.presentation,'') AS presentation_ar,\n       sov.option_type_id,\n       sov.created_at,\n       sov.updated_at\nFROM   spree_option_values sov\nleft join spree_option_value_translations sovt1\non sov.id = sovt1.spree_option_value_id and sovt1.locale='en'\nleft join spree_option_value_translations sovt2\non sov.id = sovt2.spree_option_value_id and sovt2.locale='ar';"
							},
							"sink": {
								"type": "AzurePostgreSQLSink",
								"writeBatchSize": 1000000,
								"writeBatchTimeout": "00:30:00",
								"writeMethod": "CopyCommand"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "id",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "id",
											"type": "Int32",
											"physicalType": "integer"
										}
									},
									{
										"source": {
											"name": "option_type_id",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "option_type_id",
											"type": "Int32",
											"physicalType": "integer"
										}
									},
									{
										"source": {
											"name": "name",
											"type": "String",
											"physicalType": "character varying"
										},
										"sink": {
											"name": "name",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "presentation_en",
											"type": "String",
											"physicalType": "character varying"
										},
										"sink": {
											"name": "presentation_en",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "presentation_ar",
											"type": "String",
											"physicalType": "character varying"
										},
										"sink": {
											"name": "presentation_ar",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "position",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "position",
											"type": "Int32",
											"physicalType": "integer"
										}
									},
									{
										"source": {
											"name": "created_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										},
										"sink": {
											"name": "created_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										}
									},
									{
										"source": {
											"name": "updated_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										},
										"sink": {
											"name": "updated_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_V1_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_V2_PRODUCT_DB_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {
									"table_name": "option_value"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Product DB"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/product')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "addsuppliercodecolumn",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "PostgreSqlV2Source",
								"query": "WITH brand AS (\r\n  SELECT \r\n    rt.id,\r\n    COALESCE(rt.name_en,'') AS name_en,\r\n    COALESCE(\r\n      CASE\r\n        WHEN LENGTH(rt.name_en) < 5 THEN \r\n          UPPER(REGEXP_REPLACE(TRANSLATE(rt.name_en, ' ', '_'), '[^a-zA-Z0-9_]', '', 'g')) || '_' || rt.id\r\n        ELSE \r\n          UPPER(SUBSTRING(REGEXP_REPLACE(TRANSLATE(rt.name_en, ' ', ''), '[^a-zA-Z0-9]', '', 'g'), 1, 1)) ||\r\n          UPPER(SUBSTRING(REGEXP_REPLACE(SUBSTRING(REGEXP_REPLACE(TRANSLATE(rt.name_en, ' ', ''), '[^a-zA-Z0-9]', ' ', 'g'), 2), ' ', ''), 1, 1)) ||\r\n          '_' || rt.id\r\n      END, \r\n    '') AS code,\r\n    rt.created_at,\r\n    rt.updated_at,\r\n    rt.temp_taxon_id,\r\n    COALESCE(rt.name_ar, '') AS name_ar\r\n  FROM (\r\n    SELECT \r\n      ROW_NUMBER() OVER () AS id,\r\n      st.id AS temp_taxon_id,\r\n      MAX(CASE WHEN stt.locale = 'en' THEN stt.name END) AS name_en,\r\n      MAX(CASE WHEN stt.locale = 'ar' THEN stt.name END) AS name_ar,\r\n      st.created_at,\r\n      st.updated_at\r\n    FROM spree_taxons st\r\n    LEFT JOIN spree_taxon_translations stt ON stt.spree_taxon_id = st.id\r\n    WHERE st.parent_id IN (\r\n      SELECT st.id \r\n      FROM spree_taxons st \r\n      JOIN spree_taxon_translations stt ON stt.spree_taxon_id = st.id AND stt.locale = 'en'\r\n      WHERE stt.name = 'Brands'\r\n    )\r\n    GROUP BY st.id\r\n  ) AS rt\r\n  ORDER BY rt.temp_taxon_id ASC\r\n), \r\nsupplier AS (\r\n  SELECT \r\n    REGEXP_REPLACE(MAX(COALESCE(spt.supplier_name,'')), '-[0-9]+$', '') AS name,\r\n    LEFT(COALESCE(spt.code, ''), 10) AS code,\r\n    MAX(spt.created_at) AS created_at,\r\n    MAX(spt.updated_at) AS updated_at,\r\n    MAX(spt.deleted_at) AS deleted_at\r\n  FROM (\r\n    SELECT\r\n      spree_product_id,\r\n      MAX(CASE WHEN locale = 'en' THEN manufacturer END) AS supplier_name,\r\n      MAX(CASE WHEN locale = 'ar' THEN manufacturer END) AS code,\r\n      MAX(created_at) AS created_at,\r\n      MAX(updated_at) AS updated_at,\r\n      MAX(deleted_at) AS deleted_at\r\n    FROM spree_product_translations\r\n    WHERE manufacturer IS NOT NULL\r\n    GROUP BY spree_product_id\r\n  ) AS spt\r\n  GROUP BY spt.code\r\n), \r\ncte AS (\r\n  SELECT \r\n    sp.id,\r\n    sp.tax_category_id,\r\n    sp.refundable,\r\n    sp.moq_limit,\r\n    sp.meta_title,\r\n    sp.loyalty_point,\r\n    sp_table.validity_tag_ar,\r\n    sp_table.validity_tag,\r\n    sp_table.slug,\r\n    sp_table.size,\r\n\tREGEXP_REPLACE(MAX(COALESCE(sp_table.supplier_name,'')), '-[0-9]+$', '') AS supplier_code,\r\n    COALESCE(sp_table.name_ar, '') AS name_ar,\r\n    COALESCE(sp_table.name, '') AS name,\r\n    COALESCE(sp_table.meta_keywords_ar, '') AS meta_keywords_ar,\r\n    COALESCE(sp_table.meta_keywords, '') AS meta_keywords,\r\n    COALESCE(sp_table.meta_description_ar, '') AS meta_description_ar,\r\n    COALESCE(sp_table.meta_description, '') AS meta_description,\r\n    COALESCE(sp_table.short_description_ar, '') AS short_description_ar,\r\n    COALESCE(sp_table.long_description_ar, '') AS long_description_ar,\r\n    COALESCE(sp_table.short_description, '') AS short_description,\r\n    COALESCE(sp_table.long_description, '') AS long_description,\r\n    COALESCE(sp.is_loyalty_reward, 'false') AS issue_loyalty_points,\r\n    CASE\r\n      WHEN sp.electronic_product_code = '' THEN NULL \r\n      ELSE CAST(sp.electronic_product_code AS INT)\r\n    END AS electronic_product_code,\r\n    CASE\r\n      WHEN sp.deleted_at IS NOT NULL THEN TRUE\r\n      ELSE FALSE\r\n    END AS is_deleted,\r\n    COALESCE(sp.crushable, false) AS crushable,\r\n    sp.created_at,\r\n    sp.updated_at,\r\n    sp.cod_enabled,\r\n    COALESCE(CAST(sp.available_on AS DATE), CAST(CURRENT_TIMESTAMP AS DATE)) AS available_on,\r\n    sp.bundled,\r\n    sp.bin_category_id,\r\n    brand_taxon.temp_taxon_id AS default_taxon_id,\r\n    sv.width,\r\n    sv.weight_increment,\r\n    sv.weight,\r\n    sv.sku,\r\n    case when\r\n    CAST(sv.perform_liquid_weight_check AS INT) = 0 Then 'False'\r\n    ELSE 'True'\r\n    END AS perform_liquid_weight_check,\r\n    sv.max_weight_per_order,\r\n    sv.height,\r\n    sv.depth,\r\n    sv.default_weight_count,\r\n    FALSE AS promotable,\r\n    TRUE AS is_wishlisted,\r\n    FALSE AS is_gluten_free,\r\n    '' AS discount,\r\n    FALSE AS deactivate,\r\n    ds_country.country_id,\r\n    1 AS category_id,\r\n    brand_taxon.brand_id AS brand_id\r\n  FROM spree_products sp\r\n  LEFT JOIN (\r\n    SELECT\r\n      sp.id,\r\n\t  MAX(CASE WHEN locale = 'en' THEN manufacturer END) as supplier_name,\r\n      MAX(CASE WHEN sptrans.locale = 'ar' THEN sptrans.validity_tag END) AS validity_tag_ar,\r\n      MAX(CASE WHEN sptrans.locale = 'en' THEN sptrans.validity_tag END) AS validity_tag,\r\n      MAX(sptrans.slug) AS slug,\r\n      MAX(sptrans.pack_size) AS size,\r\n      MAX(CASE WHEN sptrans.locale = 'ar' THEN sptrans.name END) AS name_ar,\r\n      MAX(CASE WHEN sptrans.locale = 'en' THEN sptrans.name END) AS name,\r\n      MAX(CASE WHEN sptrans.locale = 'ar' THEN sptrans.meta_keywords END) AS meta_keywords_ar,\r\n      MAX(CASE WHEN sptrans.locale = 'en' THEN sptrans.meta_keywords END) AS meta_keywords,\r\n      MAX(CASE WHEN sptrans.locale = 'ar' THEN sptrans.meta_description END) AS meta_description_ar,\r\n      MAX(CASE WHEN sptrans.locale = 'en' THEN sptrans.meta_description END) AS meta_description,\r\n      MAX(CASE WHEN sptrans.locale = 'ar' THEN sptrans.description END) AS short_description_ar,\r\n      MAX(CASE WHEN sptrans.locale = 'ar' THEN sptrans.description END) AS long_description_ar,\r\n      MAX(CASE WHEN sptrans.locale = 'en' THEN sptrans.description END) AS short_description,\r\n      MAX(CASE WHEN sptrans.locale = 'en' THEN sptrans.description END) AS long_description,\r\n      MAX(CASE WHEN sptrans.locale = 'ar' THEN sptrans.manufacturer END) AS supplier_code\r\n    FROM spree_products sp\r\n    LEFT JOIN spree_product_translations sptrans ON sptrans.spree_product_id = sp.id\r\n    GROUP BY sp.id\r\n  ) AS sp_table ON sp_table.id = sp.id\r\n  LEFT JOIN (\r\n    SELECT \r\n      sp.id, \r\n      db.country_id \r\n    FROM spree_products sp\r\n    LEFT JOIN spree_product_inventory_modifiers sim ON sp.id = sim.product_id\r\n    LEFT JOIN danube_supermarkets db ON sim.rule_supermarket_id = db.id\r\n    GROUP BY sp.id, db.country_id\r\n  ) AS ds_country ON sp.id = ds_country.id\r\n  LEFT JOIN (\r\n    SELECT \r\n      ROW_NUMBER() OVER (PARTITION BY prod_taxon.product_id ORDER BY b.created_at DESC) AS row_num,\r\n      b.temp_taxon_id,\r\n      b.id AS brand_id, \r\n      prod_taxon.product_id AS product_id\r\n    FROM brand b \r\n    LEFT JOIN spree_products_taxons prod_taxon ON b.temp_taxon_id = prod_taxon.taxon_id\r\n  ) AS brand_taxon ON brand_taxon.product_id = sp.id\r\n  LEFT JOIN (\r\n    SELECT \r\n      ROW_NUMBER() OVER (PARTITION BY product_id ORDER BY created_at DESC) AS row_num, \r\n      *\r\n    FROM spree_variants \r\n  ) sv ON sv.product_id = sp.id\r\n  LEFT JOIN supplier sup ON sup.code = sp_table.supplier_code AND sup.code != ''\r\n  WHERE (brand_taxon.row_num = 1 OR brand_taxon.row_num IS NULL) \r\n    AND (sv.row_num = 1 OR sv.row_num IS NULL)\r\nGROUP BY \r\n        sp.id, \r\n        sp.tax_category_id,\r\n        sp.refundable,\r\n        sp.moq_limit,\r\n        sp.meta_title,\r\n        sp.loyalty_point,\r\n        sp_table.validity_tag_ar,\r\n        sp_table.validity_tag,\r\n        sp_table.slug,\r\n\t\tbrand_taxon.temp_taxon_id,\r\n        sp_table.size,\r\n        sp_table.supplier_name,\r\n        sp_table.name_ar,\r\n        sp_table.name,\r\n        sp_table.meta_keywords_ar,\r\n        sp_table.meta_keywords,\r\n        sp_table.meta_description_ar,\r\n        sp_table.meta_description,\r\n        sp_table.short_description_ar,\r\n        sp_table.long_description_ar,\r\n        sp_table.short_description,\r\n        sp_table.long_description,\r\n        sp.is_loyalty_reward,\r\n\t\t    brand_taxon.brand_id,\r\n        sp.electronic_product_code,\r\n        sp.deleted_at,\r\n        sp.crushable,\r\n        sp.created_at,\r\n        sp.updated_at,\r\n        sp.cod_enabled,\r\n        sp.available_on,\r\n        sp.bundled,\r\n        sp.bin_category_id,\r\n        sv.width,\r\n        sv.weight_increment,\r\n        sv.weight,\r\n        sv.sku,\r\n        sv.perform_liquid_weight_check,\r\n        sv.max_weight_per_order,\r\n        sv.height,\r\n        sv.depth,\r\n        sv.default_weight_count,\r\n        ds_country.country_id\r\n)\r\nSELECT \r\n  filtered_cte.id,\r\n    filtered_cte.tax_category_id,\r\n    filtered_cte.refundable,\r\n    filtered_cte.moq_limit,\r\n    filtered_cte.meta_title,\r\n    filtered_cte.loyalty_point,\r\n    filtered_cte.validity_tag_ar,\r\n    filtered_cte.validity_tag,\r\n    filtered_cte.slug,\r\n    filtered_cte.size,\r\n\tfiltered_cte.supplier_code as temp_supplier_code,\r\n    filtered_cte.name_ar,\r\n    filtered_cte.name,\r\n    filtered_cte.meta_keywords_ar,\r\n    filtered_cte.meta_keywords,\r\n    filtered_cte.meta_description_ar,\r\n    filtered_cte.meta_description,\r\n    filtered_cte.short_description_ar,\r\n    filtered_cte.long_description_ar,\r\n    filtered_cte.short_description,\r\n    filtered_cte.long_description,\r\n    filtered_cte.issue_loyalty_points,\r\n    filtered_cte.electronic_product_code,\r\n    filtered_cte.is_deleted,\r\n    filtered_cte.crushable,\r\n    filtered_cte.created_at,\r\n    filtered_cte.updated_at,\r\n    filtered_cte.cod_enabled,\r\n    filtered_cte.available_on,\r\n    filtered_cte.bundled,\r\n    filtered_cte.bin_category_id,\r\n    filtered_cte.default_taxon_id,\r\n    filtered_cte.width,\r\n    filtered_cte.weight_increment,\r\n    filtered_cte.weight,\r\n    filtered_cte.sku,\r\n    filtered_cte.perform_liquid_weight_check,\r\n    filtered_cte.max_weight_per_order,\r\n    filtered_cte.height,\r\n    filtered_cte.depth,\r\n    filtered_cte.default_weight_count,\r\n    filtered_cte.promotable,\r\n    filtered_cte.is_wishlisted,\r\n    filtered_cte.is_gluten_free,\r\n    filtered_cte.discount,\r\n    filtered_cte.deactivate,\r\n    filtered_cte.country_id,\r\n    filtered_cte.category_id,\r\n    filtered_cte.brand_id\r\nFROM (\r\n  SELECT \r\n    cte.*,\r\n    ROW_NUMBER() OVER (PARTITION BY id ORDER BY country_id) AS rn \r\n  FROM cte\r\n) filtered_cte\r\nWHERE rn = 1;"
							},
							"sink": {
								"type": "AzurePostgreSQLSink",
								"writeBatchSize": 1000000,
								"writeBatchTimeout": "00:30:00",
								"preCopyScript": "ALTER TABLE product ADD COLUMN temp_taxon_id INT;",
								"writeMethod": "CopyCommand"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "id",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "id",
											"type": "Int32",
											"physicalType": "integer"
										}
									},
									{
										"source": {
											"name": "is_deleted",
											"type": "Boolean",
											"physicalType": "boolean"
										},
										"sink": {
											"name": "is_deleted",
											"type": "Boolean",
											"physicalType": "boolean"
										}
									},
									{
										"source": {
											"name": "created_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										},
										"sink": {
											"name": "created_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										}
									},
									{
										"source": {
											"name": "updated_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										},
										"sink": {
											"name": "updated_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										}
									},
									{
										"source": {
											"name": "name",
											"type": "String",
											"physicalType": "text"
										},
										"sink": {
											"name": "name",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "discount",
											"type": "String",
											"physicalType": "text"
										},
										"sink": {
											"name": "discount",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "is_wishlisted",
											"type": "Boolean",
											"physicalType": "boolean"
										},
										"sink": {
											"name": "is_wishlisted",
											"type": "Boolean",
											"physicalType": "boolean"
										}
									},
									{
										"source": {
											"name": "sku",
											"type": "String",
											"physicalType": "character varying"
										},
										"sink": {
											"name": "sku",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "country_id",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "country_id",
											"type": "Int32",
											"physicalType": "integer"
										}
									},
									{
										"source": {
											"name": "category_id",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "category_id",
											"type": "Int32",
											"physicalType": "integer"
										}
									},
									{
										"source": {
											"name": "name_ar",
											"type": "String",
											"physicalType": "text"
										},
										"sink": {
											"name": "name_ar",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "available_on",
											"type": "DateTime",
											"physicalType": "date"
										},
										"sink": {
											"name": "available_on",
											"type": "DateTime",
											"physicalType": "date"
										}
									},
									{
										"source": {
											"name": "electronic_product_code",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "electronic_product_code",
											"type": "Int32",
											"physicalType": "integer"
										}
									},
									{
										"source": {
											"name": "height",
											"type": "Decimal",
											"physicalType": "numeric"
										},
										"sink": {
											"name": "height",
											"type": "Double",
											"physicalType": "double precision"
										}
									},
									{
										"source": {
											"name": "width",
											"type": "Decimal",
											"physicalType": "numeric"
										},
										"sink": {
											"name": "width",
											"type": "Double",
											"physicalType": "double precision"
										}
									},
									{
										"source": {
											"name": "depth",
											"type": "Decimal",
											"physicalType": "numeric"
										},
										"sink": {
											"name": "depth",
											"type": "Double",
											"physicalType": "double precision"
										}
									},
									{
										"source": {
											"name": "weight",
											"type": "Decimal",
											"physicalType": "numeric"
										},
										"sink": {
											"name": "weight",
											"type": "Double",
											"physicalType": "double precision"
										}
									},
									{
										"source": {
											"name": "issue_loyalty_points",
											"type": "Boolean",
											"physicalType": "boolean"
										},
										"sink": {
											"name": "issue_loyalty_points",
											"type": "Boolean",
											"physicalType": "boolean"
										}
									},
									{
										"source": {
											"name": "bin_category_id",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "bin_category_id",
											"type": "Int32",
											"physicalType": "integer"
										}
									},
									{
										"source": {
											"name": "tax_category_id",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "tax_category_id",
											"type": "Int32",
											"physicalType": "integer"
										}
									},
									{
										"source": {
											"name": "cod_enabled",
											"type": "Boolean",
											"physicalType": "boolean"
										},
										"sink": {
											"name": "cod_enabled",
											"type": "Boolean",
											"physicalType": "boolean"
										}
									},
									{
										"source": {
											"name": "promotable",
											"type": "Boolean",
											"physicalType": "boolean"
										},
										"sink": {
											"name": "promotable",
											"type": "Boolean",
											"physicalType": "boolean"
										}
									},
									{
										"source": {
											"name": "refundable",
											"type": "Boolean",
											"physicalType": "boolean"
										},
										"sink": {
											"name": "refundable",
											"type": "Boolean",
											"physicalType": "boolean"
										}
									},
									{
										"source": {
											"name": "deactivate",
											"type": "Boolean",
											"physicalType": "boolean"
										},
										"sink": {
											"name": "deactivate",
											"type": "Boolean",
											"physicalType": "boolean"
										}
									},
									{
										"source": {
											"name": "validity_tag",
											"type": "String",
											"physicalType": "text"
										},
										"sink": {
											"name": "validity_tag",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "validity_tag_ar",
											"type": "String",
											"physicalType": "text"
										},
										"sink": {
											"name": "validity_tag_ar",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "meta_title",
											"type": "String",
											"physicalType": "character varying"
										},
										"sink": {
											"name": "meta_title",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "meta_keywords",
											"type": "String",
											"physicalType": "text"
										},
										"sink": {
											"name": "meta_keywords",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "meta_keywords_ar",
											"type": "String",
											"physicalType": "text"
										},
										"sink": {
											"name": "meta_keywords_ar",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "slug",
											"type": "String",
											"physicalType": "text"
										},
										"sink": {
											"name": "slug",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "brand_id",
											"type": "Int64",
											"physicalType": "bigint"
										},
										"sink": {
											"name": "brand_id",
											"type": "Int32",
											"physicalType": "integer"
										}
									},
									{
										"source": {
											"name": "bundled",
											"type": "Boolean",
											"physicalType": "boolean"
										},
										"sink": {
											"name": "bundled",
											"type": "Boolean",
											"physicalType": "boolean"
										}
									},
									{
										"source": {
											"name": "size",
											"type": "String",
											"physicalType": "text"
										},
										"sink": {
											"name": "size",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "perform_liquid_weight_check",
											"type": "String",
											"physicalType": "text"
										},
										"sink": {
											"name": "perform_liquid_weight_check",
											"type": "Boolean",
											"physicalType": "boolean"
										}
									},
									{
										"source": {
											"name": "weight_increment",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "weight_increment",
											"type": "Int32",
											"physicalType": "integer"
										}
									},
									{
										"source": {
											"name": "max_weight_per_order",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "max_weight_per_order",
											"type": "Int32",
											"physicalType": "integer"
										}
									},
									{
										"source": {
											"name": "crushable",
											"type": "Boolean",
											"physicalType": "boolean"
										},
										"sink": {
											"name": "crushable",
											"type": "Boolean",
											"physicalType": "boolean"
										}
									},
									{
										"source": {
											"name": "moq_limit",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "moq_limit",
											"type": "Int32",
											"physicalType": "integer"
										}
									},
									{
										"source": {
											"name": "default_weight_count",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "default_weight_count",
											"type": "Int32",
											"physicalType": "integer"
										}
									},
									{
										"source": {
											"name": "meta_description_ar",
											"type": "String",
											"physicalType": "text"
										},
										"sink": {
											"name": "meta_description_ar",
											"type": "String",
											"physicalType": "text"
										}
									},
									{
										"source": {
											"name": "meta_description",
											"type": "String",
											"physicalType": "text"
										},
										"sink": {
											"name": "meta_description",
											"type": "String",
											"physicalType": "text"
										}
									},
									{
										"source": {
											"name": "default_taxon_id",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "default_taxon_id",
											"type": "Int32",
											"physicalType": "integer"
										}
									},
									{
										"source": {
											"name": "short_description",
											"type": "String",
											"physicalType": "text"
										},
										"sink": {
											"name": "short_description",
											"type": "String",
											"physicalType": "text"
										}
									},
									{
										"source": {
											"name": "long_description",
											"type": "String",
											"physicalType": "text"
										},
										"sink": {
											"name": "long_description",
											"type": "String",
											"physicalType": "text"
										}
									},
									{
										"source": {
											"name": "short_description_ar",
											"type": "String",
											"physicalType": "text"
										},
										"sink": {
											"name": "short_description_ar",
											"type": "String",
											"physicalType": "text"
										}
									},
									{
										"source": {
											"name": "long_description_ar",
											"type": "String",
											"physicalType": "text"
										},
										"sink": {
											"name": "long_description_ar",
											"type": "String",
											"physicalType": "text"
										}
									},
									{
										"source": {
											"name": "is_gluten_free",
											"type": "Boolean",
											"physicalType": "boolean"
										},
										"sink": {
											"name": "is_gluten_free",
											"type": "Boolean",
											"physicalType": "boolean"
										}
									},
									{
										"source": {
											"name": "loyalty_point",
											"type": "Decimal",
											"physicalType": "numeric"
										},
										"sink": {
											"name": "loyalty_point",
											"type": "Double",
											"physicalType": "double precision"
										}
									},
									{
										"source": {
											"name": "temp_supplier_code",
											"type": "String",
											"physicalType": "text"
										},
										"sink": {
											"name": "temp_supplier_code",
											"type": "String",
											"physicalType": "character varying"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_V1_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_V2_PRODUCT_DB_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {
									"table_name": "product"
								}
							}
						]
					},
					{
						"name": "updatetemptaxonid",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Copy data1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzurePostgreSqlSource",
								"query": "WITH cte AS (\r\n    SELECT st.product_id, st.taxon_id AS temp_taxon_id\r\n    FROM product_taxon st\r\n)\r\nUPDATE product p\r\nSET temp_taxon_id = cte.temp_taxon_id\r\nFROM cte\r\nWHERE p.id = cte.product_id;\r\nSELECT 'Updating Temp Taxon ID' AS Message;",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_V2_PRODUCT_DB_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {
									"table_name": "product"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "updatesupplierIDandbrandID",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "updatetemptaxonid",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzurePostgreSqlSource",
								"query": "With cte AS\n  (select id, name as supplier_code \n  from supplier\n)\nUPDATE product p\nSET supplier_id = cte.id\nFROM cte\nWHERE p.temp_supplier_code = cte.supplier_code;\nWITH cte1 AS (\n    SELECT id, temp_taxon_id\n    FROM brand\n)\nUPDATE product p\nSET brand_id = cte1.id\nFROM cte1\nWHERE p.temp_taxon_id = cte1.temp_taxon_id;\nSELECT 'Update Supplier ID and Brand ID' as ID;",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_V2_PRODUCT_DB_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {
									"table_name": "product"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "addsuppliercodecolumn",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzurePostgreSqlSource",
								"query": "Alter table product add column temp_supplier_code varchar(200);\nSELECT 'Adding Supplier_Code' As Update",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_V2_PRODUCT_DB_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {
									"table_name": "product"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "RemovingUnwantedcolumnsfromproduct",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "updatesupplierIDandbrandID",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzurePostgreSqlSource",
								"query": "alter table product drop column temp_taxon_id;\r\nalter table product drop column temp_supplier_code;\r\nalter table brand drop column temp_taxon_id;\r\nSELECT 'Remove unwanted Columns' as Removed;",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_V2_PRODUCT_DB_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {
									"table_name": "product"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Product DB/brand and product pipelines"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/supplier')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "PostgreSqlV2Source",
								"query": "SELECT \n\t  REGEXP_REPLACE(MAX(COALESCE(spt.supplier_name,'')), '-[0-9]+$', '') AS name,\n-- \t  UPPER(REGEXP_REPLACE(TRANSLATE(MAX(spt.supplier_name), ' ', '_'), '[^a-zA-Z0-9_]', '', 'g')) as code,\n\t  LEFT(COALESCE(spt.code, ''), 10) AS code,\n\t  MAX(spt.created_at) as created_at,\n\t  MAX(spt.updated_at) as updated_at,\n\t  MAX(spt.deleted_at) as deleted_at\n\tFROM \n\t  (SELECT\n\t\tspree_product_id,\n\t\tMAX(CASE WHEN locale = 'en' THEN manufacturer END) as supplier_name,\n\t\tMAX(CASE WHEN locale = 'ar' THEN manufacturer END) as code,\n\t\tMAX(created_at) as created_at,\n\t\tMAX(updated_at) as updated_at,\n\t\tMAX(deleted_at) as deleted_at\n\t  FROM spree_product_translations\n\t  WHERE manufacturer IS NOT NULL\n\t  GROUP BY spree_product_id) as spt\n\tGROUP BY spt.code;"
							},
							"sink": {
								"type": "AzurePostgreSQLSink",
								"writeBatchSize": 1000000,
								"writeBatchTimeout": "00:30:00",
								"writeMethod": "CopyCommand"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_V1_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_V2_PRODUCT_DB_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {
									"table_name": "supplier"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Product DB"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/product_taxon')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "PostgreSqlV2Source",
								"query": "SELECT DISTINCT product_id,\n       taxon_id\nFROM   spree_products_taxons;"
							},
							"sink": {
								"type": "AzurePostgreSQLSink",
								"writeBatchSize": 1000000,
								"writeBatchTimeout": "00:30:00",
								"writeMethod": "CopyCommand"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_V1_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_V2_PRODUCT_DB_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {
									"table_name": "product_taxon"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Product DB"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/brand')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Lookup1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "PostgreSqlV2Source",
								"query": "SELECT \r\n  rt.id,\r\n  COALESCE(rt.name_en,'') as name_en,\r\n  COALESCE(CASE\r\n  \tWHEN LENGTH(rt.name_en) < 5 THEN UPPER(REGEXP_REPLACE(TRANSLATE(rt.name_en, ' ', '_'), '[^a-zA-Z0-9_]', '', 'g'))||'_' || rt.id\r\n\tELSE UPPER(SUBSTRING(REGEXP_REPLACE(TRANSLATE(rt.name_en, ' ', ''), '[^a-zA-Z0-9]', '', 'g'), 1, 1)) ||\r\n           UPPER(SUBSTRING(REGEXP_REPLACE(SUBSTRING(REGEXP_REPLACE(TRANSLATE(rt.name_en, ' ', ''), '[^a-zA-Z0-9]', ' ', 'g'), 2), ' ', ''), 1, 1)) ||\r\n           '_' || rt.id\r\n  END,'') AS code,\r\n  rt.created_at,\r\n  rt.updated_at,\r\n  rt.temp_taxon_id,\r\n  COALESCE(rt.name_ar,'') as name_ar\r\nFROM (SELECT \r\n    ROW_NUMBER() OVER () AS id,\r\n    st.id AS temp_taxon_id,\r\n    MAX(CASE WHEN stt.locale = 'en' THEN stt.name END) AS name_en,\r\n    MAX(CASE WHEN stt.locale = 'ar' THEN stt.name END) AS name_ar,\r\n    st.created_at,\r\n    st.updated_at\r\nFROM spree_taxons st\r\nLEFT JOIN spree_taxon_translations stt ON stt.spree_taxon_id = st.id\r\nWHERE st.parent_id in (\r\n  select st.id as brand_taxon_id from spree_taxons st \r\n  join spree_taxon_translations stt on stt.spree_taxon_id = st.id and locale = 'en'\r\n  where stt.\"name\"  = 'Brands'\r\n)\r\nGROUP BY st.id) as rt\r\norder by rt.temp_taxon_id asc"
							},
							"sink": {
								"type": "AzurePostgreSQLSink",
								"writeBatchSize": 1000000,
								"writeBatchTimeout": "00:30:00",
								"writeMethod": "CopyCommand"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "id",
											"type": "Int64",
											"physicalType": "bigint"
										},
										"sink": {
											"name": "id",
											"type": "Int32",
											"physicalType": "integer"
										}
									},
									{
										"source": {
											"name": "name_en",
											"type": "String",
											"physicalType": "text"
										},
										"sink": {
											"name": "name_en",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "code",
											"type": "String",
											"physicalType": "text"
										},
										"sink": {
											"name": "code",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "created_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										},
										"sink": {
											"name": "created_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										}
									},
									{
										"source": {
											"name": "updated_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										},
										"sink": {
											"name": "updated_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										}
									},
									{
										"source": {
											"name": "name_ar",
											"type": "String",
											"physicalType": "text"
										},
										"sink": {
											"name": "name_ar",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "temp_taxon_id",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "temp_taxon_id",
											"type": "Int32",
											"physicalType": "integer"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_V1_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_V2_PRODUCT_DB_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {
									"table_name": "brand"
								}
							}
						]
					},
					{
						"name": "Lookup1",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzurePostgreSqlSource",
								"query": "alter table brand add column temp_taxon_id int;\nSELECT 'Adding Temp Texon' as UpdateTaxon;",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_V2_PRODUCT_DB_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {
									"table_name": "brand"
								}
							},
							"firstRowOnly": false
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Product DB/brand and product pipelines"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/brand_and_product_table')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "brand_table",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "brand",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "product_table",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "brand_table",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "product",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Product DB"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/brand')]",
				"[concat(variables('factoryId'), '/pipelines/product')]"
			]
		}
	]
}