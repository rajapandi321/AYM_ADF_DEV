{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "Az-adf-ecomm-v1-v2"
		},
		"LS_CrossDB_Connection_Storage_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'LS_CrossDB_Connection_Storage'"
		},
		"LS_V1_PRODUCTION_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'LS_V1_PRODUCTION'"
		},
		"LS_V2_AUTH_DB_DEV_SERVER_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'LS_V2_AUTH_DB_DEV_SERVER'",
			"defaultValue": "Host=az-postgress-danube-dev.postgres.database.azure.com;Port=5432;Database=user-db-dev;UID=dnbpostgressdev@az-postgress-danube-dev;EncryptionMethod=0"
		},
		"LS_V2_AUTH_DB_PRODUCTION_SERVER_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'LS_V2_AUTH_DB_PRODUCTION_SERVER'",
			"defaultValue": "Host=ecommerce20.postgres.database.azure.com;Port=5432;Database=auth-db-prod;UID=eccommercepostgres;EncryptionMethod=0"
		},
		"LS_V2_PRODUCTION_SERVER_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'LS_V2_PRODUCTION_SERVER'",
			"defaultValue": "Host=ecommerce20.postgres.database.azure.com;Port=5432;Database=order-db-prod;UID=eccommercepostgres;EncryptionMethod=0"
		},
		"LS_V2_PRODUCT_DB_DEV_SERVER_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'LS_V2_PRODUCT_DB_DEV_SERVER'",
			"defaultValue": "Host=az-postgress-danube-dev.postgres.database.azure.com;Port=5432;Database=product-db-dev;UID=dnbpostgressdev@az-postgress-danube-dev;EncryptionMethod=0"
		},
		"LS_V2_PRODUCT_DB_PRODUCTION_SERVER_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'LS_V2_PRODUCT_DB_PRODUCTION_SERVER'",
			"defaultValue": "Host=ecommerce20.postgres.database.azure.com;Port=5432;Database=product-db-prod;UID=eccommercepostgres;EncryptionMethod=0"
		},
		"LS_V2_USER_DB_PRODUCTION_SERVER_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'LS_V2_USER_DB_PRODUCTION_SERVER'",
			"defaultValue": "Host=ecommerce20.postgres.database.azure.com;Port=5432;Database=user-db-prod;UID=eccommercepostgres;EncryptionMethod=0"
		},
		"LS_Danube_Key_Vault_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "https://azecom2np-keyvault.vault.azure.net/"
		},
		"LS_V1_PRODUCTION_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "ec2-34-243-193-35.eu-west-1.compute.amazonaws.com"
		},
		"LS_V1_PRODUCTION_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "d60isnsp8nivcb"
		},
		"LS_V1_PRODUCTION_properties_typeProperties_username": {
			"type": "string",
			"defaultValue": "readonly_cred"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/LS_CrossDB_Connection_Storage')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('LS_CrossDB_Connection_Storage_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_Danube_Key_Vault')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('LS_Danube_Key_Vault_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_V1_PRODUCTION')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "PostgreSqlV2",
				"typeProperties": {
					"server": "[parameters('LS_V1_PRODUCTION_properties_typeProperties_server')]",
					"port": 5432,
					"database": "[parameters('LS_V1_PRODUCTION_properties_typeProperties_database')]",
					"username": "[parameters('LS_V1_PRODUCTION_properties_typeProperties_username')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('LS_V1_PRODUCTION_password')]"
					},
					"sslMode": 1,
					"authenticationType": "Basic",
					"connectionTimeout": 600,
					"commandTimeout": 0
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_Intermiadate_Result')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_CrossDB_Connection_Storage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "production-migration"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_CrossDB_Connection_Storage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_V1_PRODUCTION')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_V1_PRODUCTION",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "PostgreSqlV2Table",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_V1_PRODUCTION')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_V2_AUTH_DB_DEV_SERVER')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzurePostgreSql",
				"typeProperties": {
					"connectionString": "[parameters('LS_V2_AUTH_DB_DEV_SERVER_connectionString')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "LS_Danube_Key_Vault",
							"type": "LinkedServiceReference"
						},
						"secretName": "db-password-dev"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_Danube_Key_Vault')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_V2_AUTH_DB_PRODUCTION_SERVER')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzurePostgreSql",
				"typeProperties": {
					"connectionString": "[parameters('LS_V2_AUTH_DB_PRODUCTION_SERVER_connectionString')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "LS_Danube_Key_Vault",
							"type": "LinkedServiceReference"
						},
						"secretName": "V2-PRODUCTION-SERVER-PASSWORD"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_Danube_Key_Vault')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_V2_PRODUCTION_SERVER')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzurePostgreSql",
				"typeProperties": {
					"connectionString": "[parameters('LS_V2_PRODUCTION_SERVER_connectionString')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "LS_Danube_Key_Vault",
							"type": "LinkedServiceReference"
						},
						"secretName": "V2-PRODUCTION-SERVER-PASSWORD"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_Danube_Key_Vault')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_V2_PRODUCT_DB_DEV_SERVER')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzurePostgreSql",
				"typeProperties": {
					"connectionString": "[parameters('LS_V2_PRODUCT_DB_DEV_SERVER_connectionString')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "LS_Danube_Key_Vault",
							"type": "LinkedServiceReference"
						},
						"secretName": "db-password-dev"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_Danube_Key_Vault')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_V2_PRODUCT_DB_PRODUCTION_SERVER')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzurePostgreSql",
				"typeProperties": {
					"connectionString": "[parameters('LS_V2_PRODUCT_DB_PRODUCTION_SERVER_connectionString')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "LS_Danube_Key_Vault",
							"type": "LinkedServiceReference"
						},
						"secretName": "V2-PRODUCTION-SERVER-PASSWORD"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_Danube_Key_Vault')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_V2_USER_DB_PRODUCTION_SERVER')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzurePostgreSql",
				"typeProperties": {
					"connectionString": "[parameters('LS_V2_USER_DB_PRODUCTION_SERVER_connectionString')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "LS_Danube_Key_Vault",
							"type": "LinkedServiceReference"
						},
						"secretName": "V2-PRODUCTION-SERVER-PASSWORD"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_Danube_Key_Vault')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_V2_AUTH_DB_PRODUCTION')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_V2_AUTH_DB_PRODUCTION_SERVER",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"table_name": {
						"type": "string"
					}
				},
				"folder": {
					"name": "V2 Datasets Production"
				},
				"annotations": [],
				"type": "AzurePostgreSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "public",
					"table": {
						"value": "@dataset().table_name",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_V2_AUTH_DB_PRODUCTION_SERVER')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_V2_ORDER_DB_PRODUCTION')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_V2_PRODUCTION_SERVER",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"table_name": {
						"type": "string"
					}
				},
				"folder": {
					"name": "V2 Datasets Production"
				},
				"annotations": [],
				"type": "AzurePostgreSqlTable",
				"schema": [
					{
						"name": "id",
						"type": "integer",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "order_id",
						"type": "integer",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "address_id",
						"type": "integer",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "is_bill_address",
						"type": "boolean",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "city",
						"type": "character varying",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "country",
						"type": "character varying",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "district",
						"type": "character varying",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "type",
						"type": "character varying",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "formatted_address",
						"type": "character varying",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "latitude",
						"type": "double precision",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "longitude",
						"type": "double precision",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "is_default",
						"type": "boolean",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "street_no",
						"type": "character varying",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "area",
						"type": "character varying",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "postal_code",
						"type": "integer",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "delivery_instruction",
						"type": "character varying",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "created_at",
						"type": "timestamp without time zone",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "updated_at",
						"type": "timestamp without time zone",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "deleted_at",
						"type": "timestamp without time zone",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "is_verified",
						"type": "boolean",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "image",
						"type": "character varying",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "comments",
						"type": "character varying",
						"precision": 0,
						"scale": 0
					}
				],
				"typeProperties": {
					"schema": "public",
					"table": {
						"value": "@dataset().table_name",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_V2_PRODUCTION_SERVER')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_V2_PRODUCT_DB_DEV')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_V2_PRODUCT_DB_DEV_SERVER",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"table_name": {
						"type": "string"
					}
				},
				"folder": {
					"name": "V2 Datasets DEV"
				},
				"annotations": [],
				"type": "AzurePostgreSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "public",
					"table": {
						"value": "@dataset().table_name",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_V2_PRODUCT_DB_DEV_SERVER')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_V2_PRODUCT_DB_PRODUCTION')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_V2_PRODUCT_DB_PRODUCTION_SERVER",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"table_name": {
						"type": "string"
					}
				},
				"folder": {
					"name": "V2 Datasets Production"
				},
				"annotations": [],
				"type": "AzurePostgreSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "public",
					"table": {
						"value": "@dataset().table_name",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_V2_PRODUCT_DB_PRODUCTION_SERVER')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_V2_USER_DB_DEV')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_V2_AUTH_DB_DEV_SERVER",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"table_name": {
						"type": "string"
					}
				},
				"folder": {
					"name": "V2 Datasets DEV"
				},
				"annotations": [],
				"type": "AzurePostgreSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "public",
					"table": {
						"value": "@dataset().table_name",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_V2_AUTH_DB_DEV_SERVER')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_V2_USER_DB_PRODUCTION')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_V2_USER_DB_PRODUCTION_SERVER",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"table_name": {
						"type": "string"
					}
				},
				"folder": {
					"name": "V2 Datasets Production"
				},
				"annotations": [],
				"type": "AzurePostgreSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "public",
					"table": {
						"value": "@dataset().table_name",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_V2_USER_DB_PRODUCTION_SERVER')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/country')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "User DB"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_Intermiadate_Result",
								"type": "DatasetReference"
							},
							"name": "source1"
						},
						{
							"linkedService": {
								"referenceName": "LS_V2_USER_DB_PRODUCTION_SERVER",
								"type": "LinkedServiceReference"
							},
							"name": "currency"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "LS_V2_USER_DB_PRODUCTION_SERVER",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "join1"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          id as integer,",
						"          iso_country_code as string,",
						"          name as string,",
						"          currency as string,",
						"          updated_at as timestamp,",
						"          created_at as timestamp,",
						"          default_super_market_id as integer,",
						"          currency_precision as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> source1",
						"source(output(",
						"          id as integer,",
						"          created_at as timestamp,",
						"          updated_at as timestamp,",
						"          name as string,",
						"          deleted_at as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     tableName: 'currency',",
						"     schemaName: 'public',",
						"     store: 'postgres',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> currency",
						"source1, currency join(currency == currency@name,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"join1 select(mapColumn(",
						"          id = source1@id,",
						"          iso_country_code,",
						"          name = source1@name,",
						"          updated_at = source1@updated_at,",
						"          created_at = source1@created_at,",
						"          default_super_market_id,",
						"          currency_precision,",
						"          currency_id = currency@id",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     tableName: 'country',",
						"     schemaName: 'public',",
						"     deletable: false,",
						"     insertable: true,",
						"     updateable: false,",
						"     upsertable: false,",
						"     store: 'postgres',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          id,",
						"          iso_country_code,",
						"          name,",
						"          updated_at,",
						"          created_at,",
						"          default_super_market_id,",
						"          currency_precision,",
						"          currency_id",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_Intermiadate_Result')]",
				"[concat(variables('factoryId'), '/linkedServices/LS_V2_USER_DB_PRODUCTION_SERVER')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/employee')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "User DB"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_Intermiadate_Result",
								"type": "DatasetReference"
							},
							"name": "employee"
						},
						{
							"linkedService": {
								"referenceName": "LS_V2_USER_DB_PRODUCTION_SERVER",
								"type": "LinkedServiceReference"
							},
							"name": "city"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "LS_V2_USER_DB_PRODUCTION_SERVER",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "join1"
						},
						{
							"name": "select1"
						},
						{
							"name": "window1"
						},
						{
							"name": "select2"
						},
						{
							"name": "filteringcolumns"
						}
					],
					"scriptLines": [
						"source(output(",
						"          id as integer,",
						"          role_id as integer,",
						"          email as string,",
						"          created_at as timestamp,",
						"          updated_at as timestamp,",
						"          is_deleted as boolean,",
						"          first_name as string,",
						"          last_name as string,",
						"          mobile_number as string,",
						"          dob as timestamp,",
						"          country_code as string,",
						"          country_id as integer,",
						"          gender as string,",
						"          user_type as string,",
						"          availability as string,",
						"          role_name as string,",
						"          active as boolean,",
						"          status as boolean,",
						"          city as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> employee",
						"source(output(",
						"          id as integer,",
						"          created_at as timestamp,",
						"          updated_at as timestamp,",
						"          name as string,",
						"          country_id as integer,",
						"          abbreviation as string,",
						"          city_image_url as string,",
						"          is_visible as boolean,",
						"          deleted_at as timestamp,",
						"          latitude as double,",
						"          longitude as double,",
						"          translation_id as string,",
						"          state_id as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     tableName: 'city',",
						"     schemaName: 'public',",
						"     store: 'postgres',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> city",
						"employee, city join(lower(city) == name,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"join1 select(mapColumn(",
						"          id = employee@id,",
						"          role_id,",
						"          email,",
						"          created_at = employee@created_at,",
						"          updated_at = employee@updated_at,",
						"          is_deleted,",
						"          first_name,",
						"          last_name,",
						"          mobile_number,",
						"          dob,",
						"          country_code,",
						"          country_id = employee@country_id,",
						"          gender,",
						"          user_type,",
						"          availability,",
						"          active,",
						"          status,",
						"          city_id = city@id,",
						"          role_name",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 window(over(id),",
						"     asc(role_name, false),",
						"     final_column = rowNumber()==1) ~> window1",
						"filteringcolumns select(mapColumn(",
						"          id,",
						"          role_id,",
						"          email,",
						"          created_at,",
						"          updated_at,",
						"          is_deleted,",
						"          first_name,",
						"          last_name,",
						"          mobile_number,",
						"          dob,",
						"          country_code,",
						"          country_id,",
						"          gender,",
						"          user_type,",
						"          availability,",
						"          active,",
						"          status,",
						"          city_id",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2",
						"window1 filter(equals(final_column,true())) ~> filteringcolumns",
						"select2 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     tableName: 'employee',",
						"     schemaName: 'public',",
						"     deletable: false,",
						"     insertable: true,",
						"     updateable: false,",
						"     upsertable: false,",
						"     store: 'postgres',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_Intermiadate_Result')]",
				"[concat(variables('factoryId'), '/linkedServices/LS_V2_USER_DB_PRODUCTION_SERVER')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/order')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Order DB"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_Intermiadate_Result",
								"type": "DatasetReference"
							},
							"name": "source1"
						},
						{
							"linkedService": {
								"referenceName": "LS_V2_USER_DB_PRODUCTION_SERVER",
								"type": "LinkedServiceReference"
							},
							"name": "city"
						},
						{
							"linkedService": {
								"referenceName": "LS_V2_PRODUCTION_SERVER",
								"type": "LinkedServiceReference"
							},
							"name": "ordercancellationreason"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "LS_V2_PRODUCTION_SERVER",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "join1"
						},
						{
							"name": "select1"
						},
						{
							"name": "join2"
						},
						{
							"name": "select2"
						}
					],
					"scriptLines": [
						"source(output(",
						"          id as integer,",
						"          item_total as decimal(38,18),",
						"          total as decimal(38,18),",
						"          status as string,",
						"          user_id as integer,",
						"          completed_at as timestamp,",
						"          bill_address_id as integer,",
						"          ship_address_id as integer,",
						"          payment_total as decimal(38,18),",
						"          created_at as timestamp,",
						"          updated_at as timestamp,",
						"          currency as string,",
						"          item_count as integer,",
						"          cancel_reason as string,",
						"          cancelled_at as timestamp,",
						"          cancelled_by as integer,",
						"          delivery_option_id as integer,",
						"          country_id as integer,",
						"          payment_option_id as integer,",
						"          city as string,",
						"          language_id as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> source1",
						"source(output(",
						"          id as integer,",
						"          name as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     query: 'select id, name from city',",
						"     store: 'postgres',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> city",
						"source(output(",
						"          id as integer,",
						"          reason_en as string,",
						"          reason_ar as string,",
						"          visible as boolean,",
						"          created_at as timestamp,",
						"          updated_at as timestamp,",
						"          deleted_at as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     query: 'select * from order_cancellation_reason',",
						"     store: 'postgres',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> ordercancellationreason",
						"source1, city join(lower(city) == name,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"join1 select(mapColumn(",
						"          id = source1@id,",
						"          item_total,",
						"          total,",
						"          status,",
						"          user_id,",
						"          completed_at,",
						"          bill_address_id,",
						"          ship_address_id,",
						"          payment_total,",
						"          created_at,",
						"          updated_at,",
						"          currency,",
						"          item_count,",
						"          cancelled_at,",
						"          cancelled_by,",
						"          delivery_option_id,",
						"          country_id,",
						"          payment_option_id,",
						"          language_id,",
						"          city_id = city@id,",
						"          cancel_reason",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1, ordercancellationreason join(cancel_reason == reason_en,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join2",
						"join2 select(mapColumn(",
						"          id = select1@id,",
						"          item_total,",
						"          total,",
						"          status,",
						"          user_id,",
						"          completed_at,",
						"          bill_address_id,",
						"          ship_address_id,",
						"          payment_total,",
						"          created_at = select1@created_at,",
						"          updated_at = select1@updated_at,",
						"          currency,",
						"          item_count,",
						"          cancelled_at,",
						"          cancelled_by,",
						"          delivery_option_id,",
						"          country_id,",
						"          payment_option_id,",
						"          language_id,",
						"          city_id,",
						"          order_cancellation_id = ordercancellationreason@id",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2",
						"select2 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     tableName: 'order',",
						"     schemaName: 'public',",
						"     deletable: false,",
						"     insertable: true,",
						"     updateable: false,",
						"     upsertable: false,",
						"     store: 'postgres',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          id,",
						"          item_total,",
						"          total,",
						"          status,",
						"          user_id,",
						"          completed_at,",
						"          bill_address_id,",
						"          ship_address_id,",
						"          payment_total,",
						"          created_at,",
						"          updated_at,",
						"          currency,",
						"          item_count,",
						"          cancelled_at,",
						"          cancelled_by,",
						"          delivery_option_id,",
						"          country_id,",
						"          payment_option_id,",
						"          language_id,",
						"          city_id,",
						"          order_cancellation_id",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_Intermiadate_Result')]",
				"[concat(variables('factoryId'), '/linkedServices/LS_V2_USER_DB_PRODUCTION_SERVER')]",
				"[concat(variables('factoryId'), '/linkedServices/LS_V2_PRODUCTION_SERVER')]"
			]
		}
	]
}