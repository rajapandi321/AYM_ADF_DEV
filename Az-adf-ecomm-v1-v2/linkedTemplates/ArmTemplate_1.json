{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "Az-adf-ecomm-v1-v2"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/country')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "User DB"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_Intermiadate_Result",
								"type": "DatasetReference"
							},
							"name": "source1"
						},
						{
							"linkedService": {
								"referenceName": "LS_V2_USER_DB_PRODUCTION_SERVER",
								"type": "LinkedServiceReference"
							},
							"name": "currency"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "LS_V2_USER_DB_PRODUCTION_SERVER",
								"type": "LinkedServiceReference"
							},
							"name": "storeindb"
						}
					],
					"transformations": [
						{
							"name": "joiningCurrency"
						},
						{
							"name": "selectingrequiredFields"
						}
					],
					"scriptLines": [
						"source(output(",
						"          id as integer,",
						"          iso_country_code as string,",
						"          name as string,",
						"          currency as string,",
						"          updated_at as timestamp,",
						"          created_at as timestamp,",
						"          default_super_market_id as integer,",
						"          currency_precision as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> source1",
						"source(output(",
						"          id as integer,",
						"          created_at as timestamp,",
						"          updated_at as timestamp,",
						"          name as string,",
						"          deleted_at as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     tableName: 'currency',",
						"     schemaName: 'public',",
						"     store: 'postgres',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> currency",
						"source1, currency join(currency == currency@name,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joiningCurrency",
						"joiningCurrency select(mapColumn(",
						"          id = source1@id,",
						"          iso_country_code,",
						"          name = source1@name,",
						"          updated_at = source1@updated_at,",
						"          created_at = source1@created_at,",
						"          default_super_market_id,",
						"          currency_precision,",
						"          currency_id = currency@id",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectingrequiredFields",
						"selectingrequiredFields sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     tableName: 'country',",
						"     schemaName: 'public',",
						"     deletable: false,",
						"     insertable: true,",
						"     updateable: false,",
						"     upsertable: false,",
						"     store: 'postgres',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          id,",
						"          iso_country_code,",
						"          name,",
						"          updated_at,",
						"          created_at,",
						"          default_super_market_id,",
						"          currency_precision,",
						"          currency_id",
						"     )) ~> storeindb"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_address_cdc')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "User_CDC"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_Intermiadate_Result",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "LS_V2_USER_DB_PRODUCTION_SERVER",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          id as integer,",
						"          formatted_address as string,",
						"          city as string,",
						"          country as string,",
						"          postal_code as long,",
						"          created_at as timestamp,",
						"          updated_at as timestamp,",
						"          district as string,",
						"          latitude as double,",
						"          longitude as double,",
						"          is_default as boolean,",
						"          user_id as integer,",
						"          type as string,",
						"          is_verified as string,",
						"          title as string,",
						"          comments as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> source1",
						"source1 alterRow(upsertIf(true())) ~> alterRow1",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     tableName: 'address',",
						"     schemaName: 'public',",
						"     deletable: false,",
						"     insertable: false,",
						"     updateable: false,",
						"     upsertable: true,",
						"     keys:['id'],",
						"     store: 'postgres',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          id,",
						"          formatted_address,",
						"          city,",
						"          country,",
						"          postal_code,",
						"          created_at,",
						"          updated_at,",
						"          district,",
						"          latitude,",
						"          longitude,",
						"          is_default,",
						"          user_id,",
						"          type,",
						"          is_verified,",
						"          title,",
						"          comments",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_auth_device_token_cdc')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Auth_CDC"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_Intermiadate_Result",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "LS_V2_AUTH_DB_PRODUCTION_SERVER",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          user_id as integer,",
						"          device_id as string,",
						"          device_type as string,",
						"          created_at as timestamp,",
						"          updated_at as timestamp,",
						"          token as string,",
						"          user_type as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> source1",
						"source1 alterRow(upsertIf(true())) ~> alterRow1",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     tableName: 'device_token',",
						"     schemaName: 'public',",
						"     deletable: false,",
						"     insertable: false,",
						"     updateable: false,",
						"     upsertable: true,",
						"     keys:['user_id'],",
						"     store: 'postgres',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          user_id,",
						"          device_id,",
						"          device_type,",
						"          created_at,",
						"          updated_at,",
						"          token,",
						"          user_type",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_auth_employee_cdc')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Auth_CDC"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_Intermiadate_Result",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "LS_V2_AUTH_DB_PRODUCTION_SERVER",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          id as integer,",
						"          user as integer,",
						"          password as string,",
						"          password_salt as string,",
						"          email as string,",
						"          created_at as timestamp,",
						"          updated_at as timestamp,",
						"          is_deleted as boolean,",
						"          password_updated_at as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> source1",
						"source1 alterRow(upsertIf(true())) ~> alterRow1",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     tableName: 'employee',",
						"     schemaName: 'public',",
						"     deletable: false,",
						"     insertable: false,",
						"     updateable: false,",
						"     upsertable: true,",
						"     keys:['user'],",
						"     store: 'postgres',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          id,",
						"          user,",
						"          password,",
						"          password_salt,",
						"          email,",
						"          created_at,",
						"          updated_at,",
						"          is_deleted,",
						"          password_updated_at",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_auth_user_cdc')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Auth_CDC"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_Intermiadate_Result",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "LS_V2_AUTH_DB_PRODUCTION_SERVER",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          is_deleted as boolean,",
						"          created_at as timestamp,",
						"          updated_at as timestamp,",
						"          user as integer,",
						"          email as string,",
						"          password_updated_at as timestamp,",
						"          login_type as string,",
						"          social_id as string,",
						"          is_email_verified as boolean,",
						"          mobile_verified as boolean,",
						"          password_salt as string,",
						"          password as string,",
						"          is_blacklisted as boolean,",
						"          spree_api_key as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> source1",
						"source1 alterRow(upsertIf(true())) ~> alterRow1",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          id as integer,",
						"          is_deleted as boolean,",
						"          created_at as timestamp,",
						"          updated_at as timestamp,",
						"          user as integer,",
						"          email as string,",
						"          otp as integer,",
						"          otp_generated_at as long,",
						"          password_updated_at as timestamp,",
						"          login_type as string,",
						"          social_id as string,",
						"          is_email_verified as boolean,",
						"          email_verification_key as string,",
						"          mobile_otp as integer,",
						"          mobile_otp_generated_at as long,",
						"          mobile_verified as boolean,",
						"          password_salt as string,",
						"          password as string,",
						"          is_blacklisted as boolean,",
						"          spree_api_key as string",
						"     ),",
						"     format: 'table',",
						"     tableName: 'user',",
						"     schemaName: 'public',",
						"     deletable: false,",
						"     insertable: false,",
						"     updateable: false,",
						"     upsertable: true,",
						"     keys:['user'],",
						"     store: 'postgres',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          is_deleted,",
						"          created_at,",
						"          updated_at,",
						"          user,",
						"          email,",
						"          password_updated_at,",
						"          login_type,",
						"          social_id,",
						"          is_email_verified,",
						"          mobile_verified,",
						"          password_salt,",
						"          password,",
						"          is_blacklisted,",
						"          spree_api_key",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_checkout_cards_cdc')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "User_CDC"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_Intermiadate_Result",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "LS_V2_USER_DB_PRODUCTION_SERVER",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          id as integer,",
						"          user_id as integer,",
						"          name_on_card as string,",
						"          scheme as string,",
						"          scheme_local as string,",
						"          instrument_id as string,",
						"          last_digits as string,",
						"          month as string,",
						"          year as string,",
						"          updated_at as timestamp,",
						"          created_at as timestamp,",
						"          card_type as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> source1",
						"source1 alterRow(upsertIf(true())) ~> alterRow1",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          id as integer,",
						"          instrument_id as string,",
						"          card_type as string,",
						"          expiry_month as integer,",
						"          expiry_year as integer,",
						"          scheme as string,",
						"          user_id as integer,",
						"          created_at as timestamp,",
						"          updated_at as timestamp,",
						"          deleted_at as timestamp,",
						"          last_digits as string,",
						"          name_on_card as string,",
						"          scheme_local as string,",
						"          bin as string",
						"     ),",
						"     format: 'table',",
						"     tableName: 'checkout_cards',",
						"     schemaName: 'public',",
						"     deletable: false,",
						"     insertable: false,",
						"     updateable: false,",
						"     upsertable: true,",
						"     keys:['id','user_id'],",
						"     store: 'postgres',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          id,",
						"          instrument_id,",
						"          card_type,",
						"          expiry_month = month,",
						"          expiry_year = year,",
						"          scheme,",
						"          user_id,",
						"          created_at,",
						"          updated_at,",
						"          last_digits,",
						"          name_on_card,",
						"          scheme_local",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_employee_cdc')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "User_CDC"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_Intermiadate_Result",
								"type": "DatasetReference"
							},
							"name": "source1"
						},
						{
							"linkedService": {
								"referenceName": "LS_V2_USER_DB_PRODUCTION_SERVER",
								"type": "LinkedServiceReference"
							},
							"name": "source2"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "LS_V2_USER_DB_PRODUCTION_SERVER",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "selectingcityfields"
						},
						{
							"name": "join1"
						},
						{
							"name": "alterRow1"
						},
						{
							"name": "window1"
						},
						{
							"name": "filter1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          id as integer,",
						"          role_id as integer,",
						"          email as string,",
						"          created_at as timestamp,",
						"          updated_at as timestamp,",
						"          is_deleted as boolean,",
						"          first_name as string,",
						"          last_name as string,",
						"          mobile_number as string,",
						"          dob as timestamp,",
						"          country_code as string,",
						"          country_id as integer,",
						"          gender as string,",
						"          user_type as string,",
						"          availability as string,",
						"          role_name as string,",
						"          active as boolean,",
						"          status as boolean,",
						"          city as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> source1",
						"source(output(",
						"          id as integer,",
						"          created_at as timestamp,",
						"          updated_at as timestamp,",
						"          name as string,",
						"          country_id as integer,",
						"          abbreviation as string,",
						"          city_image_url as string,",
						"          is_visible as boolean,",
						"          deleted_at as timestamp,",
						"          latitude as double,",
						"          longitude as double,",
						"          translation_id as string,",
						"          state_id as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     tableName: 'city',",
						"     schemaName: 'public',",
						"     store: 'postgres',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> source2",
						"source2 select(mapColumn(",
						"          city_id = id,",
						"          name",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectingcityfields",
						"source1, selectingcityfields join(lower(city) == name,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"filter1 alterRow(upsertIf(true())) ~> alterRow1",
						"join1 window(over(id),",
						"     asc(role_name, true),",
						"     final_column = rowNumber() == 1) ~> window1",
						"window1 filter(equals(final_column,true())) ~> filter1",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          id as integer,",
						"          is_deleted as boolean,",
						"          created_at as timestamp,",
						"          updated_at as timestamp,",
						"          first_name as string,",
						"          last_name as string,",
						"          email as string,",
						"          gender as string,",
						"          country_code as string,",
						"          mobile_number as string,",
						"          dob as date,",
						"          user_type as string,",
						"          role_id as integer,",
						"          active as boolean,",
						"          country_id as integer,",
						"          city_id as integer,",
						"          vehicle_id as integer,",
						"          status as boolean,",
						"          availability as string,",
						"          language_id as integer",
						"     ),",
						"     format: 'table',",
						"     tableName: 'employee',",
						"     schemaName: 'public',",
						"     deletable: false,",
						"     insertable: false,",
						"     updateable: false,",
						"     upsertable: true,",
						"     keys:['id'],",
						"     store: 'postgres',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          id,",
						"          is_deleted,",
						"          created_at,",
						"          updated_at,",
						"          first_name,",
						"          last_name,",
						"          email,",
						"          gender,",
						"          country_code,",
						"          mobile_number,",
						"          dob,",
						"          user_type,",
						"          role_id,",
						"          active,",
						"          country_id,",
						"          city_id,",
						"          status,",
						"          availability",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_feedback_cdc')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "User_CDC"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_Intermiadate_Result",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "LS_V2_USER_DB_PRODUCTION_SERVER",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						}
					],
					"scriptLines": [
						"source(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> source1",
						"source1 alterRow(upsertIf(true())) ~> alterRow1",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     tableName: 'feedback',",
						"     schemaName: 'public',",
						"     deletable: false,",
						"     insertable: true,",
						"     updateable: false,",
						"     upsertable: false,",
						"     store: 'postgres',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_inventory_modifiers')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Product CDC"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_Intermiadate_Result",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "LS_V2_PRODUCT_DB_PRODUCTION_SERVER",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          id as integer,",
						"          product_id as integer,",
						"          action_price as double,",
						"          track_stock as boolean,",
						"          supermarket_id as integer,",
						"          created_at as timestamp,",
						"          updated_at as timestamp,",
						"          sale_price as double,",
						"          sale_start_date as timestamp,",
						"          sale_start_time as string,",
						"          sale_end_date as timestamp,",
						"          sale_end_time as string,",
						"          availability_start_date as timestamp,",
						"          availability_end_date as timestamp,",
						"          stock_quantity as integer,",
						"          cost_price as decimal(38,18)",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> source1",
						"source1 alterRow(upsertIf(true())) ~> alterRow1",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     tableName: 'inventory_modifiers',",
						"     schemaName: 'public',",
						"     deletable: false,",
						"     insertable: false,",
						"     updateable: false,",
						"     upsertable: true,",
						"     keys:['id'],",
						"     store: 'postgres',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          id,",
						"          product_id,",
						"          action_price,",
						"          track_stock,",
						"          supermarket_id,",
						"          created_at,",
						"          updated_at,",
						"          sale_price,",
						"          sale_start_date,",
						"          sale_start_time,",
						"          sale_end_date,",
						"          sale_end_time,",
						"          availability_start_date,",
						"          availability_end_date,",
						"          stock_quantity,",
						"          cost_price",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_loyalty_member_cdc')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "User_CDC"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_Intermiadate_Result",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "LS_V2_USER_DB_PRODUCTION_SERVER",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          id as long,",
						"          user_id as long,",
						"          tenant_id as long,",
						"          loyalty_member_id as integer,",
						"          loyalty_id as string,",
						"          created_at as timestamp,",
						"          updated_at as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> source1",
						"source1 alterRow(upsertIf(true())) ~> alterRow1",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     tableName: 'loyalty_member',",
						"     schemaName: 'public',",
						"     deletable: false,",
						"     insertable: false,",
						"     updateable: false,",
						"     upsertable: true,",
						"     keys:['id'],",
						"     store: 'postgres',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          id,",
						"          user_id,",
						"          tenant_id,",
						"          loyalty_member_id,",
						"          loyalty_id,",
						"          created_at,",
						"          updated_at",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_offline_product_cdc')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Product CDC"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_Intermiadate_Result",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "LS_V2_PRODUCT_DB_PRODUCTION_SERVER",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          id as integer,",
						"          sku as string,",
						"          price as double,",
						"          created_at as timestamp,",
						"          updated_at as timestamp,",
						"          name as string,",
						"          country_id as integer,",
						"          order as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> source1",
						"source1 alterRow(upsertIf(true())) ~> alterRow1",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     tableName: 'offline_product',",
						"     schemaName: 'public',",
						"     deletable: false,",
						"     insertable: false,",
						"     updateable: false,",
						"     upsertable: true,",
						"     keys:['id'],",
						"     store: 'postgres',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          id,",
						"          sku,",
						"          price,",
						"          created_at,",
						"          updated_at,",
						"          name,",
						"          country_id,",
						"          order",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_recipe_cdc')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Product CDC"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_Intermiadate_Result",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "LS_V2_PRODUCT_DB_PRODUCTION_SERVER",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          id as integer,",
						"          name_en as string,",
						"          recipe_en as string,",
						"          calories as integer,",
						"          cuisine_id as integer,",
						"          servings as integer,",
						"          updated_at as timestamp,",
						"          is_visible as boolean,",
						"          created_at as timestamp,",
						"          description_en as string,",
						"          name_ar as string,",
						"          recipe_ar as string,",
						"          description_ar as string,",
						"          country_id as integer,",
						"          cuisines_banner_image_url as string,",
						"          recipe_banner_image_url as string,",
						"          app_home_image_url as string,",
						"          position as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> source1",
						"source1 alterRow(upsertIf(true())) ~> alterRow1",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     tableName: 'recipe',",
						"     schemaName: 'public',",
						"     deletable: false,",
						"     insertable: false,",
						"     updateable: false,",
						"     upsertable: true,",
						"     keys:['id'],",
						"     store: 'postgres',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          id,",
						"          name_en,",
						"          recipe_en,",
						"          calories,",
						"          cuisine_id,",
						"          servings,",
						"          updated_at,",
						"          is_visible,",
						"          created_at,",
						"          description_en,",
						"          name_ar,",
						"          recipe_ar,",
						"          description_ar,",
						"          country_id,",
						"          cuisines_banner_image_url,",
						"          recipe_banner_image_url,",
						"          app_home_image_url,",
						"          position",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_user_cdc')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "User_CDC"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_Intermiadate_Result",
								"type": "DatasetReference"
							},
							"name": "source1"
						},
						{
							"linkedService": {
								"referenceName": "LS_V2_USER_DB_PRODUCTION_SERVER",
								"type": "LinkedServiceReference"
							},
							"name": "citytable"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "LS_V2_USER_DB_PRODUCTION_SERVER",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "select1"
						},
						{
							"name": "join1"
						},
						{
							"name": "alterRow1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          id as integer,",
						"          is_deleted as boolean,",
						"          created_at as timestamp,",
						"          updated_at as timestamp,",
						"          first_name as string,",
						"          last_name as string,",
						"          email as string,",
						"          gender as string,",
						"          country_code as string,",
						"          mobile_number as string,",
						"          dob as string,",
						"          referral_code as string,",
						"          language_id as integer,",
						"          city as string,",
						"          latitude as double,",
						"          longitude as double,",
						"          country_id as integer,",
						"          receive_marketing_promotions as boolean,",
						"          login_type as string,",
						"          social_id as string,",
						"          balance as integer,",
						"          blacklisted_at as timestamp,",
						"          blacklisted_reason as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> source1",
						"source(output(",
						"          id as integer,",
						"          created_at as timestamp,",
						"          updated_at as timestamp,",
						"          name as string,",
						"          country_id as integer,",
						"          abbreviation as string,",
						"          city_image_url as string,",
						"          is_visible as boolean,",
						"          deleted_at as timestamp,",
						"          latitude as double,",
						"          longitude as double,",
						"          translation_id as string,",
						"          state_id as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     tableName: 'city',",
						"     schemaName: 'public',",
						"     store: 'postgres',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> citytable",
						"citytable select(mapColumn(",
						"          city_id = id,",
						"          name",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"source1, select1 join(city == name,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"join1 alterRow(upsertIf(true())) ~> alterRow1",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          id as integer,",
						"          is_deleted as boolean,",
						"          created_at as timestamp,",
						"          updated_at as timestamp,",
						"          first_name as string,",
						"          last_name as string,",
						"          email as string,",
						"          gender as string,",
						"          country_code as string,",
						"          mobile_number as string,",
						"          dob as date,",
						"          referral_code as string,",
						"          language_id as integer,",
						"          super_market_id as integer,",
						"          latitude as double,",
						"          longitude as double,",
						"          country_id as integer,",
						"          city_id as integer,",
						"          receive_marketing_promotions as boolean,",
						"          login_type as string,",
						"          social_id as string,",
						"          balance as double,",
						"          blacklisted_at as timestamp,",
						"          blacklisted_reason as string",
						"     ),",
						"     format: 'table',",
						"     tableName: 'user',",
						"     schemaName: 'public',",
						"     deletable: false,",
						"     insertable: false,",
						"     updateable: false,",
						"     upsertable: true,",
						"     keys:['id'],",
						"     store: 'postgres',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          id,",
						"          is_deleted,",
						"          created_at,",
						"          updated_at,",
						"          first_name,",
						"          last_name,",
						"          email,",
						"          gender,",
						"          country_code,",
						"          mobile_number,",
						"          dob,",
						"          referral_code,",
						"          language_id,",
						"          latitude,",
						"          longitude,",
						"          country_id,",
						"          receive_marketing_promotions,",
						"          login_type,",
						"          social_id,",
						"          balance,",
						"          blacklisted_at,",
						"          blacklisted_reason,",
						"          city_id",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/employee')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "User DB"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_Intermiadate_Result",
								"type": "DatasetReference"
							},
							"name": "employee"
						},
						{
							"linkedService": {
								"referenceName": "LS_V2_USER_DB_PRODUCTION_SERVER",
								"type": "LinkedServiceReference"
							},
							"name": "city"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "LS_V2_USER_DB_PRODUCTION_SERVER",
								"type": "LinkedServiceReference"
							},
							"name": "StoreInDB"
						}
					],
					"transformations": [
						{
							"name": "joiningCityTable"
						},
						{
							"name": "selectingNeededColumns"
						},
						{
							"name": "window1"
						},
						{
							"name": "selectingRequiredColumns"
						},
						{
							"name": "filteringcolumns"
						}
					],
					"scriptLines": [
						"source(output(",
						"          id as integer,",
						"          role_id as integer,",
						"          email as string,",
						"          created_at as timestamp,",
						"          updated_at as timestamp,",
						"          is_deleted as boolean,",
						"          first_name as string,",
						"          last_name as string,",
						"          mobile_number as string,",
						"          dob as timestamp,",
						"          country_code as string,",
						"          country_id as integer,",
						"          gender as string,",
						"          user_type as string,",
						"          availability as string,",
						"          role_name as string,",
						"          active as boolean,",
						"          status as boolean,",
						"          city as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> employee",
						"source(output(",
						"          id as integer,",
						"          created_at as timestamp,",
						"          updated_at as timestamp,",
						"          name as string,",
						"          country_id as integer,",
						"          abbreviation as string,",
						"          city_image_url as string,",
						"          is_visible as boolean,",
						"          deleted_at as timestamp,",
						"          latitude as double,",
						"          longitude as double,",
						"          translation_id as string,",
						"          state_id as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     tableName: 'city',",
						"     schemaName: 'public',",
						"     store: 'postgres',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> city",
						"employee, city join(lower(city) == name,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joiningCityTable",
						"joiningCityTable select(mapColumn(",
						"          id = employee@id,",
						"          role_id,",
						"          email,",
						"          created_at = employee@created_at,",
						"          updated_at = employee@updated_at,",
						"          is_deleted,",
						"          first_name,",
						"          last_name,",
						"          mobile_number,",
						"          dob,",
						"          country_code,",
						"          country_id = employee@country_id,",
						"          gender,",
						"          user_type,",
						"          availability,",
						"          active,",
						"          status,",
						"          city_id = city@id,",
						"          role_name",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectingNeededColumns",
						"selectingNeededColumns window(over(id),",
						"     asc(role_name, false),",
						"     final_column = rowNumber()==1) ~> window1",
						"filteringcolumns select(mapColumn(",
						"          id,",
						"          role_id,",
						"          email,",
						"          created_at,",
						"          updated_at,",
						"          is_deleted,",
						"          first_name,",
						"          last_name,",
						"          mobile_number,",
						"          dob,",
						"          country_code,",
						"          country_id,",
						"          gender,",
						"          user_type,",
						"          availability,",
						"          active,",
						"          status,",
						"          city_id",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectingRequiredColumns",
						"window1 filter(equals(final_column,true())) ~> filteringcolumns",
						"selectingRequiredColumns sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     tableName: 'employee',",
						"     schemaName: 'public',",
						"     deletable: false,",
						"     insertable: true,",
						"     updateable: false,",
						"     upsertable: false,",
						"     store: 'postgres',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> StoreInDB"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/order')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Order DB"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_Intermiadate_Result",
								"type": "DatasetReference"
							},
							"name": "source1"
						},
						{
							"linkedService": {
								"referenceName": "LS_V2_USER_DB_PRODUCTION_SERVER",
								"type": "LinkedServiceReference"
							},
							"name": "city"
						},
						{
							"linkedService": {
								"referenceName": "LS_V2_PRODUCTION_SERVER",
								"type": "LinkedServiceReference"
							},
							"name": "ordercancellationreason"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "LS_V2_PRODUCTION_SERVER",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "join1"
						},
						{
							"name": "select1"
						},
						{
							"name": "join2"
						},
						{
							"name": "select2"
						}
					],
					"scriptLines": [
						"source(output(",
						"          id as integer,",
						"          item_total as decimal(38,18),",
						"          total as decimal(38,18),",
						"          status as string,",
						"          user_id as integer,",
						"          completed_at as timestamp,",
						"          bill_address_id as integer,",
						"          ship_address_id as integer,",
						"          payment_total as decimal(38,18),",
						"          created_at as timestamp,",
						"          updated_at as timestamp,",
						"          currency as string,",
						"          item_count as integer,",
						"          cancel_reason as string,",
						"          cancelled_at as timestamp,",
						"          cancelled_by as integer,",
						"          delivery_option_id as integer,",
						"          country_id as integer,",
						"          payment_option_id as integer,",
						"          city as string,",
						"          language_id as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> source1",
						"source(output(",
						"          id as integer,",
						"          name as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     query: 'select id, name from city',",
						"     store: 'postgres',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> city",
						"source(output(",
						"          id as integer,",
						"          reason_en as string,",
						"          reason_ar as string,",
						"          visible as boolean,",
						"          created_at as timestamp,",
						"          updated_at as timestamp,",
						"          deleted_at as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     query: 'select * from order_cancellation_reason',",
						"     store: 'postgres',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> ordercancellationreason",
						"source1, city join(lower(city) == name,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"join1 select(mapColumn(",
						"          id = source1@id,",
						"          item_total,",
						"          total,",
						"          status,",
						"          user_id,",
						"          completed_at,",
						"          bill_address_id,",
						"          ship_address_id,",
						"          payment_total,",
						"          created_at,",
						"          updated_at,",
						"          currency,",
						"          item_count,",
						"          cancelled_at,",
						"          cancelled_by,",
						"          delivery_option_id,",
						"          country_id,",
						"          payment_option_id,",
						"          language_id,",
						"          city_id = city@id,",
						"          cancel_reason",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1, ordercancellationreason join(cancel_reason == reason_en,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join2",
						"join2 select(mapColumn(",
						"          id = select1@id,",
						"          item_total,",
						"          total,",
						"          status,",
						"          user_id,",
						"          completed_at,",
						"          bill_address_id,",
						"          ship_address_id,",
						"          payment_total,",
						"          created_at = select1@created_at,",
						"          updated_at = select1@updated_at,",
						"          currency,",
						"          item_count,",
						"          cancelled_at,",
						"          cancelled_by,",
						"          delivery_option_id,",
						"          country_id,",
						"          payment_option_id,",
						"          language_id,",
						"          city_id,",
						"          order_cancellation_id = ordercancellationreason@id",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2",
						"select2 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     tableName: 'order',",
						"     schemaName: 'public',",
						"     deletable: false,",
						"     insertable: true,",
						"     updateable: false,",
						"     upsertable: false,",
						"     store: 'postgres',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          id,",
						"          item_total,",
						"          total,",
						"          status,",
						"          user_id,",
						"          completed_at,",
						"          bill_address_id,",
						"          ship_address_id,",
						"          payment_total,",
						"          created_at,",
						"          updated_at,",
						"          currency,",
						"          item_count,",
						"          cancelled_at,",
						"          cancelled_by,",
						"          delivery_option_id,",
						"          country_id,",
						"          payment_option_id,",
						"          language_id,",
						"          city_id,",
						"          order_cancellation_id",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/order_product')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Order DB"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_Intermiadate_Result",
								"type": "DatasetReference"
							},
							"name": "extractorderproduct"
						},
						{
							"linkedService": {
								"referenceName": "LS_V2_PRODUCTION_SERVER",
								"type": "LinkedServiceReference"
							},
							"name": "ordershipment"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "LS_V2_PRODUCTION_SERVER",
								"type": "LinkedServiceReference"
							},
							"name": "writestatusbacktodb"
						}
					],
					"transformations": [
						{
							"name": "joinbasedonshipmentid"
						},
						{
							"name": "selectingmandatoryfields"
						},
						{
							"name": "addingstatuscondition"
						},
						{
							"name": "select2"
						}
					],
					"scriptLines": [
						"source(output(",
						"          id as integer,",
						"          product_variant_id as integer,",
						"          quantity as integer,",
						"          picked_weight as integer,",
						"          picked_quantity as integer,",
						"          price as decimal(38,18),",
						"          created_at as timestamp,",
						"          replaced as boolean,",
						"          state as string,",
						"          updated_at as timestamp,",
						"          action_price as decimal(38,18),",
						"          sale_price as decimal(38,18),",
						"          picker_id as integer,",
						"          product_id as integer,",
						"          delivery_instruction as string,",
						"          order_shipment_id as integer,",
						"          replacement_pref as string,",
						"          category_id as integer,",
						"          status as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> extractorderproduct",
						"source(output(",
						"          id as integer,",
						"          order_id as integer,",
						"          supermarket_id as integer,",
						"          delivery_type_id as integer,",
						"          delivery_date as date,",
						"          delivered_at as timestamp,",
						"          total as double,",
						"          tax_total as double,",
						"          status as string,",
						"          driver_id as integer,",
						"          delivery_charges as double,",
						"          time_slot_id as integer,",
						"          created_at as timestamp,",
						"          updated_at as timestamp,",
						"          deleted_at as timestamp,",
						"          processing_start_at as timestamp,",
						"          dispatch_job_id as integer,",
						"          is_delivery_on_hold as boolean,",
						"          delivery_order as integer,",
						"          formatted_time_slot as string,",
						"          promotion_woa_percentage as double,",
						"          promotion_woa_max_discount as double,",
						"          discount_given as double",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     tableName: 'order_shipment',",
						"     schemaName: 'public',",
						"     store: 'postgres',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> ordershipment",
						"extractorderproduct, select2 join(order_shipment_id == shipment_id,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinbasedonshipmentid",
						"joinbasedonshipmentid select(mapColumn(",
						"          id,",
						"          product_variant_id,",
						"          quantity,",
						"          picked_weight,",
						"          picked_quantity,",
						"          price,",
						"          created_at,",
						"          replaced,",
						"          state,",
						"          updated_at,",
						"          action_price,",
						"          sale_price,",
						"          picker_id,",
						"          product_id,",
						"          delivery_instruction,",
						"          order_shipment_id,",
						"          replacement_pref,",
						"          category_id,",
						"          status,",
						"          shipment_id,",
						"          shipment_status,",
						"          order_id",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectingmandatoryfields",
						"selectingmandatoryfields derive(status = iif(picked_quantity >= quantity, 'picked',\r",
						"    iif(equals(replaced, true()), 'replaced',\r",
						"        iif(and(equals(shipment_status, 'pending'), equals(picked_quantity, 0)), 'pending',\r",
						"            iif(equals(state,'complete') && equals(picked_quantity, 0) && isNull(replaced), 'issue', '')\r",
						"        )\r",
						"    )\r",
						")) ~> addingstatuscondition",
						"ordershipment select(mapColumn(",
						"          shipment_id = id,",
						"          shipment_status = status,",
						"          order_id",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2",
						"addingstatuscondition sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          id as integer,",
						"          product_id as integer,",
						"          quantity as integer,",
						"          price as double,",
						"          action_price as double,",
						"          status as string,",
						"          picker_id as integer,",
						"          picked_quantity as integer,",
						"          created_at as timestamp,",
						"          updated_at as timestamp,",
						"          deleted_at as timestamp,",
						"          replacement_pref as string,",
						"          order_shipment_id as integer,",
						"          product_variant_id as integer,",
						"          category_id as integer,",
						"          replacement_of as integer,",
						"          added_by as integer,",
						"          modified_by as integer,",
						"          delivery_instruction as string,",
						"          sale_price as double,",
						"          product_report_id as integer,",
						"          picked_weight as double,",
						"          replaced_by as integer,",
						"          meta as string",
						"     ),",
						"     format: 'table',",
						"     tableName: 'order_product',",
						"     schemaName: 'public',",
						"     deletable: false,",
						"     insertable: true,",
						"     updateable: false,",
						"     upsertable: false,",
						"     store: 'postgres',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          id,",
						"          product_id,",
						"          quantity,",
						"          price,",
						"          action_price,",
						"          status,",
						"          picker_id,",
						"          picked_quantity,",
						"          created_at,",
						"          updated_at,",
						"          replacement_pref,",
						"          order_shipment_id,",
						"          product_variant_id,",
						"          category_id,",
						"          delivery_instruction,",
						"          sale_price,",
						"          picked_weight",
						"     )) ~> writestatusbacktodb"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/order_shipment')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Order DB"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_Intermiadate_Result",
								"type": "DatasetReference"
							},
							"name": "ordershipment"
						},
						{
							"linkedService": {
								"referenceName": "LS_V2_USER_DB_PRODUCTION_SERVER",
								"type": "LinkedServiceReference"
							},
							"name": "deliverytype"
						},
						{
							"linkedService": {
								"referenceName": "LS_V2_USER_DB_PRODUCTION_SERVER",
								"type": "LinkedServiceReference"
							},
							"name": "timeslottable"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "LS_V2_PRODUCTION_SERVER",
								"type": "LinkedServiceReference"
							},
							"name": "writeintodb"
						}
					],
					"transformations": [
						{
							"name": "joindeliverytype"
						},
						{
							"name": "selectdeliverytype"
						},
						{
							"name": "mergingtimeslots"
						},
						{
							"name": "selectrequiredcolumns"
						},
						{
							"name": "selecttimeslots"
						},
						{
							"name": "joiningtimeslots"
						}
					],
					"scriptLines": [
						"source(output(",
						"          id as integer,",
						"          order_id as integer,",
						"          order_status as string,",
						"          created_at as timestamp,",
						"          updated_at as timestamp,",
						"          tax_total as double,",
						"          total as decimal(38,18),",
						"          start_time as string,",
						"          end_time as string,",
						"          day_of_week as string,",
						"          delivery_option_id as integer,",
						"          order_type as string,",
						"          supermarket_id as integer,",
						"          delivery_date as timestamp,",
						"          delivery_charges as decimal(38,18),",
						"          is_delivery_on_hold as boolean,",
						"          processing_start_at as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> ordershipment",
						"source(output(",
						"          id as integer,",
						"          name as string,",
						"          created_at as timestamp,",
						"          updated_at as timestamp,",
						"          deleted_at as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     tableName: 'delivery_type',",
						"     schemaName: 'public',",
						"     store: 'postgres',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> deliverytype",
						"source(output(",
						"          id as integer,",
						"          start_time as string,",
						"          end_time as string,",
						"          country_id as integer,",
						"          delivery_option_id as integer,",
						"          day_of_week as string,",
						"          created_at as timestamp,",
						"          updated_at as timestamp,",
						"          deleted_at as timestamp,",
						"          is_enabled as boolean",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     tableName: 'time_slot',",
						"     schemaName: 'public',",
						"     store: 'postgres',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> timeslottable",
						"ordershipment, selectdeliverytype join(order_type == delivery_type_name,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joindeliverytype",
						"deliverytype select(mapColumn(",
						"          delivery_type_id = id,",
						"          delivery_type_name = name",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectdeliverytype",
						"joiningtimeslots derive(formatted_time_slot = concat(selecttimeslots@start_time,'-',selecttimeslots@end_time),",
						"          delivery_type_id = coalesce(delivery_type_id,1)) ~> mergingtimeslots",
						"mergingtimeslots select(mapColumn(",
						"          id,",
						"          order_id,",
						"          order_status,",
						"          created_at,",
						"          updated_at,",
						"          tax_total,",
						"          total,",
						"          order_type,",
						"          supermarket_id,",
						"          delivery_date,",
						"          delivery_charges,",
						"          is_delivery_on_hold,",
						"          processing_start_at,",
						"          delivery_type_id,",
						"          formatted_time_slot,",
						"          time_slot_id = tc_id",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectrequiredcolumns",
						"timeslottable select(mapColumn(",
						"          tc_id = id,",
						"          start_time,",
						"          end_time,",
						"          delivery_option_id,",
						"          day_of_week",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selecttimeslots",
						"joindeliverytype, selecttimeslots join(ordershipment@start_time == selecttimeslots@start_time",
						"     && ordershipment@end_time == selecttimeslots@end_time",
						"     && ordershipment@delivery_option_id == selecttimeslots@delivery_option_id",
						"     && ordershipment@day_of_week == selecttimeslots@day_of_week,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joiningtimeslots",
						"selectrequiredcolumns sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          id as integer,",
						"          order_id as integer,",
						"          supermarket_id as integer,",
						"          delivery_type_id as integer,",
						"          delivery_date as date,",
						"          delivered_at as timestamp,",
						"          total as double,",
						"          tax_total as double,",
						"          status as string,",
						"          driver_id as integer,",
						"          delivery_charges as double,",
						"          time_slot_id as integer,",
						"          created_at as timestamp,",
						"          updated_at as timestamp,",
						"          deleted_at as timestamp,",
						"          processing_start_at as timestamp,",
						"          dispatch_job_id as integer,",
						"          is_delivery_on_hold as boolean,",
						"          delivery_order as integer,",
						"          formatted_time_slot as string,",
						"          promotion_woa_percentage as double,",
						"          promotion_woa_max_discount as double,",
						"          discount_given as double",
						"     ),",
						"     format: 'table',",
						"     tableName: 'order_shipment',",
						"     schemaName: 'public',",
						"     deletable: false,",
						"     insertable: true,",
						"     updateable: false,",
						"     upsertable: false,",
						"     store: 'postgres',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          id,",
						"          order_id,",
						"          supermarket_id,",
						"          delivery_type_id,",
						"          delivery_date,",
						"          total,",
						"          tax_total,",
						"          delivery_charges,",
						"          time_slot_id,",
						"          created_at,",
						"          updated_at,",
						"          processing_start_at,",
						"          is_delivery_on_hold,",
						"          formatted_time_slot,",
						"          status = order_status",
						"     )) ~> writeintodb"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/supermarket')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "User DB"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_Intermiadate_Result",
								"type": "DatasetReference"
							},
							"name": "supermarket"
						},
						{
							"linkedService": {
								"referenceName": "LS_V2_USER_DB_PRODUCTION_SERVER",
								"type": "LinkedServiceReference"
							},
							"name": "city"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "LS_V2_USER_DB_PRODUCTION_SERVER",
								"type": "LinkedServiceReference"
							},
							"name": "StoreInDB"
						}
					],
					"transformations": [
						{
							"name": "joiningCity"
						},
						{
							"name": "selectingRequiredFields"
						},
						{
							"name": "replacingemptystringintransactionID"
						}
					],
					"scriptLines": [
						"source(output(",
						"          id as integer,",
						"          name as string,",
						"          address as string,",
						"          mobile_number as string,",
						"          country_id as integer,",
						"          created_at as timestamp,",
						"          updated_at as timestamp,",
						"          is_visible as boolean,",
						"          latitude as double,",
						"          longitude as double,",
						"          time_slots_lead_time as integer,",
						"          express_delivery_fee as decimal(38,18),",
						"          call_mask as boolean,",
						"          minimum_total_amount_for_free_delivery as decimal(38,18),",
						"          description as string,",
						"          state_id as integer,",
						"          city as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> supermarket",
						"source(output(",
						"          id as integer,",
						"          created_at as timestamp,",
						"          updated_at as timestamp,",
						"          name as string,",
						"          country_id as integer,",
						"          abbreviation as string,",
						"          city_image_url as string,",
						"          is_visible as boolean,",
						"          deleted_at as timestamp,",
						"          latitude as double,",
						"          longitude as double,",
						"          translation_id as string,",
						"          state_id as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     query: 'select * from city',",
						"     store: 'postgres',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> city",
						"supermarket, city join(supermarket@state_id == toInteger(city@state_id)",
						"     && city == city@name,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joiningCity",
						"replacingemptystringintransactionID select(mapColumn(",
						"          id = supermarket@id,",
						"          name = supermarket@name,",
						"          address,",
						"          mobile_number,",
						"          country_id = supermarket@country_id,",
						"          created_at = supermarket@created_at,",
						"          updated_at = supermarket@updated_at,",
						"          is_visible = supermarket@is_visible,",
						"          latitude = supermarket@latitude,",
						"          longitude = supermarket@longitude,",
						"          time_slots_lead_time,",
						"          express_delivery_fee,",
						"          call_mask,",
						"          minimum_total_amount_for_free_delivery,",
						"          description,",
						"          city_id = city@id,",
						"          translation_id",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectingRequiredFields",
						"joiningCity derive(translation_id = coalesce(translation_id,'')) ~> replacingemptystringintransactionID",
						"selectingRequiredFields sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     tableName: 'super_market',",
						"     schemaName: 'public',",
						"     deletable: false,",
						"     insertable: true,",
						"     updateable: false,",
						"     upsertable: false,",
						"     store: 'postgres',",
						"     batchSize: 100000,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> StoreInDB"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/user')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "User DB"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_Intermiadate_Result",
								"type": "DatasetReference"
							},
							"name": "source1"
						},
						{
							"linkedService": {
								"referenceName": "LS_V2_USER_DB_PRODUCTION_SERVER",
								"type": "LinkedServiceReference"
							},
							"name": "city"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "LS_V2_USER_DB_PRODUCTION_SERVER",
								"type": "LinkedServiceReference"
							},
							"name": "StoreInDB"
						}
					],
					"transformations": [
						{
							"name": "joiningCityTable"
						},
						{
							"name": "selectingRequiredFields"
						}
					],
					"scriptLines": [
						"source(output(",
						"          id as integer,",
						"          is_deleted as boolean,",
						"          created_at as timestamp,",
						"          updated_at as timestamp,",
						"          first_name as string,",
						"          last_name as string,",
						"          email as string,",
						"          gender as string,",
						"          country_code as string,",
						"          mobile_number as string,",
						"          dob as string,",
						"          referral_code as string,",
						"          language_id as integer,",
						"          city as string,",
						"          latitude as double,",
						"          longitude as double,",
						"          country_id as integer,",
						"          receive_marketing_promotions as boolean,",
						"          login_type as string,",
						"          social_id as string,",
						"          balance as integer,",
						"          blacklisted_at as timestamp,",
						"          blacklisted_reason as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> source1",
						"source(output(",
						"          id as integer,",
						"          created_at as timestamp,",
						"          updated_at as timestamp,",
						"          name as string,",
						"          country_id as integer,",
						"          abbreviation as string,",
						"          city_image_url as string,",
						"          is_visible as boolean,",
						"          deleted_at as timestamp,",
						"          latitude as double,",
						"          longitude as double,",
						"          translation_id as string,",
						"          state_id as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     tableName: 'city',",
						"     schemaName: 'public',",
						"     store: 'postgres',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> city",
						"source1, city join(city == name,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joiningCityTable",
						"joiningCityTable select(mapColumn(",
						"          id = source1@id,",
						"          is_deleted,",
						"          created_at = source1@created_at,",
						"          updated_at = source1@updated_at,",
						"          first_name,",
						"          last_name,",
						"          email,",
						"          gender,",
						"          country_code,",
						"          mobile_number,",
						"          dob,",
						"          referral_code,",
						"          language_id,",
						"          latitude = source1@latitude,",
						"          longitude = source1@longitude,",
						"          country_id = source1@country_id,",
						"          receive_marketing_promotions,",
						"          login_type,",
						"          social_id,",
						"          balance,",
						"          blacklisted_at,",
						"          blacklisted_reason,",
						"          city_id = city@id",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectingRequiredFields",
						"selectingRequiredFields sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     tableName: 'user',",
						"     schemaName: 'public',",
						"     deletable: false,",
						"     insertable: true,",
						"     updateable: false,",
						"     upsertable: false,",
						"     store: 'postgres',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          id,",
						"          is_deleted,",
						"          created_at,",
						"          updated_at,",
						"          first_name,",
						"          last_name,",
						"          email,",
						"          gender,",
						"          country_code,",
						"          mobile_number,",
						"          dob,",
						"          referral_code,",
						"          language_id,",
						"          latitude,",
						"          longitude,",
						"          country_id,",
						"          receive_marketing_promotions,",
						"          login_type,",
						"          social_id,",
						"          balance,",
						"          blacklisted_at,",
						"          blacklisted_reason,",
						"          city_id",
						"     )) ~> StoreInDB"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Move_Image_Files')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Move files from one folder to another folder",
				"activities": [
					{
						"name": "Moving_The _Image_Files",
						"description": "Copy a file from the source store to the destination store.",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AmazonS3ReadSettings",
									"recursive": true,
									"wildcardFolderPath": "*",
									"wildcardFileName": "*",
									"deleteFilesAfterCompletion": false
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								},
								"recursive": false
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings",
									"copyBehavior": "PreserveHierarchy"
								}
							},
							"enableStaging": false,
							"dataIntegrationUnits": 0
						},
						"inputs": [
							{
								"referenceName": "BinaryDataSource_File2",
								"type": "DatasetReference",
								"parameters": {
									"Bucket": {
										"value": "@pipeline().parameters.SourceStore_Location",
										"type": "Expression"
									},
									"Directory": {
										"value": "@pipeline().parameters.SourceStore_Directory",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "BinaryDataDestination2",
								"type": "DatasetReference",
								"parameters": {
									"Container": {
										"value": "@pipeline().parameters.DestinationStore_Location",
										"type": "Expression"
									},
									"Directory": {
										"value": "@pipeline().parameters.DestinationStore_Directory",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"SourceStore_Location": {
						"type": "String",
						"defaultValue": "imagemigration-to-azureaccount"
					},
					"SourceStore_Directory": {
						"type": "String",
						"defaultValue": "images"
					},
					"DestinationStore_Location": {
						"type": "String",
						"defaultValue": "file-upload"
					},
					"DestinationStore_Directory": {
						"type": "String",
						"defaultValue": "images"
					}
				},
				"annotations": []
			},
			"dependsOn": []
		}
	]
}