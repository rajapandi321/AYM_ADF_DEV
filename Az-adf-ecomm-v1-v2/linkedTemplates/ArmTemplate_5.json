{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "Az-adf-ecomm-v1-v2"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/taxon_group_membership')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "PostgreSqlV2Source",
								"query": "select \n    taxon_group_id,\n    taxon_id,\n    position\nfrom spree_taxon_group_memberships;"
							},
							"sink": {
								"type": "AzurePostgreSQLSink",
								"writeBatchSize": 1000000,
								"writeBatchTimeout": "00:30:00",
								"writeMethod": "CopyCommand"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "taxon_group_id",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "taxon_group_id",
											"type": "Int32",
											"physicalType": "integer"
										}
									},
									{
										"source": {
											"name": "taxon_id",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "taxon_id",
											"type": "Int32",
											"physicalType": "integer"
										}
									},
									{
										"source": {
											"name": "position",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "position",
											"type": "Int32",
											"physicalType": "integer"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_V1_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_V2_PRODUCT_DB_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {
									"table_name": "taxon_group_membership"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Product DB"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/taxonomies')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "PostgreSqlV2Source",
								"query": "select st.id,\n        stt.name,\n        st.created_at, \n        st.updated_at,\n        st.position,\n        1 AS category_id\nfrom spree_taxonomies st\nleft join spree_taxonomy_translations stt\non st.id = stt.spree_taxonomy_id\nand locale='en';"
							},
							"sink": {
								"type": "AzurePostgreSQLSink",
								"writeBatchSize": 1000000,
								"writeBatchTimeout": "00:30:00",
								"writeMethod": "CopyCommand"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "id",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "id",
											"type": "Int32",
											"physicalType": "integer"
										}
									},
									{
										"source": {
											"name": "created_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										},
										"sink": {
											"name": "created_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										}
									},
									{
										"source": {
											"name": "updated_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										},
										"sink": {
											"name": "updated_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										}
									},
									{
										"source": {
											"name": "name",
											"type": "String",
											"physicalType": "character varying"
										},
										"sink": {
											"name": "name",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "position",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "position",
											"type": "Int32",
											"physicalType": "integer"
										}
									},
									{
										"source": {
											"name": "category_id",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "category_id",
											"type": "Int32",
											"physicalType": "integer"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_V1_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_V2_PRODUCT_DB_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {
									"table_name": "taxonomies"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Product DB"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/time_slot')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "time_slot table",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Lookup1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "PostgreSqlV2Source",
								"query": "SELECT \n    spree_shipping_method_id AS delivery_option_id, \n    CASE \n        WHEN dtss.day_of_week = 0 THEN 'sunday' \n        WHEN dtss.day_of_week = 1 THEN 'monday' \n        WHEN dtss.day_of_week = 2 THEN 'tuesday' \n        WHEN dtss.day_of_week = 3 THEN 'wednesday' \n        WHEN dtss.day_of_week = 4 THEN 'thursday' \n        WHEN dtss.day_of_week = 5 THEN 'friday' \n        WHEN dtss.day_of_week = 6 THEN 'saturday' \n        ELSE '' \n    END AS day_of_week, \n    cast(dts.start_time as text), \n    cast(dts.end_time as text), \n    dts.enabled, \n    1 AS country_id \nFROM \n    danube_time_slots_schedules dtss \nLEFT JOIN \n    danube_time_slots dts ON dtss.time_slot_id = dts.id \nwhere dts.enabled\nGROUP BY \n    dtss.time_slot_id, \n    dtss.spree_shipping_method_id, \n    dtss.day_of_week, \n    dts.start_time, \n    dts.end_time, \n    dts.enabled;"
							},
							"sink": {
								"type": "AzurePostgreSQLSink",
								"writeBatchSize": 1000000,
								"writeBatchTimeout": "00:30:00",
								"writeMethod": "CopyCommand"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "start_time",
											"type": "String",
											"physicalType": "text"
										},
										"sink": {
											"name": "start_time",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "end_time",
											"type": "String",
											"physicalType": "text"
										},
										"sink": {
											"name": "end_time",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "country_id",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "country_id",
											"type": "Int32",
											"physicalType": "integer"
										}
									},
									{
										"source": {
											"name": "delivery_option_id",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "delivery_option_id",
											"type": "Int32",
											"physicalType": "integer"
										}
									},
									{
										"source": {
											"name": "day_of_week",
											"type": "String",
											"physicalType": "text"
										},
										"sink": {
											"name": "day_of_week",
											"type": "String",
											"physicalType": "character varying"
										}
									},
									{
										"source": {
											"name": "enabled",
											"type": "Boolean",
											"physicalType": "boolean"
										},
										"sink": {
											"name": "is_enabled",
											"type": "Boolean",
											"physicalType": "boolean"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_V1_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_V2_USER_DB_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {
									"table_name": "time_slot"
								}
							}
						]
					},
					{
						"name": "Lookup1",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzurePostgreSqlSource",
								"query": "alter sequence time_slot_id_seq restart with 1;\nSelect 'Altering Sequence ID' as Update;",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_V2_USER_DB_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {
									"table_name": "time_slot"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "User DB"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/user')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "PostgreSqlV2Source",
								"query": "with cte as\r\n(SELECT\r\n  u.id,\r\n  CASE\r\n    WHEN u.deleted_at IS NOT NULL THEN TRUE\r\n    ELSE FALSE\r\n  END AS is_deleted,\r\n  u.created_at,\r\n  u.updated_at,\r\n  LEFT(COALESCE(u.first_name, ''), 40) AS first_name,\r\n  LEFT(COALESCE(u.last_name, ''), 40) AS last_name,\r\n  u.email,\r\n  'others' as gender,\r\n  COALESCE(CONCAT('+', u.mobile_number_country_code),'') AS country_code,\r\n  LEFT(COALESCE(CASE\r\n    WHEN u.mobile_phone_number LIKE CONCAT(\r\n      '+', u.mobile_number_country_code,\r\n      '%'\r\n      ) THEN SUBSTRING(\r\n      u.mobile_phone_number,\r\n      CHAR_LENGTH(u.mobile_number_country_code) + 2\r\n      )\r\n    WHEN u.mobile_phone_number LIKE CONCAT(u.mobile_number_country_code, '%') THEN SUBSTRING(\r\n      u.mobile_phone_number,\r\n      CHAR_LENGTH(u.mobile_number_country_code) + 1\r\n      )\r\n    ELSE COALESCE(u.mobile_phone_number, '')\r\n  END, ''), 16) AS mobile_number,\r\n  cast(u.dob as Text) as dob ,\r\n  COALESCE(u.referral_code, '') AS referral_code,\r\n  CASE WHEN u.locale ='en' THEN 1\r\n\tELSE 2\r\n   END AS language_id,\r\n  a.city,\r\n  a.latitude,\r\n  a.longitude,\r\n--   when country_id is '0' updated as '1' \r\n  CASE\r\n    WHEN a.country_id='0' THEN '1'\r\n    ELSE a.country_id\r\n  END AS country_id,\r\n  True as receive_marketing_promotions,\r\n  case \r\n  \twhen sua.provider = 'google_oauth2' then 'google'\r\n\telse sua.provider end as login_type,\r\n\tsua.uid as social_id,\r\n\t0 as balance,\r\n\tu.blacklisted_at,\r\n\tu.blacklisted_reason,\r\n\tROW_NUMBER() over (partition by u.id order by sua.updated_at desc) as rn\r\n\r\nFROM spree_users u\r\nLEFT JOIN spree_user_addresses ua ON u.id = ua.user_id AND ua.default = TRUE\r\nLEFT JOIN spree_addresses a ON ua.address_id = a.id\r\nleft join spree_user_authentications sua on u.id = sua.user_id \r\nORDER BY u.id ASC)\r\n\r\nselect id, is_deleted, created_at, updated_at, first_name, last_name, email, gender, country_code, mobile_number, dob, referral_code, language_id, city,\r\n\tlatitude, longitude, country_id, receive_marketing_promotions, login_type, social_id, balance, blacklisted_at, blacklisted_reason\r\n\tfrom cte \r\n\twhere rn = 1;"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings",
									"copyBehavior": "PreserveHierarchy"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"logSettings": {
								"enableCopyActivityLog": true,
								"copyActivityLogSettings": {
									"logLevel": "Warning",
									"enableReliableLogging": false
								},
								"logLocationSettings": {
									"linkedServiceName": {
										"referenceName": "LS_CrossDB_Connection_Storage",
										"type": "LinkedServiceReference"
									}
								}
							},
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "id",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "id",
											"type": "Int32",
											"physicalType": "INT_32"
										}
									},
									{
										"source": {
											"name": "is_deleted",
											"type": "Boolean",
											"physicalType": "boolean"
										},
										"sink": {
											"name": "is_deleted",
											"type": "Boolean",
											"physicalType": "BOOLEAN"
										}
									},
									{
										"source": {
											"name": "created_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										},
										"sink": {
											"name": "created_at",
											"type": "DateTime",
											"physicalType": "INT_96"
										}
									},
									{
										"source": {
											"name": "updated_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										},
										"sink": {
											"name": "updated_at",
											"type": "DateTime",
											"physicalType": "INT_96"
										}
									},
									{
										"source": {
											"name": "first_name",
											"type": "String",
											"physicalType": "text"
										},
										"sink": {
											"name": "first_name",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "last_name",
											"type": "String",
											"physicalType": "text"
										},
										"sink": {
											"name": "last_name",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "email",
											"type": "String",
											"physicalType": "character varying"
										},
										"sink": {
											"name": "email",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "gender",
											"type": "String",
											"physicalType": "text"
										},
										"sink": {
											"name": "gender",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "country_code",
											"type": "String",
											"physicalType": "text"
										},
										"sink": {
											"name": "country_code",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "mobile_number",
											"type": "String",
											"physicalType": "text"
										},
										"sink": {
											"name": "mobile_number",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "dob",
											"type": "String",
											"physicalType": "text"
										},
										"sink": {
											"name": "dob",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "referral_code",
											"type": "String",
											"physicalType": "character varying"
										},
										"sink": {
											"name": "referral_code",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "language_id",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "language_id",
											"type": "Int32",
											"physicalType": "INT_32"
										}
									},
									{
										"source": {
											"name": "city",
											"type": "String",
											"physicalType": "character varying"
										},
										"sink": {
											"name": "city",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "latitude",
											"type": "Double",
											"physicalType": "double precision"
										},
										"sink": {
											"name": "latitude",
											"type": "Double",
											"physicalType": "DOUBLE"
										}
									},
									{
										"source": {
											"name": "longitude",
											"type": "Double",
											"physicalType": "double precision"
										},
										"sink": {
											"name": "longitude",
											"type": "Double",
											"physicalType": "DOUBLE"
										}
									},
									{
										"source": {
											"name": "country_id",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "country_id",
											"type": "Int32",
											"physicalType": "INT_32"
										}
									},
									{
										"source": {
											"name": "receive_marketing_promotions",
											"type": "Boolean",
											"physicalType": "boolean"
										},
										"sink": {
											"name": "receive_marketing_promotions",
											"type": "Boolean",
											"physicalType": "BOOLEAN"
										}
									},
									{
										"source": {
											"name": "login_type",
											"type": "String",
											"physicalType": "character varying"
										},
										"sink": {
											"name": "login_type",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "social_id",
											"type": "String",
											"physicalType": "character varying"
										},
										"sink": {
											"name": "social_id",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "balance",
											"type": "Int32",
											"physicalType": "integer"
										},
										"sink": {
											"name": "balance",
											"type": "Int32",
											"physicalType": "INT_32"
										}
									},
									{
										"source": {
											"name": "blacklisted_at",
											"type": "DateTime",
											"physicalType": "timestamp without time zone"
										},
										"sink": {
											"name": "blacklisted_at",
											"type": "DateTime",
											"physicalType": "INT_96"
										}
									},
									{
										"source": {
											"name": "blacklisted_reason",
											"type": "String",
											"physicalType": "character varying"
										},
										"sink": {
											"name": "blacklisted_reason",
											"type": "String",
											"physicalType": "UTF8"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_V1_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_Intermiadate_Result",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Copy data1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "user",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"city": {},
									"StoreInDB": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "User DB"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/user_cdc')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup1",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzurePostgreSqlSource",
								"query": "select max(updated_at) as max_updated_date from public.user;",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_V2_USER_DB_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {
									"table_name": "user"
								}
							}
						}
					},
					{
						"name": "Set variable1",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Lookup1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "max_updated_date",
							"value": {
								"value": "@activity('Lookup1').output.firstRow.max_updated_date",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Set variable1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "PostgreSqlV2Source",
								"query": {
									"value": "with cte as\n(SELECT\n  u.id,\n  CASE\n    WHEN u.deleted_at IS NOT NULL THEN TRUE\n    ELSE FALSE\n  END AS is_deleted,\n  u.created_at,\n  u.updated_at,\n  LEFT(COALESCE(u.first_name, ''), 40) AS first_name,\n  LEFT(COALESCE(u.last_name, ''), 40) AS last_name,\n  u.email,\n  'others' as gender,\n  COALESCE(CONCAT('+', u.mobile_number_country_code),'') AS country_code,\n  LEFT(COALESCE(CASE\n    WHEN u.mobile_phone_number LIKE CONCAT(\n      '+', u.mobile_number_country_code,\n      '%'\n      ) THEN SUBSTRING(\n      u.mobile_phone_number,\n      CHAR_LENGTH(u.mobile_number_country_code) + 2\n      )\n    WHEN u.mobile_phone_number LIKE CONCAT(u.mobile_number_country_code, '%') THEN SUBSTRING(\n      u.mobile_phone_number,\n      CHAR_LENGTH(u.mobile_number_country_code) + 1\n      )\n    ELSE COALESCE(u.mobile_phone_number, '')\n  END, ''), 16) AS mobile_number,\n  cast(u.dob as Text) as dob ,\n  COALESCE(u.referral_code, '') AS referral_code,\n  CASE WHEN u.locale ='en' THEN 1\n\tELSE 2\n   END AS language_id,\n  a.city,\n  a.latitude,\n  a.longitude,\n--   when country_id is '0' updated as '1' \n  CASE\n    WHEN a.country_id='0' THEN '1'\n    ELSE a.country_id\n  END AS country_id,\n  True as receive_marketing_promotions,\n  case \n  \twhen sua.provider = 'google_oauth2' then 'google'\n\telse sua.provider end as login_type,\n\tsua.uid as social_id,\n\t0 as balance,\n\tu.blacklisted_at,\n\tu.blacklisted_reason,\n\tROW_NUMBER() over (partition by u.id order by sua.updated_at desc) as rn\n\nFROM spree_users u\nLEFT JOIN spree_user_addresses ua ON u.id = ua.user_id AND ua.default = TRUE\nLEFT JOIN spree_addresses a ON ua.address_id = a.id\nleft join spree_user_authentications sua on u.id = sua.user_id \nORDER BY u.id ASC)\n\nselect id, is_deleted, created_at, updated_at, first_name, last_name, email, gender, country_code, mobile_number, dob, referral_code, language_id, city,\nlatitude, longitude, country_id, receive_marketing_promotions, login_type, social_id, balance, blacklisted_at, blacklisted_reason\nfrom cte \nwhere rn = 1\nand updated_at > '@{variables('max_updated_date')}';",
									"type": "Expression"
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings",
									"copyBehavior": "PreserveHierarchy"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_V1_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_Intermiadate_Result",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Copy data1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_user_cdc",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"citytable": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Delete1",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "Data flow1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DS_Intermiadate_Result",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"max_updated_date": {
						"type": "String"
					}
				},
				"folder": {
					"name": "User DB CDC"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/address_cdc')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup1",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzurePostgreSqlSource",
								"query": "select max(updated_at) as max_updated_date from address",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_V2_USER_DB_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {
									"table_name": "address"
								}
							}
						}
					},
					{
						"name": "Set variable1",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Lookup1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "max_updated_date",
							"value": {
								"value": "@activity('Lookup1').output.firstRow.max_updated_date",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Set variable1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "PostgreSqlV2Source",
								"query": {
									"value": "SELECT DISTINCT\n    sua.id,\n    CASE\n        WHEN sa.address1 IS NOT NULL AND sa.address2 IS NOT NULL THEN\n            CONCAT(sa.address1, ' ', sa.address2, ', ')\n        WHEN sa.address1 IS NOT NULL THEN\n            CONCAT(sa.address1, ' ')\n        WHEN sa.address2 IS NOT NULL THEN\n            CONCAT(sa.address2, ', ')\n        ELSE ''\n    END AS formatted_address,\n    COALESCE(COALESCE(sst_en.name, sst_ar.name),'') AS city,\n    COALESCE(scon.name, 'Saudi Arabia') AS country,\n    COALESCE(NULLIF(regexp_replace(sa.zipcode, '[^0-9]', '', 'g'), '')::BIGINT, NULL) AS postal_code,\n    sua.created_at,\n    sua.updated_at,\n    COALESCE(sdt_en.name, sdt_ar.name) AS district,\n    COALESCE(sa.latitude, 0) AS latitude,\n    COALESCE(sa.longitude, 0) AS longitude,\n    COALESCE(sua.default, 'false') AS is_default,\n    sua.user_id AS user_id,\n    'other' AS type,\n    COALESCE(\n        CASE \n            WHEN sa.driver_meta_data IS NOT NULL THEN sa.driver_meta_data->>'verified'\n            ELSE 'false'\n        END, 'false') AS is_verified,  -- Ensure non-null value here\n    '' AS title,\n    sa.driver_meta_data->>'notes' AS comments\nFROM\n    spree_user_addresses sua\nLEFT JOIN spree_addresses sa ON sua.address_id = sa.id\nLEFT JOIN spree_countries scon ON sa.country_id = scon.id\nLEFT JOIN spree_districts sdist ON sdist.id = sa.district_id\nLEFT JOIN spree_district_translations sdt_en ON sdt_en.spree_district_id = sdist.id AND sdt_en.locale = 'en'\nLEFT JOIN spree_district_translations sdt_ar ON sdt_ar.spree_district_id = sdist.id AND sdt_ar.locale = 'ar'\nLEFT JOIN spree_state_translations sst_en ON sst_en.id = sa.state_id AND sst_en.locale = 'en'\nLEFT JOIN spree_state_translations sst_ar ON sst_ar.id = sa.state_id AND sst_ar.locale = 'ar'\nWHERE (sa.id IS NOT NULL AND city IS NOT NULL)\nand sua.updated_at > '@{variables('max_updated_date')}'\nORDER BY sua.id DESC;",
									"type": "Expression"
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_V1_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_Intermiadate_Result",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Copy data1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_address_cdc",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Delete1",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "Data flow1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DS_Intermiadate_Result",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"max_updated_date": {
						"type": "String"
					}
				},
				"folder": {
					"name": "User DB CDC"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/checkout_cards_cdc')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup1",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzurePostgreSqlSource",
								"query": "select max(updated_at) as max_updated_date from checkout_cards",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_V2_USER_DB_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {
									"table_name": "checkout_cards"
								}
							}
						}
					},
					{
						"name": "Set variable1",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Lookup1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "max_updated_date",
							"value": {
								"value": "@activity('Lookup1').output.firstRow.max_updated_date",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Set variable1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "PostgreSqlV2Source",
								"query": "SELECT \r\n    a.id,\r\n    a.user_id,\r\n\tCOALESCE(a.name, '') AS name_on_card,\r\n    COALESCE(a.cc_type, '') AS scheme,\r\n    CASE \r\n        WHEN a.cc_type = 'MADA' THEN 'mada'\r\n        ELSE ''\r\n    END AS scheme_local,\r\n\tCOALESCE(a.gateway_payment_profile_id, '') AS instrument_id,\r\n\ta.last_digits,\r\n\ta.month,\r\n\ta.year,\r\n    a.updated_at,\r\n    a.created_at,\r\n\t'CREDIT' as card_type\r\nFROM   \r\n    spree_credit_cards a\r\nwhere user_id is not null\r\nand gateway_customer_profile_id is not null\r\nand a.updated_at > '@{variables('max_updated_date')}'\r\nORDER BY \r\n    id ASC;"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_V1_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_Intermiadate_Result",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Copy data1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_checkout_cards_cdc",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Delete1",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "Data flow1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DS_Intermiadate_Result",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"max_updated_date": {
						"type": "String"
					}
				},
				"folder": {
					"name": "User DB CDC"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/feedback_cdc')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup1",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzurePostgreSqlSource",
								"query": "select max(updated_at) as max_updated_date from feedback;",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_V2_USER_DB_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {
									"table_name": "feedback"
								}
							}
						}
					},
					{
						"name": "Set variable1",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Lookup1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "max_updated_date",
							"value": {
								"value": "@activity('Lookup1').output.firstRow.max_updated_date",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Set variable1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "PostgreSqlV2Source",
								"query": {
									"value": "select \nsfdrw.id,\nsur.first_name,\nsur.last_name,\nsur.email,\nsur.mobile_number_country_code as country_code,\nsur.mobile_phone_number as mobile_number,\nsfdrw.comment as message,\nsfdrw.created_at,\nsfdrw.updated_at,\nsfdrw.user_id\nfrom spree_feedback_reviews sfdrw\nLeft join spree_users sur on sur.id = sfdrw.user_id\nwhere sfdrw.updated_at >= '@{variables('max_updated_date')}';",
									"type": "Expression"
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_V1_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_Intermiadate_Result",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Copy data1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_feedback_cdc",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"max_updated_date": {
						"type": "String"
					}
				},
				"folder": {
					"name": "User DB CDC"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/loyalty_member_cdc')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup1",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzurePostgreSqlSource",
								"query": "select max(updated_at) as max_updated_date from loyalty_member;",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_V2_USER_DB_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {
									"table_name": "loyalty_member"
								}
							}
						}
					},
					{
						"name": "Set variable1",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Lookup1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "max_updated_date",
							"value": {
								"value": "@activity('Lookup1').output.firstRow.max_updated_date",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Set variable1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "PostgreSqlV2Source",
								"query": {
									"value": "Select\n  id,\n  user_id,\n  tenant_id,\n  loyalty_member_id,\n  loyalty_id,\n  created_at,\n  updated_at\nfrom spree_loyalty_members\nwhere updated_at > '@{variables('max_updated_date')}';",
									"type": "Expression"
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_V1_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_Intermiadate_Result",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Copy data1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_loyalty_member_cdc",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Delete1",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "Data flow1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DS_Intermiadate_Result",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"max_updated_date": {
						"type": "String"
					}
				},
				"folder": {
					"name": "User DB CDC"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/employee_cdc')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup1",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzurePostgreSqlSource",
								"query": "select max(updated_at) as max_updated_date from employee;",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_V2_USER_DB_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {
									"table_name": "employee"
								}
							}
						}
					},
					{
						"name": "Set variable1",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Lookup1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "max_updated_date",
							"value": {
								"value": "@activity('Lookup1').output.firstRow.max_updated_date",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Set variable1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "PostgreSqlV2Source",
								"query": "SELECT u.id,\r\nsru.role_id,\r\nu.email,\r\nu.created_at,\r\nu.updated_at,\r\nCASE\r\n    WHEN u.deleted_at IS NOT NULL THEN TRUE\r\n    ELSE FALSE\r\n  END AS is_deleted,\r\n  LEFT(COALESCE(u.first_name, ''), 40) AS first_name,\r\n  LEFT(COALESCE(u.last_name, ''), 40) AS last_name,\r\n  LEFT(COALESCE(CASE\r\n    WHEN u.mobile_phone_number LIKE CONCAT(\r\n      '+', u.mobile_number_country_code,\r\n      '%'\r\n      ) THEN SUBSTRING(\r\n      u.mobile_phone_number,\r\n      CHAR_LENGTH(u.mobile_number_country_code) + 2\r\n      )\r\n    WHEN u.mobile_phone_number LIKE CONCAT(u.mobile_number_country_code, '%') THEN SUBSTRING(\r\n      u.mobile_phone_number,\r\n      CHAR_LENGTH(u.mobile_number_country_code) + 1\r\n      )\r\n    ELSE COALESCE(u.mobile_phone_number, '')\r\n  END, ''), 16) AS mobile_number,\r\n  u.dob,\r\n  COALESCE(\r\n  CONCAT('+', u.mobile_number_country_code),\r\n  ''\r\n  ) AS country_code,\r\n  CASE WHEN sa.country_id='0' THEN '1'\r\n    ELSE sa.country_id\r\n  END AS country_id,\r\n\t'others' as gender,\r\n\t'admin' as user_type,\r\n\t'available' as availability,\r\n  sr.name as role_name,\r\n\tCASE\r\n    WHEN u.deleted_at IS NOT NULL THEN FALSE\r\n    ELSE TRUE\r\n  END AS active,\r\n\tCASE\r\n    WHEN u.deleted_at IS NOT NULL THEN FALSE\r\n    ELSE TRUE\r\n  END AS status,\r\n  sa.city\r\nfrom spree_users u\r\ninner join spree_roles_users sru on sru.user_id = u.id\r\ninner join spree_roles sr on sr.id = sru.role_id and sr.name <> 'user'\r\nleft join spree_user_addresses sua on sua.user_id = u.id and sua.default=TRUE\r\nleft join spree_addresses sa on sua.address_id = sa.id\r\nwhere u.updated_at > '@{variables('max_updated_date')}'\r\norder by u.id asc"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_V1_PRODUCTION",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_Intermiadate_Result",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Copy data1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_employee_cdc",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"source2": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Delete1",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "Data flow1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DS_Intermiadate_Result",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"max_updated_date": {
						"type": "String"
					}
				},
				"folder": {
					"name": "User DB CDC"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/brand_and_product_table')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "brand_table",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "brand",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "product_table",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "brand_table",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "product",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Product DB"
				},
				"annotations": []
			},
			"dependsOn": []
		}
	]
}