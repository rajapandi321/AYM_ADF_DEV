{
	"name": "employee",
	"properties": {
		"folder": {
			"name": "User DB"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DS_Intermiadate_Result",
						"type": "DatasetReference"
					},
					"name": "employee"
				},
				{
					"linkedService": {
						"referenceName": "LS_V2_USER_DB_PRODUCTION_SERVER",
						"type": "LinkedServiceReference"
					},
					"name": "city"
				}
			],
			"sinks": [
				{
					"linkedService": {
						"referenceName": "LS_V2_USER_DB_PRODUCTION_SERVER",
						"type": "LinkedServiceReference"
					},
					"name": "StoreInDB"
				}
			],
			"transformations": [
				{
					"name": "joiningCityTable"
				},
				{
					"name": "selectingNeededColumns"
				},
				{
					"name": "window1"
				},
				{
					"name": "selectingRequiredColumns"
				},
				{
					"name": "filteringcolumns"
				}
			],
			"scriptLines": [
				"source(output(",
				"          id as integer,",
				"          role_id as integer,",
				"          email as string,",
				"          created_at as timestamp,",
				"          updated_at as timestamp,",
				"          is_deleted as boolean,",
				"          first_name as string,",
				"          last_name as string,",
				"          mobile_number as string,",
				"          dob as timestamp,",
				"          country_code as string,",
				"          country_id as integer,",
				"          gender as string,",
				"          user_type as string,",
				"          availability as string,",
				"          role_name as string,",
				"          active as boolean,",
				"          status as boolean,",
				"          city as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> employee",
				"source(output(",
				"          id as integer,",
				"          created_at as timestamp,",
				"          updated_at as timestamp,",
				"          name as string,",
				"          country_id as integer,",
				"          abbreviation as string,",
				"          city_image_url as string,",
				"          is_visible as boolean,",
				"          deleted_at as timestamp,",
				"          latitude as double,",
				"          longitude as double,",
				"          translation_id as string,",
				"          state_id as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table',",
				"     tableName: 'city',",
				"     schemaName: 'public',",
				"     store: 'postgres',",
				"     isolationLevel: 'READ_UNCOMMITTED') ~> city",
				"employee, city join(lower(city) == name,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joiningCityTable",
				"joiningCityTable select(mapColumn(",
				"          id = employee@id,",
				"          role_id,",
				"          email,",
				"          created_at = employee@created_at,",
				"          updated_at = employee@updated_at,",
				"          is_deleted,",
				"          first_name,",
				"          last_name,",
				"          mobile_number,",
				"          dob,",
				"          country_code,",
				"          country_id = employee@country_id,",
				"          gender,",
				"          user_type,",
				"          availability,",
				"          active,",
				"          status,",
				"          city_id = city@id,",
				"          role_name",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectingNeededColumns",
				"selectingNeededColumns window(over(id),",
				"     asc(role_name, false),",
				"     final_column = rowNumber()==1) ~> window1",
				"filteringcolumns select(mapColumn(",
				"          id,",
				"          role_id,",
				"          email,",
				"          created_at,",
				"          updated_at,",
				"          is_deleted,",
				"          first_name,",
				"          last_name,",
				"          mobile_number,",
				"          dob,",
				"          country_code,",
				"          country_id,",
				"          gender,",
				"          user_type,",
				"          availability,",
				"          active,",
				"          status,",
				"          city_id",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectingRequiredColumns",
				"window1 filter(equals(final_column,true())) ~> filteringcolumns",
				"selectingRequiredColumns sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table',",
				"     tableName: 'employee',",
				"     schemaName: 'public',",
				"     deletable: false,",
				"     insertable: true,",
				"     updateable: false,",
				"     upsertable: false,",
				"     store: 'postgres',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> StoreInDB"
			]
		}
	}
}