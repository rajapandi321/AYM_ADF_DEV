{
	"name": "df_order_product_cdc",
	"properties": {
		"folder": {
			"name": "Order CDC"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DS_Intermiadate_Result",
						"type": "DatasetReference"
					},
					"name": "source1"
				},
				{
					"linkedService": {
						"referenceName": "LS_V2_PRODUCTION_SERVER",
						"type": "LinkedServiceReference"
					},
					"name": "ordershipment"
				}
			],
			"sinks": [
				{
					"linkedService": {
						"referenceName": "LS_V2_PRODUCTION_SERVER",
						"type": "LinkedServiceReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "selectshipments"
				},
				{
					"name": "join1"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "alterRow1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          id as integer,",
				"          product_variant_id as integer,",
				"          quantity as integer,",
				"          picked_weight as integer,",
				"          picked_quantity as integer,",
				"          price as decimal(38,18),",
				"          created_at as timestamp,",
				"          replaced as boolean,",
				"          state as string,",
				"          updated_at as timestamp,",
				"          action_price as decimal(38,18),",
				"          sale_price as decimal(38,18),",
				"          picker_id as integer,",
				"          product_id as integer,",
				"          delivery_instruction as string,",
				"          order_shipment_id as integer,",
				"          replacement_pref as string,",
				"          category_id as integer,",
				"          status as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> source1",
				"source(output(",
				"          id as integer,",
				"          order_id as integer,",
				"          supermarket_id as integer,",
				"          delivery_type_id as integer,",
				"          delivery_date as date,",
				"          delivered_at as timestamp,",
				"          total as double,",
				"          tax_total as double,",
				"          status as string,",
				"          driver_id as integer,",
				"          delivery_charges as double,",
				"          time_slot_id as integer,",
				"          created_at as timestamp,",
				"          updated_at as timestamp,",
				"          deleted_at as timestamp,",
				"          processing_start_at as timestamp,",
				"          dispatch_job_id as integer,",
				"          is_delivery_on_hold as boolean,",
				"          delivery_order as integer,",
				"          formatted_time_slot as string,",
				"          promotion_woa_percentage as double,",
				"          promotion_woa_max_discount as double,",
				"          discount_given as double,",
				"          is_resetted as boolean",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table',",
				"     tableName: 'order_shipment',",
				"     schemaName: 'public',",
				"     store: 'postgres',",
				"     isolationLevel: 'READ_UNCOMMITTED') ~> ordershipment",
				"ordershipment select(mapColumn(",
				"          shipment_id = id,",
				"          order_id,",
				"          shipment_status = status",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectshipments",
				"source1, selectshipments join(order_shipment_id == shipment_id,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"join1 derive(status = iif(picked_quantity >= quantity, 'picked',\r",
				"    iif(equals(replaced, true()), 'replaced',\r",
				"        iif(and(equals(shipment_status, 'pending'), equals(picked_quantity, 0)), 'pending',\r",
				"            iif(equals(state,'complete') && equals(picked_quantity, 0) && isNull(replaced), 'issue', '')\r",
				"        )\r",
				"    )\r",
				")) ~> derivedColumn1",
				"derivedColumn1 alterRow(upsertIf(true())) ~> alterRow1",
				"alterRow1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          id as integer,",
				"          product_id as integer,",
				"          quantity as integer,",
				"          price as double,",
				"          action_price as double,",
				"          status as string,",
				"          picker_id as integer,",
				"          picked_quantity as integer,",
				"          created_at as timestamp,",
				"          updated_at as timestamp,",
				"          deleted_at as timestamp,",
				"          replacement_pref as string,",
				"          order_shipment_id as integer,",
				"          product_variant_id as integer,",
				"          category_id as integer,",
				"          replacement_of as integer,",
				"          added_by as integer,",
				"          modified_by as integer,",
				"          delivery_instruction as string,",
				"          sale_price as double,",
				"          product_report_id as integer,",
				"          picked_weight as double,",
				"          replaced_by as integer,",
				"          meta as string",
				"     ),",
				"     format: 'table',",
				"     tableName: 'order_product',",
				"     schemaName: 'public',",
				"     deletable: false,",
				"     insertable: false,",
				"     updateable: false,",
				"     upsertable: true,",
				"     keys:['id'],",
				"     store: 'postgres',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     mapColumn(",
				"          id,",
				"          product_id,",
				"          quantity,",
				"          price,",
				"          action_price,",
				"          status,",
				"          picker_id,",
				"          picked_quantity,",
				"          created_at,",
				"          updated_at,",
				"          replacement_pref,",
				"          order_shipment_id,",
				"          product_variant_id,",
				"          category_id,",
				"          delivery_instruction,",
				"          sale_price,",
				"          picked_weight",
				"     )) ~> sink1"
			]
		}
	}
}