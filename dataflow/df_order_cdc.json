{
	"name": "df_order_cdc",
	"properties": {
		"folder": {
			"name": "Order CDC"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DS_Intermiadate_Result",
						"type": "DatasetReference"
					},
					"name": "source1"
				},
				{
					"linkedService": {
						"referenceName": "LS_V2_USER_DB_PRODUCTION_SERVER",
						"type": "LinkedServiceReference"
					},
					"name": "city"
				},
				{
					"linkedService": {
						"referenceName": "LS_V2_PRODUCTION_SERVER",
						"type": "LinkedServiceReference"
					},
					"name": "ordercancellationreason"
				}
			],
			"sinks": [
				{
					"linkedService": {
						"referenceName": "LS_V2_ORDER_DB_STAGE",
						"type": "LinkedServiceReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "alterRow1"
				},
				{
					"name": "selectCities"
				},
				{
					"name": "selectcancelreason"
				},
				{
					"name": "joincities"
				},
				{
					"name": "joinordercancellation"
				}
			],
			"scriptLines": [
				"source(output(",
				"          id as integer,",
				"          item_total as decimal(38,18),",
				"          total as decimal(38,18),",
				"          status as string,",
				"          user_id as integer,",
				"          completed_at as timestamp,",
				"          bill_address_id as integer,",
				"          ship_address_id as integer,",
				"          payment_total as decimal(38,18),",
				"          created_at as timestamp,",
				"          updated_at as timestamp,",
				"          currency as string,",
				"          item_count as integer,",
				"          cancelled_at as timestamp,",
				"          cancelled_by as integer,",
				"          delivery_option_id as integer,",
				"          cancel_reason as string,",
				"          city as string,",
				"          language_id as integer,",
				"          country_id as integer,",
				"          payment_option_id as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> source1",
				"source(output(",
				"          id as integer,",
				"          created_at as timestamp,",
				"          updated_at as timestamp,",
				"          name as string,",
				"          country_id as integer,",
				"          abbreviation as string,",
				"          city_image_url as string,",
				"          is_visible as boolean,",
				"          deleted_at as timestamp,",
				"          latitude as double,",
				"          longitude as double,",
				"          translation_id as string,",
				"          state_id as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table',",
				"     tableName: 'city',",
				"     schemaName: 'public',",
				"     store: 'postgres',",
				"     isolationLevel: 'READ_UNCOMMITTED') ~> city",
				"source(output(",
				"          id as integer,",
				"          reason_en as string,",
				"          reason_ar as string,",
				"          visible as boolean,",
				"          created_at as timestamp,",
				"          updated_at as timestamp,",
				"          deleted_at as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table',",
				"     tableName: 'order_cancellation_reason',",
				"     schemaName: 'public',",
				"     store: 'postgres',",
				"     isolationLevel: 'READ_UNCOMMITTED') ~> ordercancellationreason",
				"joinordercancellation alterRow(upsertIf(true())) ~> alterRow1",
				"city select(mapColumn(",
				"          city_id = id,",
				"          city_name = name",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectCities",
				"ordercancellationreason select(mapColumn(",
				"          cancellation_id = id,",
				"          reason_en",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectcancelreason",
				"source1, selectCities join(lower(city) == city_name,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joincities",
				"joincities, selectcancelreason join(cancel_reason == reason_en,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinordercancellation",
				"alterRow1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          id as integer,",
				"          item_total as double,",
				"          total as double,",
				"          status as string,",
				"          completed_at as timestamp,",
				"          user_id as integer,",
				"          country_id as integer,",
				"          city_id as integer,",
				"          payment_total as double,",
				"          currency as string,",
				"          item_count as integer,",
				"          delivery_option_id as integer,",
				"          payment_option_id as integer,",
				"          language_id as integer,",
				"          created_at as timestamp,",
				"          updated_at as timestamp,",
				"          deleted_at as timestamp,",
				"          cancelled_by as integer,",
				"          cancelled_at as timestamp,",
				"          order_cancellation_reason_id as integer,",
				"          order_cancellation_comment as string,",
				"          user_card_id as integer",
				"     ),",
				"     format: 'table',",
				"     tableName: 'order',",
				"     schemaName: 'public',",
				"     deletable: false,",
				"     insertable: false,",
				"     updateable: false,",
				"     upsertable: true,",
				"     keys:['id'],",
				"     store: 'postgres',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     mapColumn(",
				"          id,",
				"          item_total,",
				"          total,",
				"          status,",
				"          completed_at,",
				"          user_id,",
				"          country_id,",
				"          city_id,",
				"          payment_total,",
				"          currency,",
				"          item_count,",
				"          delivery_option_id,",
				"          payment_option_id,",
				"          language_id,",
				"          created_at,",
				"          updated_at,",
				"          cancelled_by,",
				"          cancelled_at,",
				"          order_cancellation_reason_id = cancellation_id",
				"     )) ~> sink1"
			]
		}
	}
}