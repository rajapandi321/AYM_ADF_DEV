{
	"name": "order_shipment",
	"properties": {
		"folder": {
			"name": "Order DB"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DS_Intermiadate_Result",
						"type": "DatasetReference"
					},
					"name": "ordershipment"
				},
				{
					"linkedService": {
						"referenceName": "LS_V2_USER_DB_PRODUCTION_SERVER",
						"type": "LinkedServiceReference"
					},
					"name": "deliverytype"
				},
				{
					"linkedService": {
						"referenceName": "LS_V2_USER_DB_PRODUCTION_SERVER",
						"type": "LinkedServiceReference"
					},
					"name": "source1"
				}
			],
			"sinks": [
				{
					"linkedService": {
						"referenceName": "LS_V2_PRODUCTION_SERVER",
						"type": "LinkedServiceReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "joindeliverytype"
				},
				{
					"name": "selectdeliverytype"
				},
				{
					"name": "mergingtimeslots"
				},
				{
					"name": "select1"
				},
				{
					"name": "selecttimeslots"
				},
				{
					"name": "join1"
				}
			],
			"scriptLines": [
				"source(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> ordershipment",
				"source(output(",
				"          id as integer,",
				"          name as string,",
				"          created_at as timestamp,",
				"          updated_at as timestamp,",
				"          deleted_at as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table',",
				"     tableName: 'delivery_type',",
				"     schemaName: 'public',",
				"     store: 'postgres',",
				"     isolationLevel: 'READ_UNCOMMITTED') ~> deliverytype",
				"source(output(",
				"          id as integer,",
				"          start_time as string,",
				"          end_time as string,",
				"          country_id as integer,",
				"          delivery_option_id as integer,",
				"          day_of_week as string,",
				"          created_at as timestamp,",
				"          updated_at as timestamp,",
				"          deleted_at as timestamp,",
				"          is_enabled as boolean",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table',",
				"     tableName: 'time_slot',",
				"     schemaName: 'public',",
				"     store: 'postgres',",
				"     isolationLevel: 'READ_UNCOMMITTED') ~> source1",
				"ordershipment, selectdeliverytype join(order_type == delivery_type_name,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joindeliverytype",
				"deliverytype select(mapColumn(",
				"          delivery_type_id = id,",
				"          delivery_type_name = name",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectdeliverytype",
				"join1 derive(formatted_time_slot = concat(start_time,'-',end_time),",
				"          delivery_type_id = coalesce(delivery_type_id,1)) ~> mergingtimeslots",
				"mergingtimeslots select(mapColumn(",
				"          id,",
				"          order_id,",
				"          order_status,",
				"          created_at,",
				"          updated_at,",
				"          tax_total,",
				"          total,",
				"          order_type,",
				"          time_slot_id,",
				"          supermarket_id,",
				"          delivery_date,",
				"          delivery_charges,",
				"          is_delivery_on_hold,",
				"          processing_start_at,",
				"          delivery_type_id,",
				"          formatted_time_slot",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"source1 select(mapColumn(",
				"          tc_id = id,",
				"          start_time,",
				"          end_time,",
				"          delivery_option_id,",
				"          day_of_week",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selecttimeslots",
				"joindeliverytype, selecttimeslots join(ERROR_FUNCTION('') == ERROR_FUNCTION(''),",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"select1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          id as integer,",
				"          order_id as integer,",
				"          supermarket_id as integer,",
				"          delivery_type_id as integer,",
				"          delivery_date as date,",
				"          delivered_at as timestamp,",
				"          total as double,",
				"          tax_total as double,",
				"          status as string,",
				"          driver_id as integer,",
				"          delivery_charges as double,",
				"          time_slot_id as integer,",
				"          created_at as timestamp,",
				"          updated_at as timestamp,",
				"          deleted_at as timestamp,",
				"          processing_start_at as timestamp,",
				"          dispatch_job_id as integer,",
				"          is_delivery_on_hold as boolean,",
				"          delivery_order as integer,",
				"          formatted_time_slot as string,",
				"          promotion_woa_percentage as double,",
				"          promotion_woa_max_discount as double,",
				"          discount_given as double",
				"     ),",
				"     format: 'table',",
				"     tableName: 'order_shipment',",
				"     schemaName: 'public',",
				"     deletable: false,",
				"     insertable: true,",
				"     updateable: false,",
				"     upsertable: false,",
				"     store: 'postgres',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     mapColumn(",
				"          id,",
				"          order_id,",
				"          status = order_status,",
				"          created_at,",
				"          updated_at,",
				"          tax_total,",
				"          total,",
				"          supermarket_id,",
				"          delivery_date,",
				"          delivery_charges,",
				"          is_delivery_on_hold,",
				"          processing_start_at,",
				"          delivery_type_id,",
				"          time_slot_id,",
				"          formatted_time_slot",
				"     )) ~> sink1"
			]
		}
	}
}